{"mappings":"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","sources":["<anon>","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/environment-webworker/webworkerAll.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/batcher/gpu/getTextureBatchBindGroup.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/batcher/gpu/getTextureBatchBindGroup.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/CanvasPool.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/CanvasPool.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gl/shader/batchSamplersUniformGroup.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gl/shader/batchSamplersUniformGroup.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire4692\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"6rz4M\", function(module, exports) {\nparcelRequire(\"3AoPf\");\nparcelRequire(\"ipkVP\");\nparcelRequire(\"28YnR\");\nparcelRequire(\"aX86R\");\nparcelRequire(\"7FXt7\");\nparcelRequire(\"lT9Uv\");\nparcelRequire(\"8Sz72\");\nparcelRequire(\"85BOi\");\nparcelRequire(\"3aSYR\");\nparcelRequire(\"gOfig\");\nparcelRequire(\"bMKF0\");\n\"use strict\";\n\n});\n\nparcelRegister(\"9q6W4\", function(module, exports) {\n\n$parcel$export(module.exports, \"getTextureBatchBindGroup\", () => $9d31090f5bf01809$export$84c26df82650dc9b);\n\nvar $86NKO = parcelRequire(\"86NKO\");\n\nvar $5h88T = parcelRequire(\"5h88T\");\n\nvar $fIcRj = parcelRequire(\"fIcRj\");\n\"use strict\";\nconst $9d31090f5bf01809$var$cachedGroups = {};\nfunction $9d31090f5bf01809$export$84c26df82650dc9b(textures, size) {\n    let uid = 0;\n    for(let i = 0; i < size; i++)uid = uid * 31 + textures[i].uid >>> 0;\n    return $9d31090f5bf01809$var$cachedGroups[uid] || $9d31090f5bf01809$var$generateTextureBatchBindGroup(textures, uid);\n}\nfunction $9d31090f5bf01809$var$generateTextureBatchBindGroup(textures, key) {\n    const bindGroupResources = {};\n    let bindIndex = 0;\n    for(let i = 0; i < (0, $fIcRj.MAX_TEXTURES); i++){\n        const texture = i < textures.length ? textures[i] : (0, $5h88T.Texture).EMPTY.source;\n        bindGroupResources[bindIndex++] = texture.source;\n        bindGroupResources[bindIndex++] = texture.style;\n    }\n    const bindGroup = new (0, $86NKO.BindGroup)(bindGroupResources);\n    $9d31090f5bf01809$var$cachedGroups[key] = bindGroup;\n    return bindGroup;\n}\n\n});\n\nparcelRegister(\"8zNlV\", function(module, exports) {\n\n$parcel$export(module.exports, \"CanvasPool\", () => $395e68b4f7dbc555$export$e56d0a06781accc9);\n\nvar $5m2Qn = parcelRequire(\"5m2Qn\");\n\nvar $domwE = parcelRequire(\"domwE\");\n\"use strict\";\nclass $395e68b4f7dbc555$export$62d9f0b8aada09d7 {\n    constructor(canvasOptions){\n        this._canvasPool = /* @__PURE__ */ Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n    /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */ _createCanvasAndContext(pixelWidth, pixelHeight) {\n        const canvas = (0, $5m2Qn.DOMAdapter).get().createCanvas();\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n        const context = canvas.getContext(\"2d\");\n        return {\n            canvas: canvas,\n            context: context\n        };\n    }\n    /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */ getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n        minWidth = Math.ceil(minWidth * resolution - 1e-6);\n        minHeight = Math.ceil(minHeight * resolution - 1e-6);\n        minWidth = (0, $domwE.nextPow2)(minWidth);\n        minHeight = (0, $domwE.nextPow2)(minHeight);\n        const key = (minWidth << 17) + (minHeight << 1);\n        if (!this._canvasPool[key]) this._canvasPool[key] = [];\n        let canvasAndContext = this._canvasPool[key].pop();\n        if (!canvasAndContext) canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        return canvasAndContext;\n    }\n    /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */ returnCanvasAndContext(canvasAndContext) {\n        const { width: width, height: height } = canvasAndContext.canvas;\n        const key = (width << 17) + (height << 1);\n        this._canvasPool[key].push(canvasAndContext);\n    }\n    clear() {\n        this._canvasPool = {};\n    }\n}\nconst $395e68b4f7dbc555$export$e56d0a06781accc9 = new $395e68b4f7dbc555$export$62d9f0b8aada09d7();\n\n});\n\nparcelRegister(\"gxQKX\", function(module, exports) {\n\n$parcel$export(module.exports, \"batchSamplersUniformGroup\", () => $e0d25102347a0bd9$export$e08a38be63346709);\n\nvar $fIcRj = parcelRequire(\"fIcRj\");\n\nvar $lJEsO = parcelRequire(\"lJEsO\");\n\"use strict\";\nconst $e0d25102347a0bd9$var$sampleValues = new Int32Array((0, $fIcRj.MAX_TEXTURES));\nfor(let i = 0; i < (0, $fIcRj.MAX_TEXTURES); i++)$e0d25102347a0bd9$var$sampleValues[i] = i;\nconst $e0d25102347a0bd9$export$e08a38be63346709 = new (0, $lJEsO.UniformGroup)({\n    uTextures: {\n        value: $e0d25102347a0bd9$var$sampleValues,\n        type: `i32`,\n        size: (0, $fIcRj.MAX_TEXTURES)\n    }\n}, {\n    isStatic: true\n});\n\n});\n\n\n//# sourceMappingURL=webworkerAll.5b6e9d3a.js.map\n","import '../app/init.mjs';\nimport '../spritesheet/init.mjs';\nimport '../rendering/init.mjs';\nimport '../scene/graphics/init.mjs';\nimport '../scene/mesh/init.mjs';\nimport '../scene/text/init.mjs';\nimport '../scene/text-bitmap/init.mjs';\nimport '../scene/text-html/init.mjs';\nimport '../scene/sprite-tiling/init.mjs';\nimport '../scene/sprite-nine-slice/init.mjs';\nimport '../filters/init.mjs';\n\n\"use strict\";\n//# sourceMappingURL=webworkerAll.mjs.map\n","import { BindGroup } from '../../renderers/gpu/shader/BindGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { MAX_TEXTURES } from '../shared/const.mjs';\n\n\"use strict\";\nconst cachedGroups = {};\nfunction getTextureBatchBindGroup(textures, size) {\n  let uid = 0;\n  for (let i = 0; i < size; i++) {\n    uid = uid * 31 + textures[i].uid >>> 0;\n  }\n  return cachedGroups[uid] || generateTextureBatchBindGroup(textures, uid);\n}\nfunction generateTextureBatchBindGroup(textures, key) {\n  const bindGroupResources = {};\n  let bindIndex = 0;\n  for (let i = 0; i < MAX_TEXTURES; i++) {\n    const texture = i < textures.length ? textures[i] : Texture.EMPTY.source;\n    bindGroupResources[bindIndex++] = texture.source;\n    bindGroupResources[bindIndex++] = texture.style;\n  }\n  const bindGroup = new BindGroup(bindGroupResources);\n  cachedGroups[key] = bindGroup;\n  return bindGroup;\n}\n\nexport { getTextureBatchBindGroup };\n//# sourceMappingURL=getTextureBatchBindGroup.mjs.map\n","import { BindGroup } from '../../renderers/gpu/shader/BindGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { MAX_TEXTURES } from '../shared/const';\n\nimport type { TextureSource } from '../../renderers/shared/texture/sources/TextureSource';\n\nconst cachedGroups: Record<number, BindGroup> = {};\n\nexport function getTextureBatchBindGroup(textures: TextureSource[], size: number)\n{\n    let uid = 0;\n\n    for (let i = 0; i < size; i++)\n    {\n        uid = ((uid * 31) + textures[i].uid) >>> 0;\n    }\n\n    return cachedGroups[uid] || generateTextureBatchBindGroup(textures, uid);\n}\n\nfunction generateTextureBatchBindGroup(textures: TextureSource[], key: number): BindGroup\n{\n    const bindGroupResources: Record<string, any> = {};\n\n    let bindIndex = 0;\n\n    for (let i = 0; i < MAX_TEXTURES; i++)\n    {\n        const texture = i < textures.length ? textures[i] : Texture.EMPTY.source;\n\n        bindGroupResources[bindIndex++] = texture.source;\n        bindGroupResources[bindIndex++] = texture.style;\n    }\n\n    // pad out with empty textures\n    const bindGroup = new BindGroup(bindGroupResources);\n\n    cachedGroups[key] = bindGroup;\n\n    return bindGroup;\n}\n\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { nextPow2 } from '../../../../maths/misc/pow2.mjs';\n\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */ Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return { canvas, context };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = nextPow2(minWidth);\n    minHeight = nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const { width, height } = canvasAndContext.canvas;\n    const key = (width << 17) + (height << 1);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\n\nexport { CanvasPool, CanvasPoolClass };\n//# sourceMappingURL=CanvasPool.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { nextPow2 } from '../../../../maths/misc/pow2';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @name CanvasPool\n * @memberof rendering\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    private _canvasPool: {[x in string | number]: CanvasAndContext[]};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this._canvasPool = Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    private _createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    public getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this._canvasPool[key])\n        {\n            this._canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this._canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const { width, height } = canvasAndContext.canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        this._canvasPool[key].push(canvasAndContext);\n    }\n\n    public clear(): void\n    {\n        this._canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n","import { MAX_TEXTURES } from '../../../batcher/shared/const.mjs';\nimport { UniformGroup } from '../../shared/shader/UniformGroup.mjs';\n\n\"use strict\";\nconst sampleValues = new Int32Array(MAX_TEXTURES);\nfor (let i = 0; i < MAX_TEXTURES; i++) {\n  sampleValues[i] = i;\n}\nconst batchSamplersUniformGroup = new UniformGroup({\n  uTextures: { value: sampleValues, type: `i32`, size: MAX_TEXTURES }\n}, { isStatic: true });\n\nexport { batchSamplersUniformGroup };\n//# sourceMappingURL=batchSamplersUniformGroup.mjs.map\n","import { MAX_TEXTURES } from '../../../batcher/shared/const';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\n\nconst sampleValues = new Int32Array(MAX_TEXTURES);\n\nfor (let i = 0; i < MAX_TEXTURES; i++)\n{\n    sampleValues[i] = i;\n}\n\nexport const batchSamplersUniformGroup = new UniformGroup({\n    uTextures: { value: sampleValues, type: `i32`, size: MAX_TEXTURES }\n}, { isStatic: true });\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$9d31090f5bf01809$export$84c26df82650dc9b","$86NKO","$5h88T","$fIcRj","$9d31090f5bf01809$var$cachedGroups","textures","size","uid","i","$9d31090f5bf01809$var$generateTextureBatchBindGroup","key","bindGroupResources","bindIndex","MAX_TEXTURES","texture","length","Texture","EMPTY","source","style","bindGroup","BindGroup","$395e68b4f7dbc555$export$e56d0a06781accc9","$5m2Qn","$domwE","constructor","canvasOptions","_canvasPool","create","enableFullScreen","_createCanvasAndContext","pixelWidth","pixelHeight","canvas","DOMAdapter","createCanvas","width","height","context","getContext","getOptimalCanvasAndContext","minWidth","minHeight","resolution","Math","ceil","nextPow2","canvasAndContext","pop","returnCanvasAndContext","push","clear","$e0d25102347a0bd9$export$e08a38be63346709","$lJEsO","$e0d25102347a0bd9$var$sampleValues","Int32Array","UniformGroup","uTextures","value","type","isStatic"],"version":3,"file":"webworkerAll.5b6e9d3a.js.map"}