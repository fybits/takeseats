{"mappings":"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","sources":["node_modules/.pnpm/@parcel+runtime-browser-hmr@2.12.0_@parcel+core@2.12.0/node_modules/@parcel/runtime-browser-hmr/lib/runtime-a27a5d7afc87dbc7.js","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/extensions/Extensions.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/extensions/Extensions.ts","node_modules/.pnpm/@parcel+transformer-js@2.12.0_@parcel+core@2.12.0/node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/Container.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/Container.ts","node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.js","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/color/Color.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/color/Color.ts","node_modules/.pnpm/@pixi+colord@2.9.6/node_modules/@pixi/colord/index.mjs","node_modules/.pnpm/@pixi+colord@2.9.6/node_modules/@pixi/colord/plugins/names.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/culling/cullingMixin.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/culling/cullingMixin.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/matrix/Matrix.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/matrix/Matrix.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/misc/const.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/misc/const.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/point/Point.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/point/Point.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/point/ObservablePoint.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/point/ObservablePoint.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/data/uid.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/data/uid.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/logging/deprecation.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/logging/deprecation.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/container-mixins/childrenHelperMixin.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/container-mixins/childrenHelperMixin.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/data/removeItems.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/data/removeItems.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/container-mixins/effectsMixin.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/container-mixins/effectsMixin.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/filters/FilterEffect.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/filters/FilterEffect.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/mask/MaskEffectManager.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/mask/MaskEffectManager.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/pool/PoolGroup.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/pool/PoolGroup.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/pool/Pool.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/pool/Pool.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/container-mixins/findMixin.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/container-mixins/findMixin.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/container-mixins/measureMixin.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/container-mixins/measureMixin.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/bounds/Bounds.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/bounds/Bounds.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/shapes/Rectangle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/shapes/Rectangle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/bounds/getGlobalBounds.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/bounds/getGlobalBounds.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/bounds/utils/matrixAndBoundsPool.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/bounds/utils/matrixAndBoundsPool.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/bounds/getLocalBounds.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/bounds/getLocalBounds.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/logging/warn.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/logging/warn.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/utils/checkChildrenDidChange.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/utils/checkChildrenDidChange.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/container-mixins/onRenderMixin.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/container-mixins/onRenderMixin.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/container-mixins/sortMixin.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/container-mixins/sortMixin.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/container-mixins/toLocalGlobalMixin.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/container-mixins/toLocalGlobalMixin.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/RenderGroup.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/RenderGroup.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/instructions/InstructionSet.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/instructions/InstructionSet.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/utils/assignWithIgnore.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/utils/assignWithIgnore.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/app/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/app/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/app/ResizePlugin.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/app/ResizePlugin.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/app/TickerPlugin.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/app/TickerPlugin.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/ticker/const.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/ticker/const.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/ticker/Ticker.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/ticker/Ticker.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/ticker/TickerListener.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/ticker/TickerListener.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/spritesheet/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/spritesheet/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/spritesheet/spritesheetAsset.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/spritesheet/spritesheetAsset.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/assets/loader/parsers/LoaderParser.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/assets/loader/parsers/LoaderParser.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/assets/resolver/Resolver.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/assets/resolver/Resolver.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/path.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/path.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/environment/adapter.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/environment/adapter.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/environment-browser/BrowserAdapter.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/environment-browser/BrowserAdapter.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/assets/utils/convertToList.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/assets/utils/convertToList.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/assets/utils/createStringVariations.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/assets/utils/createStringVariations.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/assets/utils/isSingleItem.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/assets/utils/isSingleItem.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/assets/utils/copySearchParams.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/assets/utils/copySearchParams.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/Texture.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/Texture.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/matrix/groupD8.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/matrix/groupD8.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/misc/NOOP.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/misc/NOOP.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/BufferSource.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/sources/BufferSource.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/TextureSource.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/sources/TextureSource.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/misc/pow2.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/misc/pow2.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/utils/definedProps.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/utils/definedProps.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureStyle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/TextureStyle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureMatrix.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/TextureMatrix.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/spritesheet/Spritesheet.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/spritesheet/Spritesheet.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMask.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/mask/alpha/AlphaMask.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite/Sprite.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite/Sprite.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/data/updateQuadBounds.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/data/updateQuadBounds.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/mask/utils/addMaskBounds.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/mask/utils/addMaskBounds.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/mask/utils/addMaskLocalBounds.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/mask/utils/addMaskLocalBounds.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/mask/color/ColorMask.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/mask/color/ColorMask.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/mask/stencil/StencilMask.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/mask/stencil/StencilMask.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/CanvasSource.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/sources/CanvasSource.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/ImageSource.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/sources/ImageSource.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/VideoSource.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/sources/VideoSource.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/browser/detectVideoAlphaMode.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/browser/detectVideoAlphaMode.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/textureFrom.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/utils/textureFrom.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/assets/cache/Cache.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/assets/cache/Cache.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/GraphicsContextSystem.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/GraphicsContextSystem.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/batcher/gpu/BatchGeometry.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/batcher/gpu/BatchGeometry.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/buffer/Buffer.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/buffer/Buffer.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/buffer/const.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/buffer/const.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/geometry/Geometry.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/geometry/Geometry.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/ensureIsBuffer.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/ensureIsBuffer.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getGeometryBounds.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/getGeometryBounds.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/batcher/gpu/getTextureBatchBindGroup.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/batcher/gpu/getTextureBatchBindGroup.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gpu/shader/BindGroup.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gpu/shader/BindGroup.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/batcher/shared/const.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/batcher/shared/const.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/batcher/shared/Batcher.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/batcher/shared/Batcher.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/data/ViewableBuffer.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/data/ViewableBuffer.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/buffer/utils/fastCopy.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/buffer/utils/fastCopy.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/state/getAdjustedBlendModeBlend.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/state/const.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/state/const.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/batcher/shared/BatchTextureArray.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/batcher/shared/BatchTextureArray.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/utils/buildContextBatches.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/utils/buildContextBatches.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/buildUvs.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/buildUvs.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/transformVertices.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/transformVertices.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/BatchableGraphics.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/BatchableGraphics.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/utils/mixColors.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/utils/mixColors.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/utils/mixHexColors.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/utils/mixHexColors.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildCircle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildCircle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildLine.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildLine.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/const.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/const.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/utils/getOrientationOfPoints.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/utils/getOrientationOfPoints.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildPolygon.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildPolygon.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/utils/triangulateWithHoles.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/utils/triangulateWithHoles.ts","node_modules/.pnpm/earcut@2.2.4/node_modules/earcut/src/earcut.js","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildRectangle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildRectangle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildTriangle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildTriangle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/state/State.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/mesh/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/mesh/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/shader/UniformGroup.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/shader/UniformGroup.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/utils/createIdFromString.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/utils/createIdFromString.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/getDefaultUniformValue.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/getDefaultUniformValue.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/CanvasPool.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/CanvasPool.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/texture/TexturePool.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/texture/TexturePool.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/canvas/CanvasTextMetrics.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/canvas/CanvasTextMetrics.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/canvas/utils/fontStringFromTextStyle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/canvas/utils/fontStringFromTextStyle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/canvas/utils/getCanvasFillStyle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/canvas/utils/getCanvasFillStyle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/fill/FillGradient.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/fill/FillGradient.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/fill/FillPattern.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/fill/FillPattern.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/asset/loadBitmapFont.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/asset/loadBitmapFont.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/BitmapFont.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/BitmapFont.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/AbstractBitmapFont.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/AbstractBitmapFont.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/BitmapFontManager.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/BitmapFontManager.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/TextStyle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/TextStyle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/GraphicsContext.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/GraphicsContext.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/path/GraphicsPath.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/path/GraphicsPath.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/svg/SVGToGraphicsPath.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/svg/SVGToGraphicsPath.ts","node_modules/.pnpm/parse-svg-path@0.1.2/node_modules/parse-svg-path/index.js","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/path/ShapePath.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/path/ShapePath.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/shapes/Circle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/shapes/Circle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/shapes/Ellipse.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/shapes/Ellipse.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/shapes/Polygon.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/shapes/Polygon.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/misc/squaredDistanceToLineSegment.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/misc/squaredDistanceToLineSegment.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/maths/shapes/RoundedRectangle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/maths/shapes/RoundedRectangle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildAdaptiveBezier.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildAdaptiveBezier.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildAdaptiveQuadratic.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildAdaptiveQuadratic.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArc.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildArc.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArcTo.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildArcTo.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArcToSvg.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildArcToSvg.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/path/roundShape.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/path/roundShape.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/svg/SVGParser.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/svg/SVGParser.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/utils/convertFillInputToFillStyle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/utils/convertFillInputToFillStyle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/utils/generateTextStyleKey.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/utils/generateTextStyleKey.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/DynamicBitmapFont.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/DynamicBitmapFont.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/utils/resolveCharacters.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/utils/resolveCharacters.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/utils/getBitmapTextLayout.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/utils/getBitmapTextLayout.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontTextParser.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/asset/bitmapFontTextParser.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontXMLStringParser.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/asset/bitmapFontXMLStringParser.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontXMLParser.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/asset/bitmapFontXMLParser.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/graphics/shared/Graphics.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/graphics/shared/Graphics.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/compileHighShaderToProgram.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/compileHighShaderToProgram.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gl/shader/GlProgram.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getMaxFragmentPrecision.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/getMaxFragmentPrecision.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getTestContext.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/getTestContext.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/addProgramDefines.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/addProgramDefines.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/ensurePrecision.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/ensurePrecision.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/insertVersion.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/insertVersion.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/setProgramName.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/setProgramName.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/stripVersion.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/stripVersion.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gpu/shader/GpuProgram.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractAttributesFromGpuProgram.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/extractAttributesFromGpuProgram.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractStructAndGroups.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/extractStructAndGroups.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateGpuLayoutGroups.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/generateGpuLayoutGroups.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/shader/const.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/shader/const.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateLayoutHash.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/generateLayoutHash.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/removeStructAndGroupDuplicates.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/removeStructAndGroupDuplicates.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/compiler/compileHighShader.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/compiler/compileHighShader.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/addBits.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/addBits.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileHooks.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/compileHooks.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileInputs.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/compileInputs.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileOutputs.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/compileOutputs.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/injectBits.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/injectBits.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/defaultProgramTemplate.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/defaultProgramTemplate.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/shader-bits/globalUniformsBit.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/shader-bits/globalUniformsBit.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/shader-bits/colorBit.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/shader-bits/colorBit.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/shader-bits/generateTextureBatchBit.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/shader-bits/generateTextureBatchBit.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/shader-bits/roundPixelsBit.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/shader-bits/roundPixelsBit.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/gl/shader/batchSamplersUniformGroup.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/gl/shader/batchSamplersUniformGroup.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/shared/shader/Shader.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/shared/shader/Shader.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/renderers/types.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/renderers/types.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/utils/browser/isSafari.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/utils/browser/isSafari.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/HtmlTextStyle.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/HtmlTextStyle.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-tiling/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/filters/init.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/filters/init.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/filters/FilterPipe.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/filters/FilterPipe.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/filters/FilterSystem.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/filters/FilterSystem.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/bounds/getFastGlobalBounds.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/bounds/getFastGlobalBounds.ts","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","node_modules/.pnpm/pixi.js@8.0.5/node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"62773d8990bfdf54\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n    } catch (err) {\n      if (err.message) {\n        console.error(err.message);\n      }\n      ws = {};\n    }\n  }\n\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  if (ws instanceof WebSocket) {\n    ws.onerror = function (e) {\n      if (e.message) {\n        console.error(e.message);\n      }\n    };\n    ws.onclose = function () {\n      console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}",null,"/**\n * `extensions` is a global object that holds all the extensions registered with PixiJS.\n * PixiJS uses a this extensions architecture a lot to make the library more modular and\n * flexible.\n *\n * For example, if you want to add load a new type of asset, you can register a new\n * {@link assets.LoaderParser} with the `extensions` object.\n *\n * ```js\n * import { extensions, ExtensionType } from 'pixi.js';\n *\n * // create a custom asset loader\n * const customAssetLoader = {\n *    extension: {\n *        type: ExtensionType.LoadParser,\n *        name: 'custom-asset-loader',\n *    },\n *    test(url) {\n *       // check if this new loader should be used...\n *    },\n *    load(url) {\n *        // load the asset...\n *    },\n * };\n *\n * // add the custom asset loader to pixi\n * extensions.add(customAssetLoader);\n * ```\n *\n * This would add the `customAssetLoader` to the list of available loaders that PixiJS can use.\n *\n * There are many different types of extensions, which are listed in {@link extensions.ExtensionType}.\n * @namespace extensions\n */\n\n/**\n * Collection of valid extension types.\n * @memberof extensions\n */\nenum ExtensionType\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /** extensions that are registered as Application plugins */\n    Application = 'application',\n\n    /** extensions that are registered as WebGL render pipes */\n    WebGLPipes = 'webgl-pipes',\n    /** extensions that are registered as WebGL render pipes adaptors */\n    WebGLPipesAdaptor = 'webgl-pipes-adaptor',\n    /** extensions that are registered as WebGL render systems */\n    WebGLSystem = 'webgl-system',\n\n    /** extensions that are registered as WebGPU render pipes */\n    WebGPUPipes = 'webgpu-pipes',\n    /** extensions that are registered as WebGPU render pipes adaptors */\n    WebGPUPipesAdaptor = 'webgpu-pipes-adaptor',\n    /** extensions that are registered as WebGPU render systems */\n    WebGPUSystem = 'webgpu-system',\n\n    /** extensions that are registered as Canvas render pipes */\n    CanvasSystem = 'canvas-system',\n    /** extensions that are registered as Canvas render pipes adaptors */\n    CanvasPipesAdaptor = 'canvas-pipes-adaptor',\n    /** extensions that are registered as Canvas render systems */\n    CanvasPipes = 'canvas-pipes',\n\n    /** extensions that combine the other Asset extensions */\n    Asset = 'asset',\n    /** extensions that are used to load assets through Assets */\n    LoadParser = 'load-parser',\n    /** extensions that are used to resolve asset urls through Assets */\n    ResolveParser = 'resolve-parser',\n    /** extensions that are used to handle how urls are cached by Assets */\n    CacheParser = 'cache-parser',\n    /** extensions that are used to add/remove available resources from Assets */\n    DetectionParser = 'detection-parser',\n\n    /** extensions that are registered with the MaskEffectManager */\n    MaskEffect = 'mask-effect',\n\n    /** A type of extension for creating a new advanced blend mode */\n    BlendMode = 'blend-mode',\n\n    /** A type of extension that will be used to auto detect a resource type */\n    TextureSource = 'texture-source',\n\n    /** A type of extension that will be used to auto detect an environment */\n    Environment = 'environment',\n}\n\n/**\n * The metadata for an extension.\n * @memberof extensions\n * @ignore\n */\ninterface ExtensionMetadataDetails\n{\n    /** The extension type, can be multiple types */\n    type: ExtensionType | ExtensionType[];\n    /** Optional. Some plugins provide an API name/property, to make them more easily accessible */\n    name?: string;\n    /** Optional, used for sorting the plugins in a particular order */\n    priority?: number;\n}\n\n/**\n * The metadata for an extension.\n * @memberof extensions\n */\ntype ExtensionMetadata = ExtensionType | ExtensionMetadataDetails;\n\n/**\n * Format when registering an extension. Generally, the extension\n * should have these values as `extension` static property,\n * but you can override name or type by providing an object.\n * @memberof extensions\n */\ninterface ExtensionFormat\n{\n    /** The extension type, can be multiple types */\n    type: ExtensionType | ExtensionType[];\n    /** Optional. Some plugins provide an API name/property, such as Renderer plugins */\n    name?: string;\n    /** Optional, used for sorting the plugins in a particular order */\n    priority?: number;\n    /** Reference to the plugin object/class */\n    ref: any;\n}\n\n/**\n * Extension format that is used internally for registrations.\n * @memberof extensions\n * @ignore\n */\ninterface StrictExtensionFormat extends ExtensionFormat\n{\n    /** The extension type, always expressed as multiple, even if a single */\n    type: ExtensionType[];\n}\n\ntype ExtensionHandler = (extension: StrictExtensionFormat) => void;\n\n/**\n * Convert input into extension format data.\n * @ignore\n */\nconst normalizeExtension = (ext: ExtensionFormat | any): StrictExtensionFormat =>\n{\n    // Class/Object submission, use extension object\n    if (typeof ext === 'function' || (typeof ext === 'object' && ext.extension))\n    {\n        // #if _DEBUG\n        if (!ext.extension)\n        {\n            throw new Error('Extension class must have an extension object');\n        }\n        // #endif\n        const metadata: ExtensionMetadataDetails = (typeof ext.extension !== 'object')\n            ? { type: ext.extension }\n            : ext.extension;\n\n        ext = { ...metadata, ref: ext };\n    }\n    if (typeof ext === 'object')\n    {\n        ext = { ...ext };\n    }\n    else\n    {\n        throw new Error('Invalid extension type');\n    }\n\n    if (typeof ext.type === 'string')\n    {\n        ext.type = [ext.type];\n    }\n\n    return ext;\n};\n\n/**\n * Get the priority for an extension.\n * @ignore\n * @param ext - Any extension\n * @param defaultPriority - Fallback priority if none is defined.\n * @returns The priority for the extension.\n * @memberof extensions\n */\nexport const normalizeExtensionPriority = (ext: ExtensionFormat | any, defaultPriority: number): number =>\n    normalizeExtension(ext).priority ?? defaultPriority;\n\n/**\n * Global registration of all PixiJS extensions. One-stop-shop for extensibility.\n *\n * Import the `extensions` object and use it to register new functionality via the described methods below.\n * ```js\n * import { extensions } from 'pixi.js';\n *\n * // register a new extension\n * extensions.add(myExtension);\n * ```\n * @property {Function} remove - Remove extensions from PixiJS.\n * @property {Function} add - Register new extensions with PixiJS.\n * @property {Function} handle - Internal method to handle extensions by name.\n * @property {Function} handleByMap - Handle a type, but using a map by `name` property.\n * @property {Function} handleByNamedList - Handle a type, but using a list of extensions with a `name` property.\n * @property {Function} handleByList - Handle a type, but using a list of extensions.\n * @memberof extensions\n */\nconst extensions = {\n\n    /** @ignore */\n    _addHandlers: {} as Partial<Record<ExtensionType, ExtensionHandler>>,\n\n    /** @ignore */\n    _removeHandlers: {} as Partial<Record<ExtensionType, ExtensionHandler>>,\n\n    /** @ignore */\n    _queue: {} as Partial<Record<ExtensionType, StrictExtensionFormat[]>>,\n\n    /**\n     * Remove extensions from PixiJS.\n     * @param extensions - Extensions to be removed.\n     * @returns {extensions} For chaining.\n     */\n    remove(...extensions: Array<ExtensionFormat | any>)\n    {\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) => this._removeHandlers[type]?.(ext));\n        });\n\n        return this;\n    },\n\n    /**\n     * Register new extensions with PixiJS.\n     * @param extensions - The spread of extensions to add to PixiJS.\n     * @returns {extensions} For chaining.\n     */\n    add(...extensions: Array<ExtensionFormat | any>)\n    {\n        // Handle any extensions either passed as class w/ data or as data\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) =>\n            {\n                const handlers = this._addHandlers;\n                const queue = this._queue;\n\n                if (!handlers[type])\n                {\n                    queue[type] = queue[type] || [];\n                    queue[type]?.push(ext);\n                }\n                else\n                {\n                    handlers[type]?.(ext);\n                }\n            });\n        });\n\n        return this;\n    },\n\n    /**\n     * Internal method to handle extensions by name.\n     * @param type - The extension type.\n     * @param onAdd  - Function handler when extensions are added/registered {@link StrictExtensionFormat}.\n     * @param onRemove  - Function handler when extensions are removed/unregistered {@link StrictExtensionFormat}.\n     * @returns {extensions} For chaining.\n     */\n    handle(type: ExtensionType, onAdd: ExtensionHandler, onRemove: ExtensionHandler)\n    {\n        const addHandlers = this._addHandlers;\n        const removeHandlers = this._removeHandlers;\n\n        // #if _DEBUG\n        if (addHandlers[type] || removeHandlers[type])\n        {\n            throw new Error(`Extension type ${type} already has a handler`);\n        }\n        // #endif\n\n        addHandlers[type] = onAdd;\n        removeHandlers[type] = onRemove;\n\n        // Process the queue\n        const queue = this._queue;\n\n        // Process any plugins that have been registered before the handler\n        if (queue[type])\n        {\n            queue[type]?.forEach((ext) => onAdd(ext));\n            delete queue[type];\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle a type, but using a map by `name` property.\n     * @param type - Type of extension to handle.\n     * @param map - The object map of named extensions.\n     * @returns {extensions} For chaining.\n     */\n    handleByMap(type: ExtensionType, map: Record<string, any>)\n    {\n        return this.handle(type,\n            (extension) =>\n            {\n                if (extension.name)\n                {\n                    map[extension.name] = extension.ref;\n                }\n            },\n            (extension) =>\n            {\n                if (extension.name)\n                {\n                    delete map[extension.name];\n                }\n            }\n        );\n    },\n\n    /**\n     * Handle a type, but using a list of extensions with a `name` property.\n     * @param type - Type of extension to handle.\n     * @param map - The array of named extensions.\n     * @param defaultPriority - Fallback priority if none is defined.\n     * @returns {extensions} For chaining.\n     */\n    handleByNamedList(type: ExtensionType, map: {name: string, value: any}[], defaultPriority = -1)\n    {\n        return this.handle(\n            type,\n            (extension) =>\n            {\n                const index = map.findIndex((item) => item.name === extension.name);\n\n                if (index >= 0) return;\n\n                map.push({ name: extension.name, value: extension.ref });\n                map.sort((a, b) =>\n                    normalizeExtensionPriority(b.value, defaultPriority)\n                    - normalizeExtensionPriority(a.value, defaultPriority));\n            },\n            (extension) =>\n            {\n                const index = map.findIndex((item) => item.name === extension.name);\n\n                if (index !== -1)\n                {\n                    map.splice(index, 1);\n                }\n            }\n        );\n    },\n\n    /**\n     * Handle a type, but using a list of extensions.\n     * @param type - Type of extension to handle.\n     * @param list - The list of extensions.\n     * @param defaultPriority - The default priority to use if none is specified.\n     * @returns {extensions} For chaining.\n     */\n    handleByList(type: ExtensionType, list: any[], defaultPriority = -1)\n    {\n        return this.handle(\n            type,\n            (extension) =>\n            {\n                if (list.includes(extension.ref))\n                {\n                    return;\n                }\n\n                list.push(extension.ref);\n                list.sort((a, b) =>\n                    normalizeExtensionPriority(b, defaultPriority) - normalizeExtensionPriority(a, defaultPriority));\n            },\n            (extension) =>\n            {\n                const index = list.indexOf(extension.ref);\n\n                if (index !== -1)\n                {\n                    list.splice(index, 1);\n                }\n            }\n        );\n    },\n};\n\nexport {\n    extensions,\n    ExtensionType,\n};\nexport type {\n    StrictExtensionFormat as ExtensionFormat,\n    ExtensionFormat as ExtensionFormatLoose,\n    ExtensionHandler,\n    ExtensionMetadata,\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n",null,"import EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../color/Color';\nimport { cullingMixin } from '../../culling/cullingMixin';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { DEG_TO_RAD, RAD_TO_DEG } from '../../maths/misc/const';\nimport { ObservablePoint } from '../../maths/point/ObservablePoint';\nimport { uid } from '../../utils/data/uid';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { childrenHelperMixin } from './container-mixins/childrenHelperMixin';\nimport { effectsMixin } from './container-mixins/effectsMixin';\nimport { findMixin } from './container-mixins/findMixin';\nimport { measureMixin } from './container-mixins/measureMixin';\nimport { onRenderMixin } from './container-mixins/onRenderMixin';\nimport { sortMixin } from './container-mixins/sortMixin';\nimport { toLocalGlobalMixin } from './container-mixins/toLocalGlobalMixin';\nimport { RenderGroup } from './RenderGroup';\nimport { assignWithIgnore } from './utils/assignWithIgnore';\n\nimport type { Size } from '../../maths/misc/Size';\nimport type { PointData } from '../../maths/point/PointData';\nimport type { Rectangle } from '../../maths/shapes/Rectangle';\nimport type { BLEND_MODES } from '../../rendering/renderers/shared/state/const';\nimport type { Dict } from '../../utils/types';\nimport type { Optional } from './container-mixins/measureMixin';\nimport type { DestroyOptions } from './destroyTypes';\n\n/**\n * This is where you'll find all the display objects available in Pixi.\n *\n * All display objects inherit from the {@link scene.Container} class. You can use a `Container` for simple grouping of\n * other display objects. Here's all the available display object classes.\n *\n * - {@link scene.Container} is the base class for all display objects that act as a container for other objects.\n *   - {@link scene.Sprite} is a display object that uses a texture\n *      - {@link scene.AnimatedSprite} is a sprite that can play animations\n *   - {@link scene.TilingSprite} a fast way of rendering a tiling image\n *   - {@link scene.NineSliceSprite} allows you to stretch a texture using 9-slice scaling\n *   - {@link scene.Graphics} is a graphic object that can be drawn to the screen.\n *   - {@link scene.Mesh} empowers you to have maximum flexibility to render any kind of visuals you can think of\n *      - {@link scene.MeshSimple} mimics Mesh, providing easy-to-use constructor arguments\n *      - {@link scene.MeshPlane} allows you to draw a texture across several points and then manipulate these points\n *      - {@link scene.MeshRope} allows you to draw a texture across several points and then manipulate these points\n *   - {@link scene.Text} render text using custom fonts\n *      - {@link scene.BitmapText} render text using a bitmap font\n *      - {@link scene.HTMLText} render text using HTML and CSS\n * @namespace scene\n */\n\n// as pivot and skew are the least used properties of a container, we can use this optimisation\n// to avoid allocating lots of unnecessary objects for them.\nconst defaultSkew = new ObservablePoint(null);\nconst defaultPivot = new ObservablePoint(null);\nconst defaultScale = new ObservablePoint(null, 1, 1);\n\nexport interface ContainerEvents extends PixiMixins.ContainerEvents\n{\n    added: [container: Container];\n    childAdded: [child: Container, container: Container, index: number];\n    removed: [container: Container];\n    childRemoved: [child: Container, container: Container, index: number];\n    destroyed: [container: Container];\n}\n\ntype AnyEvent = {\n    // The following is a hack to allow any custom event while maintaining type safety.\n    // For some reason, the tsc compiler gets angry about error TS1023\n    // \"An index signature parameter type must be either 'string' or 'number'.\"\n    // This is really odd since ({}&string) should interpret as string, but then again\n    // there is some black magic behind why this works in the first place.\n    // Closest thing to an explanation:\n    // https://stackoverflow.com/questions/70144348/why-does-a-union-of-type-literals-and-string-cause-ide-code-completion-wh\n    //\n    // Side note, we disable @typescript-eslint/ban-types since {}&string is the only syntax that works.\n    // Nor of the Record/unknown/never alternatives work.\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    [K: ({} & string) | ({} & symbol)]: any;\n};\n\nexport const UPDATE_COLOR = 0b0001;\nexport const UPDATE_BLEND = 0b0010;\nexport const UPDATE_VISIBLE = 0b0100;\nexport const UPDATE_TRANSFORM = 0b1000;\n\nexport interface UpdateTransformOptions\n{\n    x: number;\n    y: number;\n    scaleX: number;\n    scaleY: number;\n    rotation: number;\n    skewX: number;\n    skewY: number;\n    pivotX: number;\n    pivotY: number;\n}\n\n/**\n * Constructor options used for `Container` instances.\n * ```js\n * const container = new Container({\n *    position: new Point(100, 200),\n *    scale: new Point(2, 2),\n *    rotation: Math.PI / 2,\n * });\n * ```\n * @memberof scene\n * @see scene.Container\n */\nexport interface ContainerOptions extends PixiMixins.ContainerOptions\n{\n    /** @see scene.Container#isRenderGroup */\n    isRenderGroup?: boolean;\n\n    /** @see scene.Container#blendMode */\n    blendMode?: BLEND_MODES;\n    /** @see scene.Container#tint */\n    tint?: ColorSource;\n\n    /** @see scene.Container#alpha */\n    alpha?: number;\n    /** @see scene.Container#angle */\n    angle?: number;\n    /** @see scene.Container#children */\n    children?: Container[];\n    /** @see scene.Container#parent */\n    parent?: Container;\n    /** @see scene.Container#renderable */\n    renderable?: boolean;\n    /** @see scene.Container#rotation */\n    rotation?: number;\n    /** @see scene.Container#scale */\n    scale?: PointData | number;\n    /** @see scene.Container#pivot */\n    pivot?: PointData | number;\n    /** @see scene.Container#position */\n    position?: PointData;\n    /** @see scene.Container#skew */\n    skew?: PointData;\n    /** @see scene.Container#visible */\n    visible?: boolean;\n    /** @see scene.Container#culled */\n    culled?: boolean;\n    /** @see scene.Container#x */\n    x?: number;\n    /** @see scene.Container#y */\n    y?: number;\n    /** @see scene.Container#boundArea */\n    boundsArea?: Rectangle;\n}\n\nexport interface Container\n    extends Omit<PixiMixins.Container, keyof EventEmitter<ContainerEvents & AnyEvent>>,\n    EventEmitter<ContainerEvents & AnyEvent> { }\n\n/**\n * Container is a general-purpose display object that holds children. It also adds built-in support for advanced\n * rendering features like masking and filtering.\n *\n * It is the base class of all display objects that act as a container for other objects, including Graphics\n * and Sprite.\n *\n * <details id=\"transforms\">\n *\n * <summary>Transforms</summary>\n *\n * The [transform]{@link scene.Container#transform} of a display object describes the projection from its\n * local coordinate space to its parent's local coordinate space. The following properties are derived\n * from the transform:\n *\n * <table>\n *   <thead>\n *     <tr>\n *       <th>Property</th>\n *       <th>Description</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>[pivot]{@link scene.Container#pivot}</td>\n *       <td>\n *         Invariant under rotation, scaling, and skewing. The projection of into the parent's space of the pivot\n *         is equal to position, regardless of the other three transformations. In other words, It is the center of\n *         rotation, scaling, and skewing.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[position]{@link scene.Container#position}</td>\n *       <td>\n *         Translation. This is the position of the [pivot]{@link scene.Container#pivot} in the parent's local\n *         space. The default value of the pivot is the origin (0,0). If the top-left corner of your display object\n *         is (0,0) in its local space, then the position will be its top-left corner in the parent's local space.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[scale]{@link scene.Container#scale}</td>\n *       <td>\n *         Scaling. This will stretch (or compress) the display object's projection. The scale factors are along the\n *         local coordinate axes. In other words, the display object is scaled before rotated or skewed. The center\n *         of scaling is the [pivot]{@link scene.Container#pivot}.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[rotation]{@link scene.Container#rotation}</td>\n *       <td>\n *          Rotation. This will rotate the display object's projection by this angle (in radians).\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[skew]{@link scene.Container#skew}</td>\n *       <td>\n *         <p>Skewing. This can be used to deform a rectangular display object into a parallelogram.</p>\n *         <p>\n *         In PixiJS, skew has a slightly different behaviour than the conventional meaning. It can be\n *         thought of the net rotation applied to the coordinate axes (separately). For example, if \"skew.x\" is\n *         ⍺ and \"skew.y\" is β, then the line x = 0 will be rotated by ⍺ (y = -x*cot⍺) and the line y = 0 will be\n *         rotated by β (y = x*tanβ). A line y = x*tanϴ (i.e. a line at angle ϴ to the x-axis in local-space) will\n *         be rotated by an angle between ⍺ and β.\n *         </p>\n *         <p>\n *         It can be observed that if skew is applied equally to both axes, then it will be equivalent to applying\n *         a rotation. Indeed, if \"skew.x\" = -ϴ and \"skew.y\" = ϴ, it will produce an equivalent of \"rotation\" = ϴ.\n *         </p>\n *         <p>\n *         Another quite interesting observation is that \"skew.x\", \"skew.y\", rotation are commutative operations. Indeed,\n *         because rotation is essentially a careful combination of the two.\n *         </p>\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[angle]{@link scene.Container#angle}</td>\n *       <td>Rotation. This is an alias for [rotation]{@link scene.Container#rotation}, but in degrees.</td>\n *     </tr>\n *     <tr>\n *       <td>[x]{@link scene.Container#x}</td>\n *       <td>Translation. This is an alias for position.x!</td>\n *     </tr>\n *     <tr>\n *       <td>[y]{@link scene.Container#y}</td>\n *       <td>Translation. This is an alias for position.y!</td>\n *     </tr>\n *     <tr>\n *       <td>[width]{@link scene.Container#width}</td>\n *       <td>\n *         Implemented in [Container]{@link scene.Container}. Scaling. The width property calculates scale.x by dividing\n *         the \"requested\" width by the local bounding box width. It is indirectly an abstraction over scale.x, and there\n *         is no concept of user-defined width.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[height]{@link scene.Container#height}</td>\n *       <td>\n *         Implemented in [Container]{@link scene.Container}. Scaling. The height property calculates scale.y by dividing\n *         the \"requested\" height by the local bounding box height. It is indirectly an abstraction over scale.y, and there\n *         is no concept of user-defined height.\n *       </td>\n *     </tr>\n *   </tbody>\n * </table>\n * </details>\n *\n * <details id=\"alpha\">\n * <summary>Alpha</summary>\n *\n * This alpha sets a display object's **relative opacity** w.r.t its parent. For example, if the alpha of a display\n * object is 0.5 and its parent's alpha is 0.5, then it will be rendered with 25% opacity (assuming alpha is not\n * applied on any ancestor further up the chain).\n * </details>\n *\n * <details id=\"visible\">\n * <summary>Renderable vs Visible</summary>\n *\n * The `renderable` and `visible` properties can be used to prevent a display object from being rendered to the\n * screen. However, there is a subtle difference between the two. When using `renderable`, the transforms  of the display\n * object (and its children subtree) will continue to be calculated. When using `visible`, the transforms will not\n * be calculated.\n * ```ts\n * import { BlurFilter, Container, Graphics, Sprite } from 'pixi.js';\n *\n * const container = new Container();\n * const sprite = Sprite.from('https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png');\n *\n * sprite.width = 512;\n * sprite.height = 512;\n *\n * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container\n * // is rendered.\n * container.addChild(sprite);\n *\n * // Blurs whatever is rendered by the container\n * container.filters = [new BlurFilter()];\n *\n * // Only the contents within a circle at the center should be rendered onto the screen.\n * container.mask = new Graphics()\n *     .beginFill(0xffffff)\n *     .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)\n *     .endFill();\n * ```\n *\n * </details>\n *\n * <details id=\"renderGroup\">\n * <summary>RenderGroup</summary>\n *\n * In PixiJS v8, containers can be set to operate in 'render group mode',\n * transforming them into entities akin to a stage in traditional rendering paradigms.\n * A render group is a root renderable entity, similar to a container,\n * but it's rendered in a separate pass with its own unique set of rendering instructions.\n * This approach enhances rendering efficiency and organization, particularly in complex scenes.\n *\n * You can enable render group mode on any container using container.enableRenderGroup()\n * or by initializing a new container with the render group property set to true (new Container({isRenderGroup: true})).\n *  The method you choose depends on your specific use case and setup requirements.\n *\n * An important aspect of PixiJS’s rendering process is the automatic treatment of rendered scenes as render groups.\n * This conversion streamlines the rendering process, but understanding when and how this happens is crucial\n * to fully leverage its benefits.\n *\n * One of the key advantages of using render groups is the performance efficiency in moving them. Since transformations\n *  are applied at the GPU level, moving a render group, even one with complex and numerous children,\n * doesn't require recalculating the rendering instructions or performing transformations on each child.\n * This makes operations like panning a large game world incredibly efficient.\n *\n * However, it's crucial to note that render groups do not batch together.\n * This means that turning every container into a render group could actually slow things down,\n * as each render group is processed separately. It's best to use render groups judiciously, at a broader level,\n * rather than on a per-child basis.\n * This approach ensures you get the performance benefits without overburdening the rendering process.\n *\n * RenderGroups maintain their own set of rendering instructions,\n * ensuring that changes or updates within a render group don't affect the rendering\n * instructions of its parent or other render groups.\n *  This isolation ensures more stable and predictable rendering behavior.\n *\n * Additionally, renderGroups can be nested, allowing for powerful options in organizing different aspects of your scene.\n * This feature is particularly beneficial for separating complex game graphics from UI elements,\n * enabling intricate and efficient scene management in complex applications.\n *\n * This means that Containers have 3 levels of matrix to be mindful of:\n *\n * 1. localTransform, this is the transform of the container based on its own properties\n * 2. groupTransform, this it the transform of the container relative to the renderGroup it belongs too\n * 3. worldTransform, this is the transform of the container relative to the Scene being rendered\n * </details>\n * @memberof scene\n */\nexport class Container extends EventEmitter<ContainerEvents & AnyEvent>\n{\n    /**\n     * Mixes all enumerable properties and methods from a source object to Container.\n     * @param source - The source of properties and methods to mix in.\n     */\n    public static mixin(source: Dict<any>): void\n    {\n        Object.defineProperties(Container.prototype, Object.getOwnPropertyDescriptors(source));\n    }\n\n    /** @private */\n    public uid: number = uid('renderable');\n\n    /** @private */\n    public _updateFlags = 0b1111;\n\n    // is this container the root of a renderGroup?\n    // TODO implement this in a few more places\n    /** @private */\n    public isRenderGroupRoot = false;\n    // the render group this container belongs to OR owns\n    /** @private */\n    public renderGroup: RenderGroup = null;\n\n    // set to true if the container has changed. It is reset once the changes have been applied\n    // by the transform system\n    // its here to stop ensure that when things change, only one update gets registers with the transform system\n    /** @private */\n    public didChange = false;\n    // same as above, but for the renderable\n    /** @private */\n    public didViewUpdate = false;\n    // how deep is the container relative to its render group..\n    // unless the element is the root render group - it will be relative to its parent\n    /** @private */\n    public relativeRenderGroupDepth = 0;\n\n    /**\n     * The array of children of this container.\n     * @readonly\n     */\n    public children: Container[] = [];\n    /** The display object container that contains this display object. */\n    public parent: Container = null;\n\n    // used internally for changing up the render order.. mainly for masks and filters\n    // TODO setting this should cause a rebuild??\n    /** @private */\n    public includeInBuild = true;\n    /** @private */\n    public measurable = true;\n    /** @private */\n    public isSimple = true;\n\n    // / /////////////Transform related props//////////////\n\n    // used by the transform system to check if a container needs to be updated that frame\n    // if the tick matches the current transform system tick, it is not updated again\n    /**\n     * @internal\n     * @ignore\n     */\n    public updateTick = -1;\n\n    /**\n     * Current transform of the object based on local factors: position, scale, other stuff.\n     * @readonly\n     */\n    public localTransform: Matrix = new Matrix();\n    /**\n     * The relative group transform is a transform relative to the render group it belongs too. It will include all parent\n     * transforms and up to the render group (think of it as kind of like a stage - but the stage can be nested).\n     * If this container is is self a render group matrix will be relative to its parent render group\n     * @readonly\n     */\n    public relativeGroupTransform: Matrix = new Matrix();\n    /**\n     * The group transform is a transform relative to the render group it belongs too.\n     * If this container is render group then this will be an identity matrix. other wise it\n     * will be the same as the relativeGroupTransform.\n     * Use this value when actually rendering things to the screen\n     * @readonly\n     */\n    public groupTransform: Matrix = this.relativeGroupTransform;\n\n    // the global transform taking into account the render group and all parents\n    private _worldTransform: Matrix;\n\n    /** If the object has been destroyed via destroy(). If true, it should not be used. */\n    public destroyed = false;\n\n    // transform data..\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @internal\n     * @ignore\n     */\n    public _position: ObservablePoint = new ObservablePoint(this, 0, 0);\n\n    /**\n     * The scale factor of the object.\n     * @internal\n     * @ignore\n     */\n    public _scale: ObservablePoint = defaultScale;\n\n    /**\n     * The pivot point of the container that it rotates around.\n     * @internal\n     * @ignore\n     */\n    public _pivot: ObservablePoint = defaultPivot;\n\n    /**\n     * The skew amount, on the x and y axis.\n     * @internal\n     * @ignore\n     */\n    public _skew: ObservablePoint = defaultSkew;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    public _cx = 1;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    public _sx = 0;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    public _cy = 0;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    public _sy = 1;\n\n    /**\n     * The rotation amount.\n     * @internal\n     * @ignore\n     */\n    private _rotation = 0;\n\n    // / COLOR related props //////////////\n\n    // color stored as ABGR\n    public localColor = 0xFFFFFF;\n    public localAlpha = 1;\n\n    public groupAlpha = 1; // A\n    public groupColor = 0xFFFFFF; // BGR\n    public groupColorAlpha = 0xFFFFFFFF; // ABGR\n\n    // / BLEND related props //////////////\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public localBlendMode: BLEND_MODES = 'inherit';\n    /**\n     * @internal\n     * @ignore\n     */\n    public groupBlendMode: BLEND_MODES = 'normal';\n\n    // / VISIBILITY related props //////////////\n\n    // visibility\n    // 0b11\n    // first bit is visible, second bit is renderable\n    /**\n     * This property holds three bits: culled, visible, renderable\n     * the third bit represents culling (0 = culled, 1 = not culled) 0b100\n     * the second bit represents visibility (0 = not visible, 1 = visible) 0b010\n     * the first bit represents renderable (0 = renderable, 1 = not renderable) 0b001\n     * @internal\n     * @ignore\n     */\n    public localDisplayStatus = 0b111; // 0b11 | 0b10 | 0b01 | 0b00\n    /**\n     * @internal\n     * @ignore\n     */\n    public globalDisplayStatus = 0b111; // 0b11 | 0b10 | 0b01 | 0b00\n\n    public renderPipeId: string;\n\n    /**\n     * An optional bounds area for this container. Setting this rectangle will stop the renderer\n     * from recursively measuring the bounds of each children and instead use this single boundArea.\n     * This is great for optimisation! If for example you have a 1000 spinning particles and you know they all sit\n     * within a specific bounds, then setting it will mean the renderer will not need to measure the\n     * 1000 children to find the bounds. Instead it will just use the bounds you set.\n     */\n    public boundsArea: Rectangle;\n\n    /**\n     * A value that increments each time the container is modified\n     * the first 12 bits represent the container changes (eg transform, alpha, visible etc)\n     * the second 12 bits represent the view changes (eg texture swap, geometry change etc)\n     *\n     *  view          container\n     * [000000000000][00000000000]\n     * @ignore\n     */\n    public _didChangeId = 0;\n    /**\n     * property that tracks if the container transform has changed\n     * @ignore\n     */\n    private _didLocalTransformChangeId = -1;\n\n    constructor(options: ContainerOptions = {})\n    {\n        super();\n\n        assignWithIgnore(this, options, {\n            children: true,\n            parent: true,\n            effects: true,\n        });\n\n        options.children?.forEach((child) => this.addChild(child));\n        this.effects = [];\n        options.parent?.addChild(this);\n    }\n\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     * @param {...Container} children - The Container(s) to add to the container\n     * @returns {Container} - The first child that was added.\n     */\n    public addChild<U extends Container[]>(...children: U): U[0]\n    {\n        // #if _DEBUG\n        if (!this.allowChildren)\n        {\n            deprecation(v8_0_0, 'addChild: Only Containers will be allowed to add children in v8.0.0');\n        }\n        // #endif\n\n        if (children.length > 1)\n        {\n            // loop through the array and add all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.addChild(children[i]);\n            }\n\n            return children[0];\n        }\n\n        const child = children[0];\n\n        if (child.parent === this)\n        {\n            this.children.splice(this.children.indexOf(child), 1);\n            this.children.push(child);\n\n            if (this.renderGroup && !this.isRenderGroupRoot)\n            {\n                this.renderGroup.structureDidChange = true;\n            }\n\n            return child;\n        }\n\n        if (child.parent)\n        {\n            // TODO Optimisation...if the parent has the same render group, this does not need to change!\n            child.parent.removeChild(child);\n        }\n\n        this.children.push(child);\n\n        if (this.sortableChildren) this.sortDirty = true;\n\n        child.parent = this;\n\n        child.didChange = true;\n        child.didViewUpdate = false;\n\n        // TODO - OPtimise this? could check what the parent has set?\n        child._updateFlags = 0b1111;\n\n        if (this.renderGroup)\n        {\n            this.renderGroup.addChild(child);\n        }\n\n        this.emit('childAdded', child, this, this.children.length - 1);\n        child.emit('added', this);\n\n        if (child._zIndex !== 0)\n        {\n            child.depthOfChildModified();\n        }\n\n        return child;\n    }\n\n    /**\n     * Removes one or more children from the container.\n     * @param {...Container} children - The Container(s) to remove\n     * @returns {Container} The first child that was removed.\n     */\n    public removeChild<U extends Container[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the arguments property and remove all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n\n            return children[0];\n        }\n\n        const child = children[0];\n\n        const index = this.children.indexOf(child);\n\n        if (index > -1)\n        {\n            this.children.splice(index, 1);\n\n            if (this.renderGroup)\n            {\n                this.renderGroup.removeChild(child);\n            }\n\n            child.parent = null;\n            this.emit('childRemoved', child, this, index);\n            child.emit('removed', this);\n        }\n\n        return child;\n    }\n\n    /** @ignore */\n    public _onUpdate(point?: ObservablePoint)\n    {\n        if (point)\n        {\n            //   this.updateFlags |= UPDATE_TRANSFORM;\n\n            if (point === this._skew)\n            {\n                this._updateSkew();\n            }\n        }\n\n        this._didChangeId++;\n\n        if (this.didChange) return;\n        this.didChange = true;\n\n        if (this.isRenderGroupRoot)\n        {\n            const renderGroupParent = this.renderGroup.renderGroupParent;\n            // lets update its parent..\n\n            if (renderGroupParent)\n            {\n                renderGroupParent.onChildUpdate(this);\n            }\n        }\n        else if (this.renderGroup)\n        {\n            this.renderGroup.onChildUpdate(this);\n        }\n    }\n\n    set isRenderGroup(value: boolean)\n    {\n        if (this.isRenderGroupRoot && value === false)\n        {\n            throw new Error('[Pixi] cannot undo a render group just yet');\n        }\n\n        if (value)\n        {\n            this.enableRenderGroup();\n        }\n    }\n\n    /**\n     * Returns true if this container is a render group.\n     * This means that it will be rendered as a separate pass, with its own set of instructions\n     */\n    get isRenderGroup(): boolean\n    {\n        return this.isRenderGroupRoot;\n    }\n\n    /** This enables the container to be rendered as a render group. */\n    public enableRenderGroup()\n    {\n        // does it OWN the render group..\n        if (this.renderGroup && this.renderGroup.root === this) return;\n\n        this.isRenderGroupRoot = true;\n\n        const parentRenderGroup = this.renderGroup;\n\n        if (parentRenderGroup)\n        {\n            parentRenderGroup.removeChild(this);\n        }\n\n        this.renderGroup = new RenderGroup(this);\n\n        // find children render groups and move them out..\n        if (parentRenderGroup)\n        {\n            for (let i = 0; i < parentRenderGroup.renderGroupChildren.length; i++)\n            {\n                const childRenderGroup = parentRenderGroup.renderGroupChildren[i];\n                let parent = childRenderGroup.root;\n\n                while (parent)\n                {\n                    if (parent === this)\n                    {\n                        this.renderGroup.addRenderGroupChild(childRenderGroup);\n\n                        break;\n                    }\n                    parent = parent.parent;\n                }\n            }\n\n            parentRenderGroup.addRenderGroupChild(this.renderGroup);\n        }\n\n        this._updateIsSimple();\n\n        // this group matrix will now forever be an identity matrix,\n        // as its own transform will be passed to the GPU\n        this.groupTransform = Matrix.IDENTITY;\n    }\n\n    /** @ignore */\n    public _updateIsSimple()\n    {\n        this.isSimple = !(this.isRenderGroupRoot) && (this.effects.length === 0);\n    }\n\n    /**\n     * Current transform of the object based on world (parent) factors.\n     * @readonly\n     */\n    get worldTransform()\n    {\n        this._worldTransform ||= new Matrix();\n\n        if (this.renderGroup)\n        {\n            if (this.isRenderGroupRoot)\n            {\n                this._worldTransform.copyFrom(this.renderGroup.worldTransform);\n            }\n            else\n            {\n                this._worldTransform.appendFrom(this.relativeGroupTransform, this.renderGroup.worldTransform);\n            }\n        }\n\n        return this._worldTransform;\n    }\n\n    // / ////// transform related stuff\n\n    /**\n     * The position of the container on the x axis relative to the local coordinates of the parent.\n     * An alias to position.x\n     */\n    get x(): number\n    {\n        return this._position.x;\n    }\n\n    set x(value: number)\n    {\n        this._position.x = value;\n    }\n\n    /**\n     * The position of the container on the y axis relative to the local coordinates of the parent.\n     * An alias to position.y\n     */\n    get y(): number\n    {\n        return this._position.y;\n    }\n\n    set y(value: number)\n    {\n        this._position.y = value;\n    }\n\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @since 4.0.0\n     */\n    get position(): ObservablePoint\n    {\n        return this._position;\n    }\n\n    set position(value: PointData)\n    {\n        this._position.copyFrom(value);\n    }\n\n    /**\n     * The rotation of the object in radians.\n     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n     */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this._onUpdate(this._skew);\n        }\n    }\n\n    /**\n     * The angle of the object in degrees.\n     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n     */\n    get angle(): number\n    {\n        return this.rotation * RAD_TO_DEG;\n    }\n\n    set angle(value: number)\n    {\n        this.rotation = value * DEG_TO_RAD;\n    }\n\n    /**\n     * The center of rotation, scaling, and skewing for this display object in its local space. The `position`\n     * is the projection of `pivot` in the parent's local space.\n     *\n     * By default, the pivot is the origin (0, 0).\n     * @since 4.0.0\n     */\n    get pivot(): ObservablePoint\n    {\n        if (this._pivot === defaultPivot)\n        {\n            this._pivot = new ObservablePoint(this, 0, 0);\n        }\n\n        return this._pivot;\n    }\n\n    set pivot(value: PointData | number)\n    {\n        if (this._pivot === defaultPivot)\n        {\n            this._pivot = new ObservablePoint(this, 0, 0);\n        }\n\n        typeof value === 'number' ? this._pivot.set(value) : this._pivot.copyFrom(value);\n    }\n\n    /**\n     * The skew factor for the object in radians.\n     * @since 4.0.0\n     */\n    get skew(): ObservablePoint\n    {\n        if (this._skew === defaultSkew)\n        {\n            this._skew = new ObservablePoint(this, 0, 0);\n        }\n\n        return this._skew;\n    }\n\n    set skew(value: PointData)\n    {\n        if (this._skew === defaultSkew)\n        {\n            this._skew = new ObservablePoint(this, 0, 0);\n        }\n\n        this._skew.copyFrom(value);\n    }\n\n    /**\n     * The scale factors of this object along the local coordinate axes.\n     *\n     * The default scale is (1, 1).\n     * @since 4.0.0\n     */\n    get scale(): ObservablePoint\n    {\n        if (this._scale === defaultScale)\n        {\n            this._scale = new ObservablePoint(this, 1, 1);\n        }\n\n        return this._scale;\n    }\n\n    set scale(value: PointData | number)\n    {\n        if (this._scale === defaultScale)\n        {\n            this._scale = new ObservablePoint(this, 0, 0);\n        }\n\n        typeof value === 'number' ? this._scale.set(value) : this._scale.copyFrom(value);\n    }\n\n    /**\n     * The width of the Container, setting this will actually modify the scale to achieve the value set.\n     * @memberof scene.Container#\n     */\n    get width(): number\n    {\n        return Math.abs(this.scale.x * this.getLocalBounds().width);\n    }\n\n    set width(value: number)\n    {\n        const localWidth = this.getLocalBounds().width;\n\n        this._setWidth(value, localWidth);\n    }\n\n    /**\n     * The height of the Container, setting this will actually modify the scale to achieve the value set.\n     * @memberof scene.Container#\n     */\n    get height(): number\n    {\n        return Math.abs(this.scale.y * this.getLocalBounds().height);\n    }\n\n    set height(value: number)\n    {\n        const localHeight = this.getLocalBounds().height;\n\n        this._setHeight(value, localHeight);\n    }\n\n    /**\n     * Retrieves the size of the container as a [Size]{@link Size} object.\n     * This is faster than get the width and height separately.\n     * @param out - Optional object to store the size in.\n     * @returns - The size of the container.\n     * @memberof scene.Container#\n     */\n    public getSize(out?: Size): Size\n    {\n        if (!out)\n        {\n            out = {} as Size;\n        }\n\n        const bounds = this.getLocalBounds();\n\n        out.width = Math.abs(this.scale.x * bounds.width);\n        out.height = Math.abs(this.scale.y * bounds.height);\n\n        return out;\n    }\n\n    /**\n     * Sets the size of the container to the specified width and height.\n     * This is faster than setting the width and height separately.\n     * @param value - This can be either a number or a [Size]{@link Size} object.\n     * @param height - The height to set. Defaults to the value of `width` if not provided.\n     * @memberof scene.Container#\n     */\n    public setSize(value: number | Optional<Size, 'height'>, height?: number)\n    {\n        const size = this.getLocalBounds();\n        let convertedWidth: number;\n        let convertedHeight: number;\n\n        if (typeof value !== 'object')\n        {\n            convertedWidth = value;\n            convertedHeight = height ?? value;\n        }\n        else\n        {\n            convertedWidth = value.width;\n            convertedHeight = value.height ?? value.width;\n        }\n\n        if (convertedWidth !== undefined)\n        {\n            this._setWidth(convertedWidth, size.width);\n        }\n\n        if (convertedHeight !== undefined)\n        {\n            this._setHeight(convertedHeight, size.height);\n        }\n    }\n\n    /** Called when the skew or the rotation changes. */\n    private _updateSkew(): void\n    {\n        const rotation = this._rotation;\n        const skew = this._skew;\n\n        this._cx = Math.cos(rotation + skew._y);\n        this._sx = Math.sin(rotation + skew._y);\n        this._cy = -Math.sin(rotation - skew._x); // cos, added PI/2\n        this._sy = Math.cos(rotation - skew._x); // sin, added PI/2\n    }\n\n    /**\n     * Updates the transform properties of the container (accepts partial values).\n     * @param {object} opts - The options for updating the transform.\n     * @param {number} opts.x - The x position of the container.\n     * @param {number} opts.y - The y position of the container.\n     * @param {number} opts.scaleX - The scale factor on the x-axis.\n     * @param {number} opts.scaleY - The scale factor on the y-axis.\n     * @param {number} opts.rotation - The rotation of the container, in radians.\n     * @param {number} opts.skewX - The skew factor on the x-axis.\n     * @param {number} opts.skewY - The skew factor on the y-axis.\n     * @param {number} opts.pivotX - The x coordinate of the pivot point.\n     * @param {number} opts.pivotY - The y coordinate of the pivot point.\n     */\n    public updateTransform(opts: Partial<UpdateTransformOptions>): this\n    {\n        this.position.set(\n            typeof opts.x === 'number' ? opts.x : this.position.x,\n            typeof opts.y === 'number' ? opts.y : this.position.y\n        );\n        this.scale.set(\n            typeof opts.scaleX === 'number' ? opts.scaleX || 1 : this.scale.x,\n            typeof opts.scaleY === 'number' ? opts.scaleY || 1 : this.scale.y\n        );\n        this.rotation = typeof opts.rotation === 'number' ? opts.rotation : this.rotation;\n        this.skew.set(\n            typeof opts.skewX === 'number' ? opts.skewX : this.skew.x,\n            typeof opts.skewY === 'number' ? opts.skewY : this.skew.y\n        );\n        this.pivot.set(\n            typeof opts.pivotX === 'number' ? opts.pivotX : this.pivot.x,\n            typeof opts.pivotY === 'number' ? opts.pivotY : this.pivot.y\n        );\n\n        return this;\n    }\n\n    /**\n     * Updates the local transform using the given matrix.\n     * @param matrix - The matrix to use for updating the transform.\n     */\n    public setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n    }\n\n    /** Updates the local transform. */\n    public updateLocalTransform(): void\n    {\n        if ((this._didLocalTransformChangeId & 0b1111) === this._didChangeId) return;\n\n        this._didLocalTransformChangeId = this._didChangeId;\n        //   this.didChange = false;\n\n        const lt = this.localTransform;\n        const scale = this._scale;\n        const pivot = this._pivot;\n        const position = this._position;\n\n        const sx = scale._x;\n        const sy = scale._y;\n\n        const px = pivot._x;\n        const py = pivot._y;\n\n        // get the matrix values of the container based on its this properties..\n        lt.a = this._cx * sx;\n        lt.b = this._sx * sx;\n        lt.c = this._cy * sy;\n        lt.d = this._sy * sy;\n\n        lt.tx = position._x - ((px * lt.a) + (py * lt.c));\n        lt.ty = position._y - ((px * lt.b) + (py * lt.d));\n    }\n\n    // / ///// color related stuff\n\n    set alpha(value: number)\n    {\n        if (value === this.localAlpha) return;\n\n        this.localAlpha = value;\n\n        this._updateFlags |= UPDATE_COLOR;\n\n        this._onUpdate();\n    }\n\n    /** The opacity of the object. */\n    get alpha(): number\n    {\n        return this.localAlpha;\n    }\n\n    set tint(value: ColorSource)\n    {\n        const tempColor = Color.shared.setValue(value ?? 0xFFFFFF);\n        const bgr = tempColor.toBgrNumber();\n\n        if (bgr === this.localColor) return;\n\n        this.localColor = bgr;\n\n        this._updateFlags |= UPDATE_COLOR;\n\n        this._onUpdate();\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     *\n     * A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        const bgr = this.localColor;\n        // convert bgr to rgb..\n\n        return ((bgr & 0xFF) << 16) + (bgr & 0xFF00) + ((bgr >> 16) & 0xFF);\n    }\n\n    // / //////////////// blend related stuff\n\n    set blendMode(value: BLEND_MODES)\n    {\n        if (this.localBlendMode === value) return;\n        if (this.renderGroup && !this.isRenderGroupRoot)\n        {\n            this.renderGroup.structureDidChange = true;\n        }\n\n        this._updateFlags |= UPDATE_BLEND;\n\n        this.localBlendMode = value;\n\n        this._onUpdate();\n    }\n\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `'normal'` to reset the blend mode.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.localBlendMode;\n    }\n\n    // / ///////// VISIBILITY / RENDERABLE /////////////////\n\n    /** The visibility of the object. If false the object will not be drawn, and the transform will not be updated. */\n    get visible()\n    {\n        return !!(this.localDisplayStatus & 0b010);\n    }\n\n    set visible(value: boolean)\n    {\n        const valueNumber = value ? 1 : 0;\n\n        if ((this.localDisplayStatus & 0b010) >> 1 === valueNumber) return;\n\n        if (this.renderGroup && !this.isRenderGroupRoot)\n        {\n            this.renderGroup.structureDidChange = true;\n        }\n\n        this._updateFlags |= UPDATE_VISIBLE;\n\n        this.localDisplayStatus ^= 0b010;\n\n        this._onUpdate();\n    }\n\n    /** @ignore */\n    get culled()\n    {\n        return !(this.localDisplayStatus & 0b100);\n    }\n\n    /** @ignore */\n    set culled(value: boolean)\n    {\n        const valueNumber = value ? 1 : 0;\n\n        if ((this.localDisplayStatus & 0b100) >> 2 === valueNumber) return;\n\n        if (this.renderGroup && !this.isRenderGroupRoot)\n        {\n            this.renderGroup.structureDidChange = true;\n        }\n\n        this._updateFlags |= UPDATE_VISIBLE;\n        this.localDisplayStatus ^= 0b100;\n\n        this._onUpdate();\n    }\n\n    /** Can this object be rendered, if false the object will not be drawn but the transform will still be updated. */\n    get renderable()\n    {\n        return !!(this.localDisplayStatus & 0b001);\n    }\n\n    set renderable(value: boolean)\n    {\n        const valueNumber = value ? 1 : 0;\n\n        if ((this.localDisplayStatus & 0b001) === valueNumber) return;\n\n        this._updateFlags |= UPDATE_VISIBLE;\n        this.localDisplayStatus ^= 0b001;\n\n        if (this.renderGroup && !this.isRenderGroupRoot)\n        {\n            this.renderGroup.structureDidChange = true;\n        }\n\n        this._onUpdate();\n    }\n\n    /** Whether or not the object should be rendered. */\n    get isRenderable(): boolean\n    {\n        return (this.localDisplayStatus === 0b111 && this.groupAlpha > 0);\n    }\n\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for children with textures e.g. Sprites. If options.children\n     * is set to true it should destroy the texture of the child sprite\n     * @param {boolean} [options.textureSource=false] - Only used for children with textures e.g. Sprites.\n     * If options.children is set to true it should destroy the texture source of the child sprite\n     * @param {boolean} [options.context=false] - Only used for children with graphicsContexts e.g. Graphics.\n     * If options.children is set to true it should destroy the context of the child graphics\n     */\n    public destroy(options: DestroyOptions = false): void\n    {\n        if (this.destroyed) return;\n        this.destroyed = true;\n\n        this.removeFromParent();\n        this.parent = null;\n        this._mask = null;\n        this._filters = null;\n        this.effects = null;\n        this._position = null;\n        this._scale = null;\n        this._pivot = null;\n        this._skew = null;\n\n        this.emit('destroyed', this);\n\n        this.removeAllListeners();\n\n        const destroyChildren = typeof options === 'boolean' ? options : options?.children;\n\n        const oldChildren = this.removeChildren(0, this.children.length);\n\n        if (destroyChildren)\n        {\n            for (let i = 0; i < oldChildren.length; ++i)\n            {\n                oldChildren[i].destroy(options);\n            }\n        }\n    }\n}\n\nContainer.mixin(childrenHelperMixin);\nContainer.mixin(toLocalGlobalMixin);\nContainer.mixin(onRenderMixin);\nContainer.mixin(measureMixin);\nContainer.mixin(effectsMixin);\nContainer.mixin(findMixin);\nContainer.mixin(sortMixin);\nContainer.mixin(cullingMixin);\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n",null,"import { colord, extend } from '@pixi/colord';\nimport namesPlugin from '@pixi/colord/plugins/names';\n\nimport type { AnyColor, HslaColor, HslColor, HsvaColor, HsvColor, RgbaColor, RgbColor } from '@pixi/colord';\n\nextend([namesPlugin]);\n\n/**\n * Pixi supports multiple color formats, including CSS color strings, hex, numbers, and arrays.\n *\n * When providing values for any of the color properties, you can use any of the {@link color.ColorSource} formats.\n * ```typescript\n * import { Color } from 'pixi.js';\n *\n * // All of these are valid:\n * sprite.tint = 'red';\n * sprite.tint = 0xff0000;\n * sprite.tint = '#ff0000';\n * sprite.tint = new Color('red');\n *\n * // Same for graphics fill/stroke colors and other  color values:\n * graphics.fill({ color: 'red' });\n * graphics.fill({ color: 0xff0000 });\n * graphics.stroke({ color: '#ff0000' });\n * graphics.stroke({ color: new Color('red')};\n * ```\n * @namespace color\n */\n\n/**\n * RGBA color array.\n *\n * `[number, number, number, number]`\n * @memberof color\n */\nexport type RgbaArray = [number, number, number, number];\n\n/**\n * Valid formats to use when defining any color properties, also valid for the {@link color.Color} constructor.\n *\n * These types are extended from [colord](https://www.npmjs.com/package/colord) with some PixiJS-specific extensions.\n *\n * Possible value types are:\n * - [Color names](https://www.w3.org/TR/css-color-4/#named-colors):\n *   `'red'`, `'green'`, `'blue'`, `'white'`, etc.\n * - RGB hex integers (`0xRRGGBB`):\n *   `0xff0000`, `0x00ff00`, `0x0000ff`, etc.\n * - [RGB(A) hex strings](https://www.w3.org/TR/css-color-4/#hex-notation):\n *   - 6 digits (`RRGGBB`): `'ff0000'`, `'#00ff00'`, `'0x0000ff'`, etc.\n *   - 3 digits (`RGB`): `'f00'`, `'#0f0'`, `'0x00f'`, etc.\n *   - 8 digits (`RRGGBBAA`): `'ff000080'`, `'#00ff0080'`, `'0x0000ff80'`, etc.\n *   - 4 digits (`RGBA`): `'f008'`, `'#0f08'`, `'0x00f8'`, etc.\n * - RGB(A) objects:\n *   `{ r: 255, g: 0, b: 0 }`, `{ r: 255, g: 0, b: 0, a: 0.5 }`, etc.\n * - [RGB(A) strings](https://www.w3.org/TR/css-color-4/#rgb-functions):\n *   `'rgb(255, 0, 0)'`, `'rgb(100% 0% 0%)'`, `'rgba(255, 0, 0, 0.5)'`, `'rgba(100% 0% 0% / 50%)'`, etc.\n * - RGB(A) arrays:\n *   `[1, 0, 0]`, `[1, 0, 0, 0.5]`, etc.\n * - RGB(A) Float32Array:\n *   `new Float32Array([1, 0, 0])`, `new Float32Array([1, 0, 0, 0.5])`, etc.\n * - RGB(A) Uint8Array:\n *   `new Uint8Array([255, 0, 0])`, `new Uint8Array([255, 0, 0, 128])`, etc.\n * - RGB(A) Uint8ClampedArray:\n *   `new Uint8ClampedArray([255, 0, 0])`, `new Uint8ClampedArray([255, 0, 0, 128])`, etc.\n * - HSL(A) objects:\n *   `{ h: 0, s: 100, l: 50 }`, `{ h: 0, s: 100, l: 50, a: 0.5 }`, etc.\n * - [HSL(A) strings](https://www.w3.org/TR/css-color-4/#the-hsl-notation):\n *   `'hsl(0, 100%, 50%)'`, `'hsl(0deg 100% 50%)'`, `'hsla(0, 100%, 50%, 0.5)'`, `'hsla(0deg 100% 50% / 50%)'`, etc.\n * - HSV(A) objects:\n *   `{ h: 0, s: 100, v: 100 }`, `{ h: 0, s: 100, v: 100, a: 0.5 }`, etc.\n * - {@link color.Color} objects.\n * @since 7.2.0\n * @memberof color\n */\nexport type ColorSource =\n    | string\n    | number\n    | number[]\n    | Float32Array\n    | Uint8Array\n    | Uint8ClampedArray\n    | HslColor\n    | HslaColor\n    | HsvColor\n    | HsvaColor\n    | RgbColor\n    | RgbaColor\n    | Color\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    | Number;\n\ntype ColorSourceTypedArray = Float32Array | Uint8Array | Uint8ClampedArray;\n\n/**\n * Color utility class. Can accept any {@link color.ColorSource} format in its constructor.\n * ```js\n * import { Color } from 'pixi.js';\n *\n * new Color('red').toArray(); // [1, 0, 0, 1]\n * new Color(0xff0000).toArray(); // [1, 0, 0, 1]\n * new Color('ff0000').toArray(); // [1, 0, 0, 1]\n * new Color('#f00').toArray(); // [1, 0, 0, 1]\n * new Color('0xff0000ff').toArray(); // [1, 0, 0, 1]\n * new Color('#f00f').toArray(); // [1, 0, 0, 1]\n * new Color({ r: 255, g: 0, b: 0, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * new Color('rgb(255, 0, 0, 0.5)').toArray(); // [1, 0, 0, 0.5]\n * new Color([1, 1, 1]).toArray(); // [1, 1, 1, 1]\n * new Color([1, 0, 0, 0.5]).toArray(); // [1, 0, 0, 0.5]\n * new Color(new Float32Array([1, 0, 0, 0.5])).toArray(); // [1, 0, 0, 0.5]\n * new Color(new Uint8Array([255, 0, 0, 255])).toArray(); // [1, 0, 0, 1]\n * new Color(new Uint8ClampedArray([255, 0, 0, 255])).toArray(); // [1, 0, 0, 1]\n * new Color({ h: 0, s: 100, l: 50, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * new Color('hsl(0, 100%, 50%, 50%)').toArray(); // [1, 0, 0, 0.5]\n * new Color({ h: 0, s: 100, v: 100, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * ```\n * @since 7.2.0\n * @memberof color\n */\nexport class Color\n{\n    /**\n     * Default Color object for static uses\n     * @example\n     * import { Color } from 'pixi.js';\n     * Color.shared.setValue(0xffffff).toHex(); // '#ffffff'\n     */\n    public static readonly shared = new Color();\n\n    /**\n     * Temporary Color object for static uses internally.\n     * As to not conflict with Color.shared.\n     * @ignore\n     */\n    private static readonly _temp = new Color();\n\n    /** Pattern for hex strings */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static readonly HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\n\n    /** Internal color source, from constructor or set value */\n    private _value: Exclude<ColorSource, Color> | null;\n\n    /** Normalized rgba component, floats from 0-1 */\n    private _components: Float32Array;\n\n    /** Cache color as number */\n    private _int: number;\n\n    /** An array of the current Color. Only populated when `toArray` functions are called */\n    private _arrayRgba: number[] | null;\n    private _arrayRgb: number[] | null;\n\n    /**\n     * @param {ColorSource} value - Optional value to use, if not provided, white is used.\n     */\n    constructor(value: ColorSource = 0xffffff)\n    {\n        this._value = null;\n        this._components = new Float32Array(4);\n        this._components.fill(1);\n        this._int = 0xffffff;\n        this.value = value;\n    }\n\n    /** Get red component (0 - 1) */\n    get red(): number\n    {\n        return this._components[0];\n    }\n\n    /** Get green component (0 - 1) */\n    get green(): number\n    {\n        return this._components[1];\n    }\n\n    /** Get blue component (0 - 1) */\n    get blue(): number\n    {\n        return this._components[2];\n    }\n\n    /** Get alpha component (0 - 1) */\n    get alpha(): number\n    {\n        return this._components[3];\n    }\n\n    /**\n     * Set the value, suitable for chaining\n     * @param value\n     * @see Color.value\n     */\n    public setValue(value: ColorSource): this\n    {\n        this.value = value;\n\n        return this;\n    }\n\n    /**\n     * The current color source.\n     *\n     * When setting:\n     * - Setting to an instance of `Color` will copy its color source and components.\n     * - Otherwise, `Color` will try to normalize the color source and set the components.\n     *   If the color source is invalid, an `Error` will be thrown and the `Color` will left unchanged.\n     *\n     * Note: The `null` in the setter's parameter type is added to match the TypeScript rule: return type of getter\n     * must be assignable to its setter's parameter type. Setting `value` to `null` will throw an `Error`.\n     *\n     * When getting:\n     * - A return value of `null` means the previous value was overridden (e.g., {@link Color.multiply multiply},\n     *   {@link Color.premultiply premultiply} or {@link Color.round round}).\n     * - Otherwise, the color source used when setting is returned.\n     */\n    set value(value: ColorSource | null)\n    {\n        // Support copying from other Color objects\n        if (value instanceof Color)\n        {\n            this._value = this._cloneSource(value._value);\n            this._int = value._int;\n            this._components.set(value._components);\n        }\n        else if (value === null)\n        {\n            throw new Error('Cannot set Color#value to null');\n        }\n        else if (this._value === null || !this._isSourceEqual(this._value, value))\n        {\n            this._normalize(value);\n            this._value = this._cloneSource(value);\n        }\n    }\n    get value(): Exclude<ColorSource, Color> | null\n    {\n        return this._value;\n    }\n\n    /**\n     * Copy a color source internally.\n     * @param value - Color source\n     */\n    private _cloneSource(value: Exclude<ColorSource, Color> | null): Exclude<ColorSource, Color> | null\n    {\n        if (typeof value === 'string' || typeof value === 'number' || value instanceof Number || value === null)\n        {\n            return value;\n        }\n        else if (Array.isArray(value) || ArrayBuffer.isView(value))\n        {\n            return value.slice(0);\n        }\n        else if (typeof value === 'object' && value !== null)\n        {\n            return { ...value };\n        }\n\n        return value;\n    }\n\n    /**\n     * Equality check for color sources.\n     * @param value1 - First color source\n     * @param value2 - Second color source\n     * @returns `true` if the color sources are equal, `false` otherwise.\n     */\n    private _isSourceEqual(value1: Exclude<ColorSource, Color>, value2: Exclude<ColorSource, Color>): boolean\n    {\n        const type1 = typeof value1;\n        const type2 = typeof value2;\n\n        // Mismatched types\n        if (type1 !== type2)\n        {\n            return false;\n        }\n        // Handle numbers/strings and things that extend Number\n        // important to do the instanceof Number first, as this is \"object\" type\n        else if (type1 === 'number' || type1 === 'string' || value1 instanceof Number)\n        {\n            return value1 === value2;\n        }\n        // Handle Arrays and TypedArrays\n        else if (\n            (Array.isArray(value1) && Array.isArray(value2))\n            || (ArrayBuffer.isView(value1) && ArrayBuffer.isView(value2))\n        )\n        {\n            if (value1.length !== value2.length)\n            {\n                return false;\n            }\n\n            return value1.every((v, i) => v === value2[i]);\n        }\n        // Handle Objects\n        else if (value1 !== null && value2 !== null)\n        {\n            const keys1 = Object.keys(value1) as (keyof typeof value1)[];\n            const keys2 = Object.keys(value2) as (keyof typeof value2)[];\n\n            if (keys1.length !== keys2.length)\n            {\n                return false;\n            }\n\n            return keys1.every((key) => value1[key] === value2[key]);\n        }\n\n        return value1 === value2;\n    }\n\n    /**\n     * Convert to a RGBA color object.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1, a: 1 }\n     */\n    public toRgba(): RgbaColor\n    {\n        const [r, g, b, a] = this._components;\n\n        return { r, g, b, a };\n    }\n\n    /**\n     * Convert to a RGB color object.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1 }\n     */\n    public toRgb(): RgbColor\n    {\n        const [r, g, b] = this._components;\n\n        return { r, g, b };\n    }\n\n    /** Convert to a CSS-style rgba string: `rgba(255,255,255,1.0)`. */\n    public toRgbaString(): string\n    {\n        const [r, g, b] = this.toUint8RgbArray();\n\n        return `rgba(${r},${g},${b},${this.alpha})`;\n    }\n\n    /**\n     * Convert to an [R, G, B] array of clamped uint8 values (0 to 255).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toUint8RgbArray(); // returns [255, 255, 255]\n     * @param {number[]|Uint8Array|Uint8ClampedArray} [out] - Output array\n     */\n    public toUint8RgbArray(): number[];\n    public toUint8RgbArray<T extends number[] | Uint8Array | Uint8ClampedArray>(out: T): T;\n    public toUint8RgbArray<T extends number[] | Uint8Array | Uint8ClampedArray>(out?: T): T\n    {\n        const [r, g, b] = this._components;\n\n        if (!this._arrayRgb)\n        {\n            this._arrayRgb = [];\n        }\n\n        out = out || this._arrayRgb as T;\n\n        out[0] = Math.round(r * 255);\n        out[1] = Math.round(g * 255);\n        out[2] = Math.round(b * 255);\n\n        return out;\n    }\n\n    /**\n     * Convert to an [R, G, B, A] array of normalized floats (numbers from 0.0 to 1.0).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toArray(); // returns [1, 1, 1, 1]\n     * @param {number[]|Float32Array} [out] - Output array\n     */\n    public toArray(): number[];\n    public toArray<T extends number[] | Float32Array>(out: T): T;\n    public toArray<T extends number[] | Float32Array>(out?: T): T\n    {\n        if (!this._arrayRgba)\n        {\n            this._arrayRgba = [];\n        }\n\n        out = out || this._arrayRgba as T;\n        const [r, g, b, a] = this._components;\n\n        out[0] = r;\n        out[1] = g;\n        out[2] = b;\n        out[3] = a;\n\n        return out;\n    }\n\n    /**\n     * Convert to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgbArray(); // returns [1, 1, 1]\n     * @param {number[]|Float32Array} [out] - Output array\n     */\n    public toRgbArray(): number[];\n    public toRgbArray<T extends number[] | Float32Array>(out: T): T;\n    public toRgbArray<T extends number[] | Float32Array>(out?: T): T\n    {\n        if (!this._arrayRgb)\n        {\n            this._arrayRgb = [];\n        }\n\n        out = out || this._arrayRgb as T;\n        const [r, g, b] = this._components;\n\n        out[0] = r;\n        out[1] = g;\n        out[2] = b;\n\n        return out;\n    }\n\n    /**\n     * Convert to a hexadecimal number.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toNumber(); // returns 16777215\n     */\n    public toNumber(): number\n    {\n        return this._int;\n    }\n\n    /**\n     * Convert to a BGR number\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color(0xffcc99).toBgrNumber(); // returns 0x99ccff\n     */\n    public toBgrNumber(): number\n    {\n        const [r, g, b] = this.toUint8RgbArray();\n\n        return (b << 16) + (g << 8) + r;\n    }\n\n    /**\n     * Convert to a hexadecimal number in little endian format (e.g., BBGGRR).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color(0xffcc99).toLittleEndianNumber(); // returns 0x99ccff\n     * @returns {number} - The color as a number in little endian format.\n     */\n    public toLittleEndianNumber(): number\n    {\n        const value = this._int;\n\n        return (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * Multiply with another color. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param {ColorSource} value - The color to multiply by.\n     */\n    public multiply(value: ColorSource): this\n    {\n        const [r, g, b, a] = Color._temp.setValue(value)._components;\n\n        this._components[0] *= r;\n        this._components[1] *= g;\n        this._components[2] *= b;\n        this._components[3] *= a;\n\n        this._refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Converts color to a premultiplied alpha format. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param alpha - The alpha to multiply by.\n     * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n     * @returns {Color} - Itself.\n     */\n    public premultiply(alpha: number, applyToRGB = true): this\n    {\n        if (applyToRGB)\n        {\n            this._components[0] *= alpha;\n            this._components[1] *= alpha;\n            this._components[2] *= alpha;\n        }\n        this._components[3] = alpha;\n\n        this._refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Premultiplies alpha with current color.\n     * @param {number} alpha - The alpha to multiply by.\n     * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n     * @returns {number} tint multiplied by alpha\n     */\n    public toPremultiplied(alpha: number, applyToRGB = true): number\n    {\n        if (alpha === 1.0)\n        {\n            return (0xff << 24) + this._int;\n        }\n        if (alpha === 0.0)\n        {\n            return applyToRGB ? 0 : this._int;\n        }\n        let r = (this._int >> 16) & 0xff;\n        let g = (this._int >> 8) & 0xff;\n        let b = this._int & 0xff;\n\n        if (applyToRGB)\n        {\n            r = ((r * alpha) + 0.5) | 0;\n            g = ((g * alpha) + 0.5) | 0;\n            b = ((b * alpha) + 0.5) | 0;\n        }\n\n        return ((alpha * 255) << 24) + (r << 16) + (g << 8) + b;\n    }\n\n    /**\n     * Convert to a hexidecimal string.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toHex(); // returns \"#ffffff\"\n     */\n    public toHex(): string\n    {\n        const hexString = this._int.toString(16);\n\n        return `#${'000000'.substring(0, 6 - hexString.length) + hexString}`;\n    }\n\n    /**\n     * Convert to a hexidecimal string with alpha.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toHexa(); // returns \"#ffffffff\"\n     */\n    public toHexa(): string\n    {\n        const alphaValue = Math.round(this._components[3] * 255);\n        const alphaString = alphaValue.toString(16);\n\n        return this.toHex() + '00'.substring(0, 2 - alphaString.length) + alphaString;\n    }\n\n    /**\n     * Set alpha, suitable for chaining.\n     * @param alpha\n     */\n    public setAlpha(alpha: number): this\n    {\n        this._components[3] = this._clamp(alpha);\n\n        return this;\n    }\n\n    /**\n     * Normalize the input value into rgba\n     * @param value - Input value\n     */\n    private _normalize(value: Exclude<ColorSource, Color>): void\n    {\n        let r: number | undefined;\n        let g: number | undefined;\n        let b: number | undefined;\n        let a: number | undefined;\n\n        // Number is a primative so typeof works fine, but in the case\n        // that someone creates a class that extends Number, we also\n        // need to check for instanceof Number\n        if (\n            (typeof value === 'number' || value instanceof Number)\n            && (value as number) >= 0\n            && (value as number) <= 0xffffff\n        )\n        {\n            const int = value as number; // cast required because instanceof Number is ambiguous for TS\n\n            r = ((int >> 16) & 0xff) / 255;\n            g = ((int >> 8) & 0xff) / 255;\n            b = (int & 0xff) / 255;\n            a = 1.0;\n        }\n        else if (\n            (Array.isArray(value) || value instanceof Float32Array)\n            // Can be rgb or rgba\n            && value.length >= 3\n            && value.length <= 4\n        )\n        {\n            // make sure all values are 0 - 1\n            value = this._clamp(value);\n            [r, g, b, a = 1.0] = value;\n        }\n        else if (\n            (value instanceof Uint8Array || value instanceof Uint8ClampedArray)\n            // Can be rgb or rgba\n            && value.length >= 3\n            && value.length <= 4\n        )\n        {\n            // make sure all values are 0 - 255\n            value = this._clamp(value, 0, 255);\n            [r, g, b, a = 255] = value;\n            r /= 255;\n            g /= 255;\n            b /= 255;\n            a /= 255;\n        }\n        else if (typeof value === 'string' || typeof value === 'object')\n        {\n            if (typeof value === 'string')\n            {\n                const match = Color.HEX_PATTERN.exec(value);\n\n                if (match)\n                {\n                    // Normalize hex string, remove 0x or # prefix\n                    value = `#${match[2]}`;\n                }\n            }\n\n            const color = colord(value as AnyColor);\n\n            if (color.isValid())\n            {\n                ({ r, g, b, a } = color.rgba);\n                r /= 255;\n                g /= 255;\n                b /= 255;\n            }\n        }\n\n        // Cache normalized values for rgba and hex integer\n        if (r !== undefined)\n        {\n            this._components[0] = r as number;\n            this._components[1] = g as number;\n            this._components[2] = b as number;\n            this._components[3] = a as number;\n            this._refreshInt();\n        }\n        else\n        {\n            throw new Error(`Unable to convert color ${value}`);\n        }\n    }\n\n    /** Refresh the internal color rgb number */\n    private _refreshInt(): void\n    {\n        // Clamp values to 0 - 1\n        this._clamp(this._components);\n\n        const [r, g, b] = this._components;\n\n        this._int = ((r * 255) << 16) + ((g * 255) << 8) + ((b * 255) | 0);\n    }\n\n    /**\n     * Clamps values to a range. Will override original values\n     * @param value - Value(s) to clamp\n     * @param min - Minimum value\n     * @param max - Maximum value\n     */\n    private _clamp<T extends number | number[] | ColorSourceTypedArray>(value: T, min = 0, max = 1): T\n    {\n        if (typeof value === 'number')\n        {\n            return Math.min(Math.max(value, min), max) as T;\n        }\n\n        value.forEach((v, i) =>\n        {\n            value[i] = Math.min(Math.max(v, min), max);\n        });\n\n        return value;\n    }\n\n    /**\n     * Check if the value is a color-like object\n     * @param value - Value to check\n     * @returns True if the value is a color-like object\n     * @static\n     * @example\n     * import { Color } from 'pixi.js';\n     * Color.isColorLike('white'); // returns true\n     * Color.isColorLike(0xffffff); // returns true\n     * Color.isColorLike([1, 1, 1]); // returns true\n     */\n    public static isColorLike(value: ColorSource): value is ColorSource\n    {\n        return (\n            typeof value === 'number'\n            || typeof value === 'string'\n            || value instanceof Number\n            || value instanceof Color\n            || Array.isArray(value)\n            || value instanceof Uint8Array\n            || value instanceof Uint8ClampedArray\n            || value instanceof Float32Array\n            || ((value as RgbColor).r !== undefined\n                && (value as RgbColor).g !== undefined\n                && (value as RgbColor).b !== undefined)\n            || ((value as RgbaColor).r !== undefined\n                && (value as RgbaColor).g !== undefined\n                && (value as RgbaColor).b !== undefined\n                && (value as RgbaColor).a !== undefined)\n            || ((value as HslColor).h !== undefined\n                && (value as HslColor).s !== undefined\n                && (value as HslColor).l !== undefined)\n            || ((value as HslaColor).h !== undefined\n                && (value as HslaColor).s !== undefined\n                && (value as HslaColor).l !== undefined\n                && (value as HslaColor).a !== undefined)\n            || ((value as HsvColor).h !== undefined\n                && (value as HsvColor).s !== undefined\n                && (value as HsvColor).v !== undefined)\n            || ((value as HsvaColor).h !== undefined\n                && (value as HsvaColor).s !== undefined\n                && (value as HsvaColor).v !== undefined\n                && (value as HsvaColor).a !== undefined)\n        );\n    }\n}\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?\"0\"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,p=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,v=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,m=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},\"hex\"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},\"rgb\"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u=\"deg\"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},\"hsl\"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},\"rgb\"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},\"hsl\"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},\"hsv\"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return\"string\"==typeof r?N(r.trim(),y.string):\"object\"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):\"\",\"#\"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?\"rgba(\"+t+\", \"+n+\", \"+e+\", \"+u+\")\":\"rgb(\"+t+\", \"+n+\", \"+e+\")\";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?\"hsla(\"+t+\", \"+n+\"%, \"+e+\"%, \"+u+\")\":\"hsl(\"+t+\", \"+n+\"%, \"+e+\"%)\";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return\"number\"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return\"number\"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};export{j as Colord,w as colord,k as extend,I as getFormat,E as random};\n","export default function(e,f){var a={white:\"#ffffff\",bisque:\"#ffe4c4\",blue:\"#0000ff\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",azure:\"#f0ffff\",whitesmoke:\"#f5f5f5\",papayawhip:\"#ffefd5\",plum:\"#dda0dd\",blanchedalmond:\"#ffebcd\",black:\"#000000\",gold:\"#ffd700\",goldenrod:\"#daa520\",gainsboro:\"#dcdcdc\",cornsilk:\"#fff8dc\",cornflowerblue:\"#6495ed\",burlywood:\"#deb887\",aquamarine:\"#7fffd4\",beige:\"#f5f5dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkkhaki:\"#bdb76b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",peachpuff:\"#ffdab9\",darkmagenta:\"#8b008b\",darkred:\"#8b0000\",darkorchid:\"#9932cc\",darkorange:\"#ff8c00\",darkslateblue:\"#483d8b\",gray:\"#808080\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",wheat:\"#f5deb3\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",ghostwhite:\"#f8f8ff\",darkviolet:\"#9400d3\",magenta:\"#ff00ff\",green:\"#008000\",dodgerblue:\"#1e90ff\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",blueviolet:\"#8a2be2\",forestgreen:\"#228b22\",lawngreen:\"#7cfc00\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",fuchsia:\"#ff00ff\",brown:\"#a52a2a\",maroon:\"#800000\",mediumblue:\"#0000cd\",lightcoral:\"#f08080\",darkturquoise:\"#00ced1\",lightcyan:\"#e0ffff\",ivory:\"#fffff0\",lightyellow:\"#ffffe0\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",linen:\"#faf0e6\",mediumaquamarine:\"#66cdaa\",lemonchiffon:\"#fffacd\",lime:\"#00ff00\",khaki:\"#f0e68c\",mediumseagreen:\"#3cb371\",limegreen:\"#32cd32\",mediumspringgreen:\"#00fa9a\",lightskyblue:\"#87cefa\",lightblue:\"#add8e6\",midnightblue:\"#191970\",lightpink:\"#ffb6c1\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",mintcream:\"#f5fffa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",navajowhite:\"#ffdead\",navy:\"#000080\",mediumvioletred:\"#c71585\",powderblue:\"#b0e0e6\",palegoldenrod:\"#eee8aa\",oldlace:\"#fdf5e6\",paleturquoise:\"#afeeee\",mediumturquoise:\"#48d1cc\",mediumorchid:\"#ba55d3\",rebeccapurple:\"#663399\",lightsteelblue:\"#b0c4de\",mediumslateblue:\"#7b68ee\",thistle:\"#d8bfd8\",tan:\"#d2b48c\",orchid:\"#da70d6\",mediumpurple:\"#9370db\",purple:\"#800080\",pink:\"#ffc0cb\",skyblue:\"#87ceeb\",springgreen:\"#00ff7f\",palegreen:\"#98fb98\",red:\"#ff0000\",yellow:\"#ffff00\",slateblue:\"#6a5acd\",lavenderblush:\"#fff0f5\",peru:\"#cd853f\",palevioletred:\"#db7093\",violet:\"#ee82ee\",teal:\"#008080\",slategray:\"#708090\",slategrey:\"#708090\",aliceblue:\"#f0f8ff\",darkseagreen:\"#8fbc8f\",darkolivegreen:\"#556b2f\",greenyellow:\"#adff2f\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",tomato:\"#ff6347\",silver:\"#c0c0c0\",sienna:\"#a0522d\",lavender:\"#e6e6fa\",lightgreen:\"#90ee90\",orange:\"#ffa500\",orangered:\"#ff4500\",steelblue:\"#4682b4\",royalblue:\"#4169e1\",turquoise:\"#40e0d0\",yellowgreen:\"#9acd32\",salmon:\"#fa8072\",saddlebrown:\"#8b4513\",sandybrown:\"#f4a460\",rosybrown:\"#bc8f8f\",darksalmon:\"#e9967a\",lightgoldenrodyellow:\"#fafad2\",snow:\"#fffafa\",lightgrey:\"#d3d3d3\",lightgray:\"#d3d3d3\",dimgray:\"#696969\",dimgrey:\"#696969\",olivedrab:\"#6b8e23\",olive:\"#808000\"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return\"transparent\";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b=\"black\";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d=\"transparent\"===r?\"#0000\":a[r];return d?new e(d).toRgb():null},\"name\"])}\n",null,"import type { Rectangle } from '../maths/shapes/Rectangle';\n\nexport interface CullingMixinConstructor\n{\n    /**\n     * If set, this shape is used for culling instead of the bounds of this object.\n     * It can improve the culling performance of objects with many children.\n     * The culling area is defined in local space.\n     * @memberof scene.Container#\n     */\n    cullArea: Rectangle,\n    /**\n     * Should this object be rendered if the bounds of this object are out of frame?\n     *\n     * Culling has no effect on whether updateTransform is called.\n     * @default false\n     * @memberof scene.Container#\n     */\n    cullable: boolean,\n    /**\n     * Determines if the children to the container can be culled\n     * Setting this to false allows PixiJS to bypass a recursive culling function\n     * Which can help to optimize very complex scenes\n     * @default true\n     * @memberof scene.Container#\n     */\n    cullableChildren: boolean,\n}\n\nexport const cullingMixin: CullingMixinConstructor = {\n    cullArea: null,\n    cullable: false,\n    cullableChildren: true,\n};\n",null,"/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { PI_2 } from '../misc/const';\nimport { Point } from '../point/Point';\n\nimport type { PointData } from '../point/PointData';\n\ninterface TransformableObject\n{\n    position: PointData;\n    scale: PointData;\n    pivot: PointData;\n    skew: PointData;\n    rotation: number;\n}\n\n/**\n * A fast matrix for 2D transformations.\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @memberof maths\n */\nexport class Matrix\n{\n    /** @default 1 */\n    public a: number;\n\n    /** @default 0 */\n    public b: number;\n\n    /** @default 0 */\n    public c: number;\n\n    /** @default 1 */\n    public d: number;\n\n    /** @default 0 */\n    public tx: number;\n\n    /** @default 0 */\n    public ty: number;\n\n    /** An array of the current matrix. Only populated when `toArray` is called */\n    public array: Float32Array | null = null;\n\n    /**\n     * @param a - x scale\n     * @param b - y skew\n     * @param c - x skew\n     * @param d - y scale\n     * @param tx - x translation\n     * @param ty - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     * @param array - The array that the matrix will be populated from.\n     */\n    public fromArray(array: number[]): void\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * Sets the matrix properties.\n     * @param a - Matrix component\n     * @param b - Matrix component\n     * @param c - Matrix component\n     * @param d - Matrix component\n     * @param tx - Matrix component\n     * @param ty - Matrix component\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     * @param transpose - Whether we need to transpose the matrix or not\n     * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @returns The newly created array which contains the matrix\n     */\n    public toArray(transpose?: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     * @param pos - The origin\n     * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {Point} The new point, transformed through this matrix\n     */\n    public apply<P extends PointData = Point>(pos: PointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     * @param pos - The origin\n     * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {Point} The new point, inverse-transformed through this matrix\n     */\n    public applyInverse<P extends PointData = Point>(pos: PointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n        const tx = this.tx;\n        const ty = this.ty;\n\n        const id = 1 / ((a * d) + (c * -b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (d * id * x) + (-c * id * y) + (((ty * c) - (tx * d)) * id);\n        newPos.y = (a * id * y) + (-b * id * x) + (((-ty * a) + (tx * b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     * @param x - How much to translate x by\n     * @param y - How much to translate y by\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public translate(x: number, y: number): this\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     * @param x - The amount to scale horizontally\n     * @param y - The amount to scale vertically\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public scale(x: number, y: number): this\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     * @param angle - The angle in radians.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public rotate(angle: number): this\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     * @param matrix - The matrix to append.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public append(matrix: Matrix): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Appends two matrix's and sets the result to this matrix. AB = A * B\n     * @param a - The matrix to append.\n     * @param b - The matrix to append.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public appendFrom(a: Matrix, b: Matrix): this\n    {\n        const a1 = a.a;\n        const b1 = a.b;\n        const c1 = a.c;\n        const d1 = a.d;\n        const tx = a.tx;\n        const ty = a.ty;\n\n        const a2 = b.a;\n        const b2 = b.b;\n        const c2 = b.c;\n        const d2 = b.d;\n\n        this.a = (a1 * a2) + (b1 * c2);\n        this.b = (a1 * b2) + (b1 * d2);\n        this.c = (c1 * a2) + (d1 * c2);\n        this.d = (c1 * b2) + (d1 * d2);\n        this.tx = (tx * a2) + (ty * c2) + b.tx;\n        this.ty = (tx * b2) + (ty * d2) + b.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     * @param x - Position on the x axis\n     * @param y - Position on the y axis\n     * @param pivotX - Pivot on the x axis\n     * @param pivotY - Pivot on the y axis\n     * @param scaleX - Scale on the x axis\n     * @param scaleY - Scale on the y axis\n     * @param rotation - Rotation in radians\n     * @param skewX - Skew on the x axis\n     * @param skewY - Skew on the y axis\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number,\n        scaleY: number, rotation: number, skewX: number, skewY: number): this\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     * @param matrix - The matrix to prepend\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public prepend(matrix: Matrix): this\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     * @param transform - The transform to apply the properties to.\n     * @returns The transform with the newly applied properties\n     */\n    public decompose(transform: TransformableObject): TransformableObject\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n        const pivot = transform.pivot;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx + ((pivot.x * a) + (pivot.y * c));\n        transform.position.y = this.ty + ((pivot.x * b) + (pivot.y * d));\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public invert(): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /** Checks if this matrix is an identity matrix */\n    public isIdentity(): boolean\n    {\n        return this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1 && this.tx === 0 && this.ty === 0;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public identity(): this\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     * @returns A copy of this matrix. Good for chaining method calls.\n     */\n    public clone(): Matrix\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     * @param matrix - The matrix to copy to.\n     * @returns The matrix given in parameter with its values updated.\n     */\n    public copyTo(matrix: Matrix): Matrix\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     * @param matrix - The matrix to copy from.\n     * @returns this\n     */\n    public copyFrom(matrix: Matrix): this\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * check to see if two matrices are the same\n     * @param matrix - The matrix to compare to.\n     */\n    public equals(matrix: Matrix)\n    {\n        return matrix.a === this.a && matrix.b === this.b\n            && matrix.c === this.c && matrix.d === this.d\n            && matrix.tx === this.tx && matrix.ty === this.ty;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n    }\n    // #endif\n\n    /**\n     * A default (identity) matrix.\n     *\n     * This is a shared object, if you want to modify it consider creating a new `Matrix`\n     * @readonly\n     */\n    static get IDENTITY(): Readonly<Matrix>\n    {\n        return identityMatrix.identity();\n    }\n\n    /**\n     * A static Matrix that can be used to avoid creating new objects.\n     * Will always ensure the matrix is reset to identity when requested.\n     * Use this object for fast but temporary calculations, as it may be mutated later on.\n     * This is a different object to the `IDENTITY` object and so can be modified without changing `IDENTITY`.\n     * @readonly\n     */\n    static get shared(): Matrix\n    {\n        return tempMatrix.identity();\n    }\n}\n\nconst tempMatrix = new Matrix();\nconst identityMatrix = new Matrix();\n",null,"/**\n * Two Pi.\n * @static\n * @member {number}\n * @memberof maths\n */\nexport const PI_2 = Math.PI * 2;\n\n/**\n * Conversion factor for converting radians to degrees.\n * @static\n * @member {number} RAD_TO_DEG\n * @memberof maths\n */\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * Conversion factor for converting degrees to radians.\n * @static\n * @member {number}\n * @memberof maths\n */\nexport const DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n * @memberof maths\n */\nexport type SHAPE_PRIMITIVE =\n    | 'polygon'\n    | 'rectangle'\n    | 'circle'\n    | 'ellipse'\n    | 'triangle'\n    | 'roundedRectangle';\n\n/**\n * The `maths` folder contains utility classes and functions for mathematical operations used throughout the project.\n * This includes constants such as conversion factors for radians and degrees, as well as shapes such as polygons,\n * rectangles, circles, ellipses, triangles, and rounded rectangles.\n * ```js\n * import { RAD_TO_DEG, Circle } from 'pixi.js';\n *\n * // Convert 180 degrees to radians\n * const radians = 180 * RAD_TO_DEG;\n *\n * // test if a point is inside a circle\n * const isPointInCircle = new Circle(0, 0, 10).contains(0, 0); // true\n * ```\n * @namespace maths\n */\n",null,"/* eslint-disable @typescript-eslint/no-use-before-define */\nimport type { PointData } from './PointData';\nimport type { PointLike } from './PointLike';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Point extends PixiMixins.Point { }\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n * <br/>\n * Many Pixi functions accept the `PointData` type as an alternative to `Point`,\n * which only requires `x` and `y` properties.\n * @class\n * @implements {PointLike}\n * @memberof maths\n */\nexport class Point implements PointLike\n{\n    /** Position of the point on the x axis */\n    public x = 0;\n    /** Position of the point on the y axis */\n    public y = 0;\n\n    /**\n     * Creates a new `Point`\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Creates a clone of this point\n     * @returns A clone of this point\n     */\n    public clone(): Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies `x` and `y` from the given point into this point\n     * @param p - The point to copy from\n     * @returns The point instance itself\n     */\n    public copyFrom(p: PointData): this\n    {\n        this.set(p.x, p.y);\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into the given point (`p`).\n     * @param p - The point to copy to. Can be any of type that is or extends `PointData`\n     * @returns The point (`p`) with values updated\n     */\n    public copyTo<T extends PointLike>(p: T): T\n    {\n        p.set(this.x, this.y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    public equals(p: PointData): boolean\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the `x` axis\n     * @param {number} [y=x] - position of the point on the `y` axis\n     * @returns The point instance itself\n     */\n    public set(x = 0, y: number = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Point x=${this.x} y=${this.y}]`;\n    }\n    // #endif\n\n    /**\n     * A static Point object with `x` and `y` values of `0`. Can be used to avoid creating new objects multiple times.\n     * @readonly\n     */\n    static get shared(): Point\n    {\n        tempPoint.x = 0;\n        tempPoint.y = 0;\n\n        return tempPoint;\n    }\n}\n\nconst tempPoint = new Point();\n",null,"import type { PointData } from './PointData';\nimport type { PointLike } from './PointLike';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ObservablePoint extends PixiMixins.ObservablePoint { }\n\n/**\n * Observer used to listen for observable point changes.\n * @memberof maths\n */\nexport interface Observer<T>\n{\n    /** Callback to call when the point has updated. */\n    _onUpdate: (point?: T) => void;\n}\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers the `onUpdate` method on an observer when the point's position is changed.\n * @memberof maths\n */\nexport class ObservablePoint implements PointLike\n{\n    /** @ignore */\n    public _x: number;\n    /** @ignore */\n    public _y: number;\n\n    /** This object used to call the `onUpdate` callback when the point changes. */\n    private readonly _observer: Observer<ObservablePoint>;\n\n    /**\n     * Creates a new `ObservablePoint`\n     * @param observer - Observer to pass to listen for change events.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(observer: Observer<ObservablePoint>, x?: number, y?: number)\n    {\n        this._x = x || 0;\n        this._y = y || 0;\n\n        this._observer = observer;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * @param observer - Optional observer to pass to the new observable point.\n     * @returns a copy of this observable point\n     */\n    public clone(observer?: Observer<ObservablePoint>): ObservablePoint\n    {\n        return new ObservablePoint(observer ?? this._observer, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns The observable point instance itself\n     */\n    public set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this._observer._onUpdate(this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point (`p`)\n     * @param p - The point to copy from. Can be any of type that is or extends `PointData`\n     * @returns The observable point instance itself\n     */\n    public copyFrom(p: PointData): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this._observer._onUpdate(this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into that of the given point (`p`)\n     * @param p - The point to copy to. Can be any of type that is or extends `PointData`\n     * @returns The point (`p`) with values updated\n     */\n    public copyTo<T extends PointLike>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    public equals(p: PointData): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:ObservablePoint x=${0} y=${0} scope=${this._observer}]`;\n    }\n    // #endif\n\n    /** Position of the observable point on the x axis. */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this._observer._onUpdate(this);\n        }\n    }\n\n    /** Position of the observable point on the y axis. */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this._observer._onUpdate(this);\n        }\n    }\n}\n",null,"const uidCache: Record<string, number> = {\n    default: -1,\n};\n\ntype UIDNames =\n    | 'default'\n    | 'resource'\n    | 'texture'\n    | 'textureSource'\n    | 'textureResource'\n    | 'batcher' //\n    | 'graphicsContext' //\n    | 'graphicsView' //\n    | 'graphicsPath' //\n    | 'fillGradient' //\n    | 'fillPattern' //\n    | 'meshView' //\n    | 'renderable' //\n    | 'buffer' //\n    | 'bufferResource' //\n    | 'geometry'\n    | 'instructionSet' //\n    | 'renderTarget' //\n    | 'uniform' //\n    | 'spriteView' //\n    | 'textView' //\n    | 'tilingSpriteView'; // ;\n\n/**\n * Gets the next unique identifier\n * @param name - The name of the identifier.\n * @function uid\n * @returns {number} The next unique identifier to use.\n * @memberof utils\n */\nexport function uid(name: UIDNames = 'default'): number\n{\n    if (uidCache[name] === undefined)\n    {\n        uidCache[name] = -1;\n    }\n\n    return ++uidCache[name];\n}\n\n/** Resets the next unique identifier to 0. This is used for some tests, dont touch or things WILL explode :) */\nexport function resetUids(): void\n{\n    for (const key in uidCache)\n    {\n        delete uidCache[key];\n    }\n}\n",null,"import type { Dict } from '../types';\n\n// A map of warning messages already fired\nconst warnings: Dict<boolean> = {};\n\n/**\n * deprecation name for version 8.0.0\n * @ignore\n */\nexport const v8_0_0 = '8.0.0';\n\n/**\n * Helper for warning developers about deprecated features & settings.\n * A stack track for warnings is given; useful for tracking-down where\n * deprecated methods/properties/classes are being used within the code.\n * @memberof utils\n * @ignore\n * @function deprecation\n * @param {string} version - The version where the feature became deprecated\n * @param {string} message - Message should include what is deprecated, where, and the new solution\n * @param {number} [ignoreDepth=3] - The number of steps to ignore at the top of the error stack\n *        this is mostly to ignore internal deprecation calls.\n */\nexport function deprecation(version: string, message: string, ignoreDepth = 3): void\n{\n    // Ignore duplicat\n    if (warnings[message])\n    {\n        return;\n    }\n\n    /* eslint-disable no-console */\n    let stack = new Error().stack;\n\n    // Handle IE < 10 and Safari < 6\n    if (typeof stack === 'undefined')\n    {\n        console.warn('PixiJS Deprecation Warning: ', `${message}\\nDeprecated since v${version}`);\n    }\n    else\n    {\n        // chop off the stack trace which includes PixiJS internal calls\n        stack = stack.split('\\n').splice(ignoreDepth).join('\\n');\n\n        if (console.groupCollapsed)\n        {\n            console.groupCollapsed(\n                '%cPixiJS Deprecation Warning: %c%s',\n                'color:#614108;background:#fffbe6',\n                'font-weight:normal;color:#614108;background:#fffbe6',\n                `${message}\\nDeprecated since v${version}`\n            );\n            console.warn(stack);\n            console.groupEnd();\n        }\n        else\n        {\n            console.warn('PixiJS Deprecation Warning: ', `${message}\\nDeprecated since v${version}`);\n            console.warn(stack);\n        }\n    }\n    /* eslint-enable no-console */\n\n    warnings[message] = true;\n}\n",null,"import { removeItems } from '../../../utils/data/removeItems';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Container } from '../Container';\n\nexport interface ChildrenHelperMixin\n{\n    allowChildren: boolean;\n    addChild<U extends Container[]>(...children: U): U[0];\n    removeChild<U extends Container[]>(...children: U): U[0];\n    removeChildren(beginIndex?: number, endIndex?: number): Container[];\n    removeChildAt<U extends Container>(index: number): U;\n    getChildAt<U extends Container>(index: number): U;\n    setChildIndex(child: Container, index: number): void;\n    getChildIndex(child: Container): number;\n    addChildAt<U extends Container>(child: U, index: number): U;\n    swapChildren<U extends Container>(child: U, child2: U): void;\n    removeFromParent(): void;\n}\n\nexport const childrenHelperMixin: Partial<Container> = {\n\n    allowChildren: true,\n\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     * @param beginIndex - The beginning position.\n     * @param endIndex - The ending position. Default value is size of the container.\n     * @returns - List of removed children\n     * @memberof scene.Container#\n     */\n    removeChildren(beginIndex = 0, endIndex?: number): Container[]\n    {\n        const end = endIndex ?? this.children.length;\n        const range = end - beginIndex;\n        const removed: Container[] = [];\n\n        if (range > 0 && range <= end)\n        {\n            for (let i = end - 1; i >= beginIndex; i--)\n            {\n                const child = this.children[i];\n\n                if (!child) continue;\n\n                if (this.renderGroup)\n                {\n                    this.renderGroup.removeChild(child);\n                }\n\n                removed.push(child);\n                child.parent = null;\n            }\n\n            removeItems(this.children, beginIndex, end);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                this.emit('childRemoved', removed[i], this, i);\n                removed[i].emit('removed', this);\n            }\n\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0)\n        {\n            return removed;\n        }\n\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    },\n\n    /**\n     * Removes a child from the specified index position.\n     * @param index - The index to get the child from\n     * @returns The child that was removed.\n     * @memberof scene.Container#\n     */\n    removeChildAt<U extends Container>(index: number): U\n    {\n        const child = this.getChildAt(index);\n\n        return this.removeChild(child) as U;\n    },\n\n    /**\n     * Returns the child at the specified index\n     * @param index - The index to get the child at\n     * @returns - The child at the given index, if any.\n     * @memberof scene.Container#\n     */\n    getChildAt<U extends Container>(index: number): U\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\n        }\n\n        return this.children[index] as U;\n    },\n\n    /**\n     * Changes the position of an existing child in the container container\n     * @param child - The child Container instance for which you want to change the index number\n     * @param index - The resulting index number for the child container\n     * @memberof scene.Container#\n     */\n    setChildIndex(child: Container, index: number): void\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        this.getChildIndex(child); // check if child exists\n        this.addChildAt(child, index);\n    },\n\n    /**\n     * Returns the index position of a child Container instance\n     * @param child - The Container instance to identify\n     * @returns - The index position of the child container to identify\n     * @memberof scene.Container#\n     */\n    getChildIndex(child: Container): number\n    {\n        const index = this.children.indexOf(child);\n\n        if (index === -1)\n        {\n            throw new Error('The supplied Container must be a child of the caller');\n        }\n\n        return index;\n    },\n\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown.\n     * If the child is already in this container, it will be moved to the specified index.\n     * @param {Container} child - The child to add.\n     * @param {number} index - The absolute index where the child will be positioned at the end of the operation.\n     * @returns {Container} The child that was added.\n     * @memberof scene.Container#\n     */\n    addChildAt<U extends Container>(child: U, index: number): U\n    {\n        // #if _DEBUG\n        if (!this.allowChildren)\n        {\n            deprecation(v8_0_0, 'addChildAt: Only Containers will be allowed to add children in v8.0.0');\n        }\n        // #endif\n\n        const { children } = this;\n\n        if (index < 0 || index > children.length)\n        {\n            throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${children.length}`);\n        }\n\n        // TODO - check if child is already in the list?\n        // we should be able to optimise this!\n\n        if (child.parent)\n        {\n            const currentIndex = child.parent.children.indexOf(child);\n\n            // If this child is in the container and in the same position, do nothing\n            if (child.parent === this && currentIndex === index)\n            {\n                return child;\n            }\n\n            if (currentIndex !== -1)\n            {\n                child.parent.children.splice(currentIndex, 1);\n            }\n        }\n\n        if (index === children.length)\n        {\n            children.push(child);\n        }\n        else\n        {\n            children.splice(index, 0, child);\n        }\n\n        child.parent = this;\n        child.didChange = true;\n        child.didViewUpdate = false;\n        child._updateFlags = 0b1111;\n\n        if (this.renderGroup)\n        {\n            this.renderGroup.addChild(child);\n        }\n\n        if (this.sortableChildren) this.sortDirty = true;\n\n        this.emit('childAdded', child, this, index);\n        child.emit('added', this);\n\n        return child;\n    },\n    /**\n     * Swaps the position of 2 Containers within this container.\n     * @param child - First container to swap\n     * @param child2 - Second container to swap\n     */\n    swapChildren<U extends Container>(child: U, child2: U): void\n    {\n        if (child === child2)\n        {\n            return;\n        }\n\n        const index1 = this.getChildIndex(child);\n        const index2 = this.getChildIndex(child2);\n\n        this.children[index1] = child2;\n        this.children[index2] = child;\n    },\n    /**\n     * Remove the Container from its parent Container. If the Container has no parent, do nothing.\n     * @memberof scene.Container#\n     */\n    removeFromParent()\n    {\n        this.parent?.removeChild(this);\n    }\n} as Container;\n",null,"/**\n * Remove items from a javascript array without generating garbage\n * @function removeItems\n * @memberof utils\n * @param {Array<any>} arr - Array to remove elements from\n * @param {number} startIdx - starting index\n * @param {number} removeCount - how many to remove\n */\nexport function removeItems(arr: any[], startIdx: number, removeCount: number): void\n{\n    const length = arr.length;\n    let i;\n\n    if (startIdx >= length || removeCount === 0)\n    {\n        return;\n    }\n\n    removeCount = (startIdx + removeCount > length ? length - startIdx : removeCount);\n\n    const len = length - removeCount;\n\n    for (i = startIdx; i < len; ++i)\n    {\n        arr[i] = arr[i + removeCount];\n    }\n\n    arr.length = len;\n}\n",null,"import { FilterEffect } from '../../../filters/FilterEffect';\nimport { MaskEffectManager } from '../../../rendering/mask/MaskEffectManager';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\n\nimport type { Filter } from '../../../filters/Filter';\nimport type { Rectangle } from '../../../maths/shapes/Rectangle';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../Container';\nimport type { Effect } from '../Effect';\n\nexport interface EffectsMixinConstructor\n{\n    mask?: number | Container | null;\n    filters?: Filter | Filter[];\n}\nexport interface EffectsMixin extends Required<EffectsMixinConstructor>\n{\n    _mask?: {mask: unknown, effect: Effect};\n    _filters?: {\n        filters: readonly Filter[],\n        effect: FilterEffect\n        filterArea?: Rectangle,\n    },\n    filterArea?: Rectangle,\n    effects?: Effect[];\n    addEffect(effect: Effect): void;\n    removeEffect(effect: Effect): void;\n}\n\nexport const effectsMixin: Partial<Container> = {\n    _mask: null,\n    _filters: null,\n\n    /**\n     * @todo Needs docs.\n     * @memberof scene.Container#\n     * @type {Array<Effect>}\n     */\n    effects: [],\n\n    /**\n     * @todo Needs docs.\n     * @param effect - The effect to add.\n     * @memberof scene.Container#\n     * @ignore\n     */\n    addEffect(effect: Effect)\n    {\n        const index = this.effects.indexOf(effect);\n\n        if (index !== -1) return; // already exists!\n\n        this.effects.push(effect);\n\n        this.effects.sort((a, b) => a.priority - b.priority);\n\n        if (this.renderGroup)\n        {\n            this.renderGroup.structureDidChange = true;\n        }\n\n        this._updateIsSimple();\n    },\n    /**\n     * @todo Needs docs.\n     * @param effect - The effect to remove.\n     * @memberof scene.Container#\n     * @ignore\n     */\n    removeEffect(effect: Effect)\n    {\n        const index = this.effects.indexOf(effect);\n\n        if (index === -1) return; // already exists!\n\n        this.effects.splice(index, 1);\n\n        if (!this.isRenderGroupRoot && this.renderGroup)\n        {\n            this.renderGroup.structureDidChange = true;\n        }\n\n        this._updateIsSimple();\n    },\n\n    set mask(value: number | Container | null)\n    {\n        this._mask ||= { mask: null, effect: null };\n\n        if (this._mask.mask === value) return;\n\n        if (this._mask.effect)\n        {\n            this.removeEffect(this._mask.effect);\n\n            MaskEffectManager.returnMaskEffect(this._mask.effect);\n\n            this._mask.effect = null;\n        }\n\n        this._mask.mask = value;\n\n        if (value === null || value === undefined) return;\n\n        const effect = MaskEffectManager.getMaskEffect(value);\n\n        this._mask.effect = effect;\n\n        this.addEffect(effect);\n    },\n\n    /**\n     * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n     * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n     * {@link Graphics} or a {@link Sprite} object. This allows for much faster masking in canvas as it\n     * utilities shape clipping. Furthermore, a mask of an object must be in the subtree of its parent.\n     * Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.\n     * To remove a mask, set this property to `null`.\n     *\n     * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n     * @example\n     * import { Graphics, Sprite } from 'pixi.js';\n     *\n     * const graphics = new Graphics();\n     * graphics.beginFill(0xFF3300);\n     * graphics.drawRect(50, 250, 100, 100);\n     * graphics.endFill();\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.mask = graphics;\n     * @memberof scene.Container#\n     */\n    get mask(): unknown\n    {\n        return this._mask?.mask;\n    },\n\n    set filters(value: Filter | Filter[] | null | undefined)\n    {\n        if (!Array.isArray(value) && value) value = [value];\n\n        // Ignore the Filter type\n        value = value as Filter[] | null | undefined;\n\n        // by reusing the same effect.. rather than adding and removing from the pool!\n        this._filters ||= { filters: null, effect: null, filterArea: null };\n\n        const hasFilters = value?.length > 0;\n        const didChange = (this._filters.effect && !hasFilters) || (!this._filters.effect && hasFilters);\n\n        // Clone the filters array so we don't freeze the user-input\n        value = Array.isArray(value) ? value.slice(0) : value;\n\n        // Ensure filters are immutable via filters getter\n        this._filters.filters = Object.freeze(value);\n\n        if (didChange)\n        {\n            if (hasFilters)\n            {\n                const effect = BigPool.get(FilterEffect);\n\n                this._filters.effect = effect;\n                this.addEffect(effect);\n            }\n            else\n            {\n                const effect = this._filters.effect;\n\n                this.removeEffect(effect);\n\n                effect.filterArea = null;\n                effect.filters = null;\n\n                this._filters.effect = null;\n                BigPool.return(effect as PoolItem);\n            }\n        }\n\n        if (hasFilters)\n        {\n            this._filters.effect.filters = value as Filter[];\n            this._filters.effect.filterArea = this.filterArea;\n        }\n    },\n\n    /**\n     * Sets the filters for the displayObject.\n     * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * To remove filters simply set this property to `'null'`.\n     * @memberof scene.Container#\n     */\n    get filters(): readonly Filter[]\n    {\n        return this._filters?.filters;\n    },\n\n    set filterArea(value: Rectangle)\n    {\n        this._filters ||= { filters: null, effect: null, filterArea: null };\n\n        this._filters.filterArea = value;\n    },\n\n    /**\n     * The area the filter is applied to. This is used as more of an optimization\n     * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n     *\n     * Also works as an interaction mask.\n     * @memberof scene.Container#\n     */\n    get filterArea(): Rectangle\n    {\n        return this._filters?.filterArea;\n    },\n\n} as Container;\n",null,"import type { Rectangle } from '../maths/shapes/Rectangle';\nimport type { Effect } from '../scene/container/Effect';\nimport type { Filter } from './Filter';\n\nexport class FilterEffect implements Effect\n{\n    public filters: Filter[];\n    public filterArea?: Rectangle;\n\n    public pipe = 'filter';\n    public priority = 1;\n\n    constructor(options?: {filters: Filter[], filterArea?: Rectangle})\n    {\n        this.filters = options?.filters;\n        this.filterArea = options?.filterArea;\n    }\n\n    public destroy(): void\n    {\n        for (let i = 0; i < this.filters.length; i++)\n        {\n            this.filters[i].destroy();\n        }\n\n        this.filters = null;\n        this.filterArea = null;\n    }\n}\n",null,"import { extensions, ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\n\nimport type { Effect, EffectConstructor } from '../../scene/container/Effect';\nimport type { PoolItem, PoolItemConstructor } from '../../utils/pool/Pool';\n\ninterface MaskConversionTest\n{\n    test: (item: any) => boolean;\n    maskClass: new (item: any) => Effect & PoolItem;\n}\n\n/**\n * A class that manages the conversion of masks to mask effects.\n * @memberof rendering\n * @ignore\n */\nexport class MaskEffectManagerClass\n{\n    /**\n     * @private\n     */\n    public readonly _effectClasses: EffectConstructor[] = [];\n    private readonly _tests: MaskConversionTest[] = [];\n    private _initialized = false;\n\n    public init()\n    {\n        if (this._initialized) return;\n\n        this._initialized = true;\n\n        this._effectClasses.forEach((test) =>\n        {\n            this.add({\n                test: test.test,\n                maskClass: test\n            });\n        });\n    }\n\n    public add(test: MaskConversionTest)\n    {\n        this._tests.push(test);\n    }\n\n    public getMaskEffect(item: any): Effect\n    {\n        if (!this._initialized) this.init();\n\n        for (let i = 0; i < this._tests.length; i++)\n        {\n            const test = this._tests[i];\n\n            if (test.test(item))\n            {\n                return BigPool.get(test.maskClass as PoolItemConstructor<Effect & PoolItem>, item);\n            }\n        }\n\n        return item;\n    }\n\n    public returnMaskEffect(effect: Effect & PoolItem)\n    {\n        BigPool.return(effect);\n    }\n}\n\nexport const MaskEffectManager = new MaskEffectManagerClass();\n\n// Handle registration of extensions\nextensions\n    .handleByList(ExtensionType.MaskEffect, MaskEffectManager._effectClasses);\n",null,"import { Pool } from './Pool';\n\nimport type { PoolItem, PoolItemConstructor } from './Pool';\n\n/**\n * A type alias for a constructor of a Pool.\n * @template T The type of items in the pool. Must extend PoolItem.\n * @memberof utils\n */\nexport type PoolConstructor<T extends PoolItem> = new () => Pool<T>;\n\n/**\n * A group of pools that can be used to store objects of different types.\n * @memberof utils\n */\nexport class PoolGroupClass\n{\n    /**\n     * A map to store the pools by their class type.\n     * @private\n     */\n    private readonly _poolsByClass: Map<PoolItemConstructor<PoolItem>, Pool<PoolItem>> = new Map();\n\n    /**\n     * Prepopulates a specific pool with a given number of items.\n     * @template T The type of items in the pool. Must extend PoolItem.\n     * @param {PoolItemConstructor<T>} Class - The constructor of the items in the pool.\n     * @param {number} total - The number of items to add to the pool.\n     */\n    public prepopulate<T extends PoolItem>(Class: PoolItemConstructor<T>, total: number): void\n    {\n        const classPool = this.getPool(Class);\n\n        classPool.prepopulate(total);\n    }\n\n    /**\n     * Gets an item from a specific pool.\n     * @template T The type of items in the pool. Must extend PoolItem.\n     * @param {PoolItemConstructor<T>} Class - The constructor of the items in the pool.\n     * @param {unknown} [data] - Optional data to pass to the item's constructor.\n     * @returns {T} The item from the pool.\n     */\n    public get<T extends PoolItem>(Class: PoolItemConstructor<T>, data?: unknown): T\n    {\n        const pool = this.getPool(Class);\n\n        return pool.get(data) as T;\n    }\n\n    /**\n     * Returns an item to its respective pool.\n     * @param {PoolItem} item - The item to return to the pool.\n     */\n    public return(item: PoolItem): void\n    {\n        const pool = this.getPool(item.constructor as PoolItemConstructor<PoolItem>);\n\n        pool.return(item);\n    }\n\n    /**\n     * Gets a specific pool based on the class type.\n     * @template T The type of items in the pool. Must extend PoolItem.\n     * @param {PoolItemConstructor<T>} ClassType - The constructor of the items in the pool.\n     * @returns {Pool<T>} The pool of the given class type.\n     */\n    public getPool<T extends PoolItem>(ClassType: PoolItemConstructor<T>): Pool<T>\n    {\n        if (!this._poolsByClass.has(ClassType))\n        {\n            this._poolsByClass.set(ClassType, new Pool(ClassType));\n        }\n\n        return this._poolsByClass.get(ClassType) as Pool<T>;\n    }\n\n    /** gets the usage stats of each pool in the system */\n    public stats(): Record<string, {free: number; used: number; size: number}>\n    {\n        const stats = {} as Record<string, {free: number; used: number; size: number}>;\n\n        this._poolsByClass.forEach((pool) =>\n        {\n            // TODO: maybe we should allow the name to be set when `createEntity` is called\n            const name = stats[pool._classType.name]\n                ? pool._classType.name + (pool._classType as any).ID : pool._classType.name;\n\n            stats[name] = {\n                free: pool.totalFree,\n                used: pool.totalUsed,\n                size: pool.totalSize,\n            };\n        });\n\n        return stats;\n    }\n}\n\nexport const BigPool = new PoolGroupClass();\n",null,"/**\n * A generic class for managing a pool of items.\n * @template T The type of items in the pool. Must implement {@link utils.PoolItem}.\n * @memberof utils\n */\nexport class Pool<T extends PoolItem>\n{\n    public readonly _classType: PoolItemConstructor<T>;\n    private readonly _pool: T[] = [];\n    private _count = 0;\n    private _index = 0;\n\n    /**\n     * Constructs a new Pool.\n     * @param ClassType - The constructor of the items in the pool.\n     * @param {number} [initialSize] - The initial size of the pool.\n     */\n    constructor(ClassType: PoolItemConstructor<T>, initialSize?: number)\n    {\n        this._classType = ClassType;\n\n        if (initialSize)\n        {\n            this.prepopulate(initialSize);\n        }\n    }\n\n    /**\n     * Prepopulates the pool with a given number of items.\n     * @param total - The number of items to add to the pool.\n     */\n    public prepopulate(total: number): void\n    {\n        for (let i = 0; i < total; i++)\n        {\n            this._pool[this._index++] = new this._classType();\n        }\n\n        this._count += total;\n    }\n\n    /**\n     * Gets an item from the pool. Calls the item's `init` method if it exists.\n     * If there are no items left in the pool, a new one will be created.\n     * @param {unknown} [data] - Optional data to pass to the item's constructor.\n     * @returns {T} The item from the pool.\n     */\n    public get(data?: unknown): T\n    {\n        let item;\n\n        if (this._index > 0)\n        {\n            item = this._pool[--this._index];\n        }\n        else\n        {\n            item = new this._classType();\n        }\n\n        item.init?.(data);\n\n        return item;\n    }\n\n    /**\n     * Returns an item to the pool. Calls the item's `reset` method if it exists.\n     * @param {T} item - The item to return to the pool.\n     */\n    public return(item: T): void\n    {\n        item.reset?.();\n\n        this._pool[this._index++] = item;\n    }\n\n    /**\n     * Gets the number of items in the pool.\n     * @readonly\n     * @member {number}\n     */\n    get totalSize(): number\n    {\n        return this._count;\n    }\n\n    /**\n     * Gets the number of items in the pool that are free to use without needing to create more.\n     * @readonly\n     * @member {number}\n     */\n    get totalFree(): number\n    {\n        return this._index;\n    }\n\n    /**\n     * Gets the number of items in the pool that are currently in use.\n     * @readonly\n     * @member {number}\n     */\n    get totalUsed(): number\n    {\n        return this._count - this._index;\n    }\n}\n\n/**\n * An object that can be stored in a {@link utils.Pool}.\n * @memberof utils\n */\nexport type PoolItem = {\n    init?: (data?: any) => void;\n    reset?: () => void;\n    [key: string]: any;\n};\n\n/**\n * The constructor of an object that can be stored in a {@link utils.Pool}.\n * @typeParam K - The type of the object that can be stored in a {@link utils.Pool}.\n * @memberof utils\n */\nexport type PoolItemConstructor<K extends PoolItem> = new () => K;\n",null,"import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Container } from '../Container';\n\nexport interface FindMixinConstructor\n{\n    label?: string;\n}\nexport interface FindMixin extends Required<FindMixinConstructor>\n{\n    /**\n     * @deprecated since 8.0.0\n     * @see Container#label\n     */\n    name: string;\n    getChildByName(label: RegExp | string, deep?: boolean): Container | null;\n    getChildByLabel(label: RegExp | string, deep?: boolean): Container | null;\n    getChildrenByLabel(label: RegExp | string, deep?: boolean, out?: Container[]): Container[];\n}\n\nexport const findMixin: Partial<Container> = {\n    /**\n     * The instance label of the object.\n     * @memberof scene.Container#\n     * @member {string} label\n     */\n    label: null,\n\n    /**\n     * The instance name of the object.\n     * @deprecated since 8.0.0\n     * @see scene.Container#label\n     * @member {string} name\n     * @memberof scene.Container#\n     */\n    get name(): string\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Container.name property has been removed, use Container.label instead');\n        // #endif\n\n        return this.label;\n    },\n    set name(value: string)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Container.name property has been removed, use Container.label instead');\n        // #endif\n\n        this.label = value;\n    },\n\n    /**\n     * @method getChildByName\n     * @deprecated since 8.0.0\n     * @param {string} name - Instance name.\n     * @param {boolean}[deep=false] - Whether to search recursively\n     * @returns {Container} The child with the specified name.\n     * @see scene.Container#getChildByLabel\n     * @memberof scene.Container#\n     */\n    getChildByName(name: string, deep = false): Container | null\n    {\n        return this.getChildByLabel(name, deep);\n    },\n    /**\n     * Returns the first child in the container with the specified label.\n     *\n     * Recursive searches are done in a pre-order traversal.\n     * @memberof scene.Container#\n     * @param {string|RegExp} label - Instance label.\n     * @param {boolean}[deep=false] - Whether to search recursively\n     * @returns {Container} The child with the specified label.\n     */\n    getChildByLabel(label: string | RegExp, deep = false): Container | null\n    {\n        const children = this.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            if (child.label === label || (label instanceof RegExp && label.test(child.label))) return child;\n        }\n\n        if (deep)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                const child = children[i];\n                const found = child.getChildByLabel(label, true);\n\n                if (found)\n                {\n                    return found;\n                }\n            }\n        }\n\n        return null;\n    },\n\n    /**\n     * Returns all children in the container with the specified label.\n     * @memberof scene.Container#\n     * @param {string|RegExp} label - Instance label.\n     * @param {boolean}[deep=false] - Whether to search recursively\n     * @param {Container[]} [out=[]] - The array to store matching children in.\n     * @returns {Container[]} An array of children with the specified label.\n     */\n    getChildrenByLabel(label: string | RegExp, deep = false, out = []): Container[]\n    {\n        const children = this.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            if (child.label === label || (label instanceof RegExp && label.test(child.label)))\n            {\n                out.push(child);\n            }\n        }\n\n        if (deep)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                children[i].getChildrenByLabel(label, true, out);\n            }\n        }\n\n        return out;\n    },\n} as Container;\n",null,"import { Matrix } from '../../../maths/matrix/Matrix';\nimport { Bounds } from '../bounds/Bounds';\nimport { getGlobalBounds } from '../bounds/getGlobalBounds';\nimport { getLocalBounds } from '../bounds/getLocalBounds';\nimport { checkChildrenDidChange } from '../utils/checkChildrenDidChange';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { Container } from '../Container';\n\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport interface MeasureMixinConstructor\n{\n    width?: number;\n    height?: number;\n}\nexport interface MeasureMixin extends Required<MeasureMixinConstructor>\n{\n    getSize(out?: Size): Size;\n    setSize(width: number, height?: number): void;\n    setSize(value: Optional<Size, 'height'>): void;\n    getLocalBounds(bounds?: Bounds): Bounds;\n    getBounds(skipUpdate?: boolean, bounds?: Bounds): Bounds;\n    _localBoundsCacheData: LocalBoundsCacheData;\n    _localBoundsCacheId: number;\n    _setWidth(width: number, localWidth: number): void;\n    _setHeight(height: number, localHeight: number): void;\n}\n\ninterface LocalBoundsCacheData\n{\n    data: number[];\n    index: number;\n    didChange: boolean;\n    localBounds: Bounds;\n}\n\nconst tempMatrix = new Matrix();\n\nexport const measureMixin: Partial<Container> = {\n\n    _localBoundsCacheId: -1,\n    _localBoundsCacheData: null,\n\n    _setWidth(value: number, localWidth: number)\n    {\n        const sign = Math.sign(this.scale.x) || 1;\n\n        if (localWidth !== 0)\n        {\n            this.scale.x = (value / localWidth) * sign;\n        }\n        else\n        {\n            this.scale.x = sign;\n        }\n    },\n\n    _setHeight(value: number, localHeight: number)\n    {\n        const sign = Math.sign(this.scale.y) || 1;\n\n        if (localHeight !== 0)\n        {\n            this.scale.y = (value / localHeight) * sign;\n        }\n        else\n        {\n            this.scale.y = sign;\n        }\n    },\n\n    /**\n     * Retrieves the local bounds of the container as a Bounds object.\n     * @returns - The bounding area.\n     * @memberof scene.Container#\n     */\n    getLocalBounds(): Bounds\n    {\n        if (!this._localBoundsCacheData)\n        {\n            this._localBoundsCacheData = {\n                data: [],\n                index: 1,\n                didChange: false,\n                localBounds: new Bounds()\n            };\n        }\n\n        const localBoundsCacheData = this._localBoundsCacheData;\n\n        localBoundsCacheData.index = 1;\n        localBoundsCacheData.didChange = false;\n\n        if (localBoundsCacheData.data[0] !== this._didChangeId >> 12)\n        {\n            localBoundsCacheData.didChange = true;\n            localBoundsCacheData.data[0] = this._didChangeId >> 12;\n        }\n\n        checkChildrenDidChange(this, localBoundsCacheData);\n\n        if (localBoundsCacheData.didChange)\n        {\n            getLocalBounds(this, localBoundsCacheData.localBounds, tempMatrix);\n        }\n\n        return localBoundsCacheData.localBounds;\n    },\n\n    /**\n     * Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link Rectangle}.\n     * @param skipUpdate - Setting to `true` will stop the transforms of the scene graph from\n     *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n     *  nice performance boost.\n     * @param bounds - Optional bounds to store the result of the bounds calculation.\n     * @returns - The minimum axis-aligned rectangle in world space that fits around this object.\n     * @memberof scene.Container#\n     */\n    getBounds(skipUpdate?: boolean, bounds?: Bounds): Bounds\n    {\n        return getGlobalBounds(this, skipUpdate, bounds || new Bounds());\n    },\n} as Container;\n",null,"import { Matrix } from '../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../maths/shapes/Rectangle';\n\n/**\n * Simple bounds implementation instead of more ambiguous [number, number, number, number]\n * @memberof rendering\n */\nexport interface BoundsData\n{\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\n\nconst defaultMatrix = new Matrix();\n\n// TODO optimisations\n// 1 - get rectangle could use a dirty flag, rather than setting the data each time is called\n// 2- getFrame ALWAYS assumes a matrix, could be optimised to avoid the matrix calculation if not needed\n\n/**\n * A representation of an AABB bounding box.\n * @memberof rendering\n */\nexport class Bounds\n{\n    /** @default Infinity */\n    public minX = Infinity;\n\n    /** @default Infinity */\n    public minY = Infinity;\n\n    /** @default -Infinity */\n    public maxX = -Infinity;\n\n    /** @default -Infinity */\n    public maxY = -Infinity;\n\n    public matrix = defaultMatrix;\n\n    private _rectangle: Rectangle;\n\n    constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity)\n    {\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Checks if bounds are empty.\n     * @returns - True if empty.\n     */\n    public isEmpty(): boolean\n    {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    }\n\n    /** The bounding rectangle of the bounds. */\n    get rectangle(): Rectangle\n    {\n        if (!this._rectangle)\n        {\n            this._rectangle = new Rectangle();\n        }\n\n        const rectangle = this._rectangle;\n\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            rectangle.x = 0;\n            rectangle.y = 0;\n            rectangle.width = 0;\n            rectangle.height = 0;\n        }\n        else\n        {\n            rectangle.copyFromBounds(this);\n        }\n\n        return rectangle;\n    }\n\n    /** Clears the bounds and resets. */\n    public clear(): this\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n\n        this.matrix = defaultMatrix;\n\n        return this;\n    }\n\n    /**\n     * Sets the bounds.\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     */\n    public set(x0: number, y0: number, x1: number, y1: number)\n    {\n        this.minX = x0;\n        this.minY = y0;\n        this.maxX = x1;\n        this.maxY = y1;\n    }\n\n    /**\n     * Adds sprite frame\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     * @param matrix\n     */\n    public addFrame(x0: number, y0: number, x1: number, y1: number, matrix?: Matrix): void\n    {\n        matrix ||= this.matrix;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds a rectangle to the bounds.\n     * @param rect - The rectangle to be added.\n     * @param matrix - The matrix to apply to the bounds.\n     */\n    public addRect(rect: Rectangle, matrix?: Matrix)\n    {\n        this.addFrame(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, matrix);\n    }\n\n    /**\n     * Adds other {@link Bounds}.\n     * @param bounds - The Bounds to be added\n     * @param matrix\n     */\n    public addBounds(bounds: BoundsData, matrix?: Matrix)\n    {\n        this.addFrame(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY, matrix);\n    }\n\n    /**\n     * Adds other Bounds, masked with Bounds.\n     * @param mask - The Bounds to be added.\n     */\n    public addBoundsMask(mask: Bounds): void\n    {\n        this.minX = this.minX > mask.minX ? this.minX : mask.minX;\n        this.minY = this.minY > mask.minY ? this.minY : mask.minY;\n        this.maxX = this.maxX < mask.maxX ? this.maxX : mask.maxX;\n        this.maxY = this.maxY < mask.maxY ? this.maxY : mask.maxY;\n    }\n\n    /**\n     * Adds other Bounds, multiplied with matrix.\n     * @param matrix - The matrix to apply to the bounds.\n     */\n    public applyMatrix(matrix: Matrix): void\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        // multiple bounds by matrix\n        const { a, b, c, d, tx, ty } = matrix;\n\n        let x = (a * minX) + (c * minY) + tx;\n        let y = (b * minX) + (d * minY) + ty;\n\n        this.minX = x;\n        this.minY = y;\n        this.maxX = x;\n        this.maxY = y;\n\n        x = (a * maxX) + (c * minY) + tx;\n        y = (b * maxX) + (d * minY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n\n        x = (a * minX) + (c * maxY) + tx;\n        y = (b * minX) + (d * maxY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n\n        x = (a * maxX) + (c * maxY) + tx;\n        y = (b * maxX) + (d * maxY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n    }\n\n    /**\n     * Resizes the bounds object to include the given rectangle.\n     * @param rect - The rectangle to be included.\n     */\n    public fit(rect: Rectangle): this\n    {\n        if (this.minX < rect.left) this.minX = rect.left;\n        if (this.maxX > rect.right) this.maxX = rect.right;\n\n        if (this.minY < rect.top) this.minY = rect.top;\n        if (this.maxY > rect.bottom) this.maxY = rect.bottom;\n\n        return this;\n    }\n\n    /**\n     * Resizes the bounds object to include the given bounds.\n     * @param left - The left value of the bounds.\n     * @param right - The right value of the bounds.\n     * @param top - The top value of the bounds.\n     * @param bottom - The bottom value of the bounds.\n     */\n    public fitBounds(left: number, right: number, top: number, bottom: number): this\n    {\n        if (this.minX < left) this.minX = left;\n        if (this.maxX > right) this.maxX = right;\n\n        if (this.minY < top) this.minY = top;\n        if (this.maxY > bottom) this.maxY = bottom;\n\n        return this;\n    }\n\n    /**\n     * Pads bounds object, making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     */\n    public pad(paddingX: number, paddingY: number = paddingX): this\n    {\n        this.minX -= paddingX;\n        this.maxX += paddingX;\n\n        this.minY -= paddingY;\n        this.maxY += paddingY;\n\n        return this;\n    }\n\n    /** Ceils the bounds. */\n    public ceil(): this\n    {\n        this.minX = Math.floor(this.minX);\n        this.minY = Math.floor(this.minY);\n        this.maxX = Math.ceil(this.maxX);\n        this.maxY = Math.ceil(this.maxY);\n\n        return this;\n    }\n\n    /** Clones the bounds. */\n    public clone(): Bounds\n    {\n        return new Bounds(this.minX, this.minY, this.maxX, this.maxY);\n    }\n\n    /**\n     * Scales the bounds by the given values\n     * @param x - The X value to scale by.\n     * @param y - The Y value to scale by.\n     */\n    public scale(x: number, y: number = x): this\n    {\n        this.minX *= x;\n        this.minY *= y;\n        this.maxX *= x;\n        this.maxY *= y;\n\n        return this;\n    }\n\n    /** the x value of the bounds. */\n    get x(): number\n    {\n        return this.minX;\n    }\n    set x(value: number)\n    {\n        const width = this.maxX - this.minX;\n\n        this.minX = value;\n        this.maxX = value + width;\n    }\n\n    /** the y value of the bounds. */\n    get y(): number\n    {\n        return this.minY;\n    }\n\n    set y(value: number)\n    {\n        const height = this.maxY - this.minY;\n\n        this.minY = value;\n        this.maxY = value + height;\n    }\n\n    /** the width value of the bounds. */\n    get width(): number\n    {\n        return this.maxX - this.minX;\n    }\n\n    set width(value: number)\n    {\n        this.maxX = this.minX + value;\n    }\n\n    /** the height value of the bounds. */\n    get height(): number\n    {\n        return this.maxY - this.minY;\n    }\n\n    set height(value: number)\n    {\n        this.maxY = this.minY + value;\n    }\n\n    /** the left value of the bounds. */\n    get left(): number\n    {\n        return this.minX;\n    }\n\n    /** the right value of the bounds. */\n    get right(): number\n    {\n        return this.maxX;\n    }\n\n    /** the top value of the bounds. */\n    get top(): number\n    {\n        return this.minY;\n    }\n\n    /** the bottom value of the bounds. */\n    get bottom(): number\n    {\n        return this.maxY;\n    }\n\n    /** Is the bounds positive. */\n    get isPositive(): boolean\n    {\n        return (this.maxX - this.minX > 0) && (this.maxY - this.minY > 0);\n    }\n\n    get isValid(): boolean\n    {\n        return (this.minX + this.minY !== Infinity);\n    }\n\n    /**\n     * Adds screen vertices from array\n     * @param vertexData - calculated vertices\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     * @param matrix\n     */\n    public addVertexData(vertexData: Float32Array, beginOffset: number, endOffset: number, matrix?: Matrix): void\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        matrix ||= this.matrix;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const localX = vertexData[i];\n            const localY = vertexData[i + 1];\n\n            const x = (a * localX) + (c * localY) + tx;\n            const y = (b * localX) + (d * localY) + ty;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Checks if the point is contained within the bounds.\n     * @param x - x coordinate\n     * @param y - y coordinate\n     */\n    public containsPoint(x: number, y: number): boolean\n    {\n        if (this.minX <= x && this.minY <= y && this.maxX >= x && this.maxY >= y)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public toString(): string\n    {\n        // eslint-disable-next-line max-len\n        return `[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`;\n    }\n}\n\n",null,"// import { SHAPES } from '../const';\nimport { Point } from '../point/Point';\n\nimport type { Bounds } from '../../scene/container/bounds/Bounds';\nimport type { Matrix } from '../matrix/Matrix';\nimport type { SHAPE_PRIMITIVE } from '../misc/const';\nimport type { ShapePrimitive } from './ShapePrimitive';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Rectangle extends PixiMixins.Rectangle { }\n\n/**\n * The `Rectangle` object is an area defined by its position, as indicated by its top-left corner\n * point (`x`, `y`) and by its `width` and its `height`.\n *\n * It also provides convenience methods to get and set the position and size of the rectangle such as\n * {@link maths.Rectangle#bottom|bottom}, {@link maths.Rectangle#right|right} and {@link maths.Rectangle#isEmpty|isEmpty}.\n * @memberof maths\n */\nexport class Rectangle implements ShapePrimitive\n{\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'rectangle'\n     */\n    public readonly type: SHAPE_PRIMITIVE = 'rectangle';\n\n    /**\n     * The X coordinate of the upper-left corner of the rectangle\n     * @default 0\n     */\n    public x: number;\n\n    /**\n     * The Y coordinate of the upper-left corner of the rectangle\n     * @default 0\n     */\n    public y: number;\n\n    /**\n     * The overall width of this rectangle\n     *  @default 0\n     */\n    public width: number;\n\n    /**\n     * The overall height of this rectangle\n     * @default 0\n     */\n    public height: number;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rectangle\n     * @param width - The overall width of the rectangle\n     * @param height - The overall height of the rectangle\n     */\n    constructor(x: string | number = 0, y: string | number = 0, width: string | number = 0, height: string | number = 0)\n    {\n        this.x = Number(x);\n        this.y = Number(y);\n        this.width = Number(width);\n        this.height = Number(height);\n    }\n\n    /** Returns the left edge of the rectangle. */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /** Returns the right edge of the rectangle. */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /** Returns the top edge of the rectangle. */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /** Returns the bottom edge of the rectangle. */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /** Determines whether the Rectangle is empty. */\n    public isEmpty(): boolean\n    {\n        return this.left === this.right || this.top === this.bottom;\n    }\n\n    /** A constant empty rectangle. This is a new object every time the property is accessed */\n    static get EMPTY(): Rectangle\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     * @returns a copy of the rectangle\n     */\n    public clone(): Rectangle\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Converts a Bounds object to a Rectangle object.\n     * @param bounds - The bounds to copy and convert to a rectangle.\n     * @returns Returns itself.\n     */\n    public copyFromBounds(bounds: Bounds): this\n    {\n        this.x = bounds.minX;\n        this.y = bounds.minY;\n        this.width = bounds.maxX - bounds.minX;\n        this.height = bounds.maxY - bounds.minY;\n\n        return this;\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(rectangle: Rectangle): Rectangle\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(rectangle: Rectangle): Rectangle\n    {\n        rectangle.copyFrom(this);\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Rectangle\n     */\n    public contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @param strokeWidth - The width of the line to check\n     * @returns Whether the x/y coordinates are within this rectangle\n     */\n    public strokeContains(x: number, y: number, strokeWidth: number): boolean\n    {\n        const { width, height } = this;\n\n        if (width <= 0 || height <= 0) return false;\n\n        const _x = this.x;\n        const _y = this.y;\n\n        const outerLeft = _x - (strokeWidth / 2);\n        const outerRight = _x + width + (strokeWidth / 2);\n        const outerTop = _y - (strokeWidth / 2);\n        const outerBottom = _y + height + (strokeWidth / 2);\n        const innerLeft = _x + (strokeWidth / 2);\n        const innerRight = _x + width - (strokeWidth / 2);\n        const innerTop = _y + (strokeWidth / 2);\n        const innerBottom = _y + height - (strokeWidth / 2);\n\n        return (x >= outerLeft && x <= outerRight && y >= outerTop && y <= outerBottom)\n        && !(x > innerLeft && x < innerRight && y > innerTop && y < innerBottom);\n    }\n    /**\n     * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n     * Returns true only if the area of the intersection is >0, this means that Rectangles\n     * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n     * (width or height equal to zero) can't intersect any other rectangle.\n     * @param {Rectangle} other - The Rectangle to intersect with `this`.\n     * @param {Matrix} transform - The transformation matrix of `other`.\n     * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n     */\n    public intersects(other: Rectangle, transform?: Matrix): boolean\n    {\n        if (!transform)\n        {\n            const x0 = this.x < other.x ? other.x : this.x;\n            const x1 = this.right > other.right ? other.right : this.right;\n\n            if (x1 <= x0)\n            {\n                return false;\n            }\n\n            const y0 = this.y < other.y ? other.y : this.y;\n            const y1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n\n            return y1 > y0;\n        }\n\n        const x0 = this.left;\n        const x1 = this.right;\n        const y0 = this.top;\n        const y1 = this.bottom;\n\n        if (x1 <= x0 || y1 <= y0)\n        {\n            return false;\n        }\n\n        const lt = tempPoints[0].set(other.left, other.top);\n        const lb = tempPoints[1].set(other.left, other.bottom);\n        const rt = tempPoints[2].set(other.right, other.top);\n        const rb = tempPoints[3].set(other.right, other.bottom);\n\n        if (rt.x <= lt.x || lb.y <= lt.y)\n        {\n            return false;\n        }\n\n        const s = Math.sign((transform.a * transform.d) - (transform.b * transform.c));\n\n        if (s === 0)\n        {\n            return false;\n        }\n\n        transform.apply(lt, lt);\n        transform.apply(lb, lb);\n        transform.apply(rt, rt);\n        transform.apply(rb, rb);\n\n        if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0\n            || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1\n            || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0\n            || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1)\n        {\n            return false;\n        }\n\n        const nx = s * (lb.y - lt.y);\n        const ny = s * (lt.x - lb.x);\n        const n00 = (nx * x0) + (ny * y0);\n        const n10 = (nx * x1) + (ny * y0);\n        const n01 = (nx * x0) + (ny * y1);\n        const n11 = (nx * x1) + (ny * y1);\n\n        if (Math.max(n00, n10, n01, n11) <= (nx * lt.x) + (ny * lt.y)\n            || Math.min(n00, n10, n01, n11) >= (nx * rb.x) + (ny * rb.y))\n        {\n            return false;\n        }\n\n        const mx = s * (lt.y - rt.y);\n        const my = s * (rt.x - lt.x);\n        const m00 = (mx * x0) + (my * y0);\n        const m10 = (mx * x1) + (my * y0);\n        const m01 = (mx * x0) + (my * y1);\n        const m11 = (mx * x1) + (my * y1);\n\n        if (Math.max(m00, m10, m01, m11) <= (mx * lt.x) + (my * lt.y)\n            || Math.min(m00, m10, m01, m11) >= (mx * rb.x) + (my * rb.y))\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     * @returns Returns itself.\n     */\n    public pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     * @param rectangle - The rectangle to fit.\n     * @returns Returns itself.\n     */\n    public fit(rectangle: Rectangle): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     * @param resolution - resolution\n     * @param eps - precision\n     * @returns Returns itself.\n     */\n    public ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     * @param rectangle - The rectangle to include.\n     * @returns Returns itself.\n     */\n    public enlarge(rectangle: Rectangle): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n\n    /**\n     * Returns the framing rectangle of the rectangle as a Rectangle object\n     * @param out - optional rectangle to store the result\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out = out || new Rectangle();\n        out.copyFrom(this);\n\n        return out;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n",null,"import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool, matrixPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalBounds(target: Container, skipUpdateTransform: boolean, bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    let parentTransform;\n    let pooledMatrix;\n\n    if (target.parent)\n    {\n        if (!skipUpdateTransform)\n        {\n            pooledMatrix = matrixPool.get().identity();\n            parentTransform = updateTransformBackwards(target, pooledMatrix);\n        }\n        else\n        {\n            parentTransform = target.parent.worldTransform;\n        }\n    }\n    else\n    {\n        parentTransform = Matrix.IDENTITY;\n    }\n\n    // then collect them...\n\n    _getGlobalBounds(target, bounds, parentTransform, skipUpdateTransform);\n\n    if (pooledMatrix)\n    {\n        matrixPool.return(pooledMatrix);\n    }\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    return bounds;\n}\n\nexport function _getGlobalBounds(\n    target: Container,\n    bounds: Bounds,\n    parentTransform: Matrix,\n    skipUpdateTransform: boolean,\n): void\n{\n    if (!target.visible || !target.measurable) return;\n\n    let worldTransform: Matrix;\n\n    if (!skipUpdateTransform)\n    {\n        target.updateLocalTransform();\n\n        worldTransform = matrixPool.get();\n\n        worldTransform.appendFrom(target.localTransform, parentTransform);\n    }\n    else\n    {\n        worldTransform = target.worldTransform;\n    }\n\n    const parentBounds = bounds;\n    const preserveBounds = !!target.effects.length;\n\n    if (preserveBounds)\n    {\n        bounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, worldTransform);\n    }\n    else\n    {\n        if ((target as Renderable).addBounds)\n        {\n            // save a copy\n            bounds.matrix = worldTransform;\n\n            (target as Renderable).addBounds(bounds);\n        }\n\n        for (let i = 0; i < target.children.length; i++)\n        {\n            _getGlobalBounds(target.children[i], bounds, worldTransform, skipUpdateTransform);\n        }\n    }\n\n    if (preserveBounds)\n    {\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            target.effects[i].addBounds?.(bounds);\n        }\n\n        parentBounds.addBounds(bounds, Matrix.IDENTITY);\n\n        boundsPool.return(bounds);\n    }\n\n    if (!skipUpdateTransform)\n    {\n        matrixPool.return(worldTransform);\n    }\n}\n\nexport function updateTransformBackwards(target: Container, parentTransform: Matrix)\n{\n    const parent = target.parent;\n\n    if (parent)\n    {\n        updateTransformBackwards(parent, parentTransform);\n\n        parent.updateLocalTransform();\n\n        parentTransform.append(parent.localTransform);\n    }\n\n    return parentTransform;\n}\n",null,"import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Pool } from '../../../../utils/pool/Pool';\nimport { Bounds } from '../Bounds';\n\nimport type { PoolItem } from '../../../../utils/pool/Pool';\n\ntype MatrixPoolItem = Matrix & PoolItem;\ntype BoundsPoolItem = Bounds & PoolItem;\nexport const matrixPool = new Pool<MatrixPoolItem>(Matrix);\nexport const boundsPool = new Pool<BoundsPoolItem>(Bounds);\n",null,"import { Matrix } from '../../../maths/matrix/Matrix';\nimport { warn } from '../../../utils/logging/warn';\nimport { boundsPool, matrixPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\nexport function getLocalBounds(target: Container, bounds: Bounds, relativeMatrix?: Matrix): Bounds\n{\n    bounds.clear();\n\n    relativeMatrix ||= Matrix.IDENTITY;\n\n    _getLocalBounds(target, bounds, relativeMatrix, target, true);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    return bounds;\n}\n\nfunction _getLocalBounds(\n    target: Container,\n    bounds: Bounds,\n    parentTransform: Matrix,\n    rootContainer: Container,\n    isRoot: boolean\n): void\n{\n    let relativeTransform: Matrix;\n\n    if (!isRoot)\n    {\n        if (!target.visible || !target.measurable) return;\n\n        target.updateLocalTransform();\n\n        const localTransform = target.localTransform;\n\n        relativeTransform = matrixPool.get();\n        relativeTransform.appendFrom(localTransform, parentTransform);\n    }\n    else\n    {\n        relativeTransform = matrixPool.get();\n        relativeTransform = parentTransform.copyTo(relativeTransform);\n    }\n\n    const parentBounds = bounds;\n    const preserveBounds = !!target.effects.length;\n\n    if (preserveBounds)\n    {\n        bounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, relativeTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            bounds.matrix = relativeTransform;\n            (target as Renderable).addBounds(bounds);\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getLocalBounds(children[i], bounds, relativeTransform, rootContainer, false);\n        }\n    }\n\n    if (preserveBounds)\n    {\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            target.effects[i].addLocalBounds?.(bounds, rootContainer);\n        }\n\n        // TODO - make a add transformed bounds?\n        parentBounds.addBounds(bounds, Matrix.IDENTITY);\n\n        boundsPool.return(bounds);\n    }\n\n    matrixPool.return(relativeTransform);\n}\n\nexport function getParent(target: Container, root: Container, matrix: Matrix)\n{\n    const parent = target.parent;\n\n    if (!parent)\n    {\n        // we have reach the top of the tree!\n        // #if _DEBUG\n        warn('Item is not inside the root container');\n        // #endif\n\n        return;\n    }\n\n    if (parent !== root)\n    {\n        getParent(parent, root, matrix);\n\n        parent.updateLocalTransform();\n        matrix.append(parent.localTransform);\n    }\n}\n\n",null,"let warnCount = 0;\nconst maxWarnings = 500;\n\n/**\n * Logs a PixiJS warning message to the console. Stops logging after 500 warnings have been logged.\n * @param args - The warning message(s) to log\n * @returns {void}\n * @memberof utils\n * @ignore\n */\nexport function warn(...args: any[])\n{\n    if (warnCount === maxWarnings) return;\n\n    warnCount++;\n\n    if (warnCount === maxWarnings)\n    {\n        console.warn('PixiJS Warning: too many warnings, no more warnings will be reported to the console by PixiJS.');\n    }\n    else\n    {\n        console.warn('PixiJS Warning: ', ...args);\n    }\n}\n",null,"import type { Container } from '../Container';\n\n/**\n * This function will crawl through the container essentially check if the children have changed.\n *\n * This function checkChildrenDidChange recursively checks if any child in a Container\n * or its children has changed. It does this by comparing a generated changeId for each\n * child against a stored value in previousData.\n * The changeId is a combination of the child's uid and _didChangeId, bitwise manipulated for uniqueness.\n * If a change is detected, it updates previousData and sets didChange to true.\n * The function returns a boolean indicating if any change was detected in the entire hierarchy of children.\n * @param container - the container to check for changes\n * @param previousData - the previous data from the last check made\n * @param previousData.data - the data array\n * @param previousData.index - the index of the data array\n * @param previousData.didChange - did the data change\n */\nexport function checkChildrenDidChange(\n    container: Container,\n    previousData: {\n        data: number[];\n        index: number;\n        didChange: boolean;\n    })\n{\n    const children = container.children;\n\n    for (let i = 0; i < children.length; i++)\n    {\n        const child = children[i];\n\n        const changeId = ((child.uid & 255) << 24)\n            | (child._didChangeId & 16777215);\n\n        if (previousData.data[previousData.index] !== changeId)\n        {\n            previousData.data[previousData.index] = changeId;\n\n            previousData.didChange = true;\n        }\n\n        previousData.index++;\n\n        if (child.children.length)\n        {\n            checkChildrenDidChange(child, previousData);\n        }\n    }\n\n    return previousData.didChange;\n}\n",null,"import type { Container } from '../Container';\n\nexport interface OnRenderMixinConstructor\n{\n    onRender?: (() => void | null);\n}\nexport interface OnRenderMixin extends Required<OnRenderMixinConstructor>\n{\n    _onRender: (() => void) | null;\n}\n\nexport const onRenderMixin: Partial<Container> = {\n    _onRender: null,\n\n    set onRender(func: () => void)\n    {\n        const renderGroup = this.renderGroup;\n\n        if (!func)\n        {\n            if (this._onRender)\n            {\n                renderGroup?.removeOnRender(this);\n            }\n\n            this._onRender = null;\n\n            return;\n        }\n\n        if (!this._onRender)\n        {\n            renderGroup?.addOnRender(this);\n        }\n\n        this._onRender = func;\n    },\n\n    /**\n     * This callback is used when the container is rendered. This is where you should add your custom\n     * logic that is needed to be run every frame.\n     *\n     * In v7 many users used `updateTransform` for this, however the way v8 renders objects is different\n     * and \"updateTransform\" is no longer called every frame\n     * @example\n     * const container = new Container();\n     * container.onRender = () => {\n     *    container.rotation += 0.01;\n     * };\n     * @memberof scene.Container#\n     */\n    get onRender(): () => void\n    {\n        return this._onRender;\n    }\n} as Container;\n",null,"import type { Container } from '../Container';\n\nexport interface SortMixinConstructor\n{\n    zIndex?: number;\n    sortDirty?: boolean;\n    sortableChildren?: boolean;\n}\nexport interface SortMixin extends Required<SortMixinConstructor>\n{\n    _zIndex: number;\n\n    sortChildren: () => void;\n    depthOfChildModified: () => void;\n}\n\nexport const sortMixin: Partial<Container> = {\n    _zIndex: 0,\n    /**\n     * Should children be sorted by zIndex at the next render call.\n     *\n     * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n     * @type {boolean}\n     * @memberof scene.Container#\n     */\n    sortDirty: false,\n    /**\n     * If set to true, the container will sort its children by `zIndex` value\n     * when the next render is called, or manually if `sortChildren()` is called.\n     *\n     * This actually changes the order of elements in the array, so should be treated\n     * as a basic solution that is not performant compared to other solutions,\n     * such as {@link https://github.com/pixijs/layers PixiJS Layers}\n     *\n     * Also be aware of that this may not work nicely with the `addChildAt()` function,\n     * as the `zIndex` sorting may cause the child to automatically sorted to another position.\n     * @type {boolean}\n     * @memberof scene.Container#\n     */\n    sortableChildren: false,\n\n    /**\n     * The zIndex of the container.\n     *\n     * Setting this value, will automatically set the parent to be sortable. Children will be automatically\n     * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n     * and thus rendered on top of other display objects within the same container.\n     * @see scene.Container#sortableChildren\n     * @memberof scene.Container#\n     */\n    get zIndex()\n    {\n        return this._zIndex;\n    },\n\n    set zIndex(value: number)\n    {\n        if (this._zIndex === value) return;\n\n        this._zIndex = value;\n\n        this.depthOfChildModified();\n    },\n\n    depthOfChildModified()\n    {\n        if (this.parent)\n        {\n            this.parent.sortableChildren = true;\n            this.parent.sortDirty = true;\n        }\n\n        if (this.renderGroup && !this.isRenderGroupRoot)\n        {\n            this.renderGroup.structureDidChange = true;\n        }\n    },\n\n    /**\n     * Sorts children by zIndex.\n     * @memberof scene.Container#\n     */\n    sortChildren()\n    {\n        if (!this.sortDirty) return;\n\n        this.sortDirty = false;\n\n        this.children.sort(sortChildren);\n    },\n} as Container;\n\nfunction sortChildren(a: Container, b: Container): number\n{\n    return a._zIndex - b._zIndex;\n}\n",null,"import { Matrix } from '../../../maths/matrix/Matrix';\nimport { Point } from '../../../maths/point/Point';\nimport { updateTransformBackwards } from '../bounds/getGlobalBounds';\n\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Container } from '../Container';\n\nexport interface ToLocalGlobalMixin\n{\n    getGlobalPosition(point?: Point, skipUpdate?: boolean): Point;\n    toGlobal<P extends PointData = Point>(position: PointData, point?: P, skipUpdate?: boolean): P;\n    toLocal<P extends PointData = Point>(position: PointData, from?: Container, point?: P, skipUpdate?: boolean): P;\n}\n\nexport const toLocalGlobalMixin: Partial<Container> = {\n    /**\n     * Returns the global position of the container.\n     * @param point - The optional point to write the global value to.\n     * @param skipUpdate - Should we skip the update transform.\n     * @returns - The updated point.\n     * @memberof scene.Container#\n     */\n    getGlobalPosition(point: Point = new Point(), skipUpdate = false): Point\n    {\n        if (this.parent)\n        {\n            this.parent.toGlobal(this._position, point, skipUpdate);\n        }\n        else\n        {\n            point.x = this._position.x;\n            point.y = this._position.y;\n        }\n\n        return point;\n    },\n\n    /**\n     * Calculates the global position of the container.\n     * @param position - The world origin to calculate from.\n     * @param point - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param skipUpdate - Should we skip the update transform.\n     * @returns - A point object representing the position of this object.\n     * @memberof scene.Container#\n     */\n    toGlobal<P extends PointData = Point>(position: PointData, point?: P, skipUpdate = false): P\n    {\n        if (!skipUpdate)\n        {\n            this.updateLocalTransform();\n\n            const globalMatrix = updateTransformBackwards(this, new Matrix());\n\n            globalMatrix.append(this.localTransform);\n\n            return globalMatrix.apply<P>(position, point);\n        }\n\n        // simply apply the matrix..\n        return this.worldTransform.apply<P>(position, point);\n    },\n\n    /**\n     * Calculates the local position of the container relative to another point.\n     * @param position - The world origin to calculate from.\n     * @param from - The Container to calculate the global position from.\n     * @param point - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param skipUpdate - Should we skip the update transform\n     * @returns - A point object representing the position of this object\n     * @memberof scene.Container#\n     */\n    toLocal<P extends PointData = Point>(position: PointData, from?: Container, point?: P, skipUpdate?: boolean): P\n    {\n        if (from)\n        {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n\n        if (!skipUpdate)\n        {\n            this.updateLocalTransform();\n\n            const globalMatrix = updateTransformBackwards(this, new Matrix());\n\n            globalMatrix.append(this.localTransform);\n\n            return globalMatrix.applyInverse<P>(position, point);\n        }\n\n        // simply apply the matrix..\n        return this.worldTransform.applyInverse<P>(position, point);\n    }\n} as Container;\n",null,"import { Matrix } from '../../maths/matrix/Matrix';\nimport { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\n\nimport type { Instruction } from '../../rendering/renderers/shared/instructions/Instruction';\nimport type { Container } from './Container';\n\n/**\n * The render group is the base class for all render groups\n * It is used to render a group of containers together\n * @memberof rendering\n */\nexport class RenderGroup implements Instruction\n{\n    public renderPipeId = 'renderGroup';\n    public root: Container = null;\n\n    public canBundle = false;\n\n    public renderGroupParent: RenderGroup = null;\n    public renderGroupChildren: RenderGroup[] = [];\n\n    private readonly _children: Container[] = [];\n\n    public worldTransform: Matrix = new Matrix();\n    public worldColorAlpha = 0xffffffff;\n    public worldColor = 0xffffff;\n    public worldAlpha = 1;\n\n    // these updates are transform changes..\n    public readonly childrenToUpdate: Record<number, { list: Container[]; index: number; }> = Object.create(null);\n    public updateTick = 0;\n\n    // these update are renderable changes..\n    public readonly childrenRenderablesToUpdate: { list: Container[]; index: number; } = { list: [], index: 0 };\n\n    // other\n    public structureDidChange = true;\n\n    public instructionSet: InstructionSet = new InstructionSet();\n\n    private readonly _onRenderContainers: Container[] = [];\n\n    constructor(root: Container)\n    {\n        this.root = root;\n\n        this.addChild(root);\n    }\n\n    get localTransform()\n    {\n        return this.root.localTransform;\n    }\n\n    public addRenderGroupChild(renderGroupChild: RenderGroup)\n    {\n        if (renderGroupChild.renderGroupParent)\n        {\n            renderGroupChild.renderGroupParent._removeRenderGroupChild(renderGroupChild);\n        }\n\n        renderGroupChild.renderGroupParent = this;\n\n        this.onChildUpdate(renderGroupChild.root);\n\n        this.renderGroupChildren.push(renderGroupChild);\n    }\n\n    private _removeRenderGroupChild(renderGroupChild: RenderGroup)\n    {\n        if (renderGroupChild.root.didChange)\n        {\n            this._removeChildFromUpdate(renderGroupChild.root);\n        }\n\n        const index = this.renderGroupChildren.indexOf(renderGroupChild);\n\n        if (index > -1)\n        {\n            this.renderGroupChildren.splice(index, 1);\n        }\n\n        renderGroupChild.renderGroupParent = null;\n    }\n\n    public addChild(child: Container)\n    {\n        this.structureDidChange = true;\n\n        // TODO this can be optimized..\n        if (child !== this.root)\n        {\n            this._children.push(child);\n\n            child.updateTick = -1;\n\n            if (child.parent === this.root)\n            {\n                child.relativeRenderGroupDepth = 1;\n            }\n\n            else\n            {\n                child.relativeRenderGroupDepth = child.parent.relativeRenderGroupDepth + 1;\n            }\n\n            if (child._onRender)\n            {\n                this.addOnRender(child);\n            }\n        }\n\n        if (child.renderGroup)\n        {\n            if (child.renderGroup.root === child)\n            {\n                // its already its own render group..\n                this.addRenderGroupChild(child.renderGroup);\n\n                return;\n            }\n        }\n        else\n        {\n            child.renderGroup = this;\n            child.didChange = true;\n        }\n\n        const children = child.children;\n\n        if (!child.isRenderGroupRoot)\n        {\n            this.onChildUpdate(child);\n        }\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this.addChild(children[i]);\n        }\n    }\n\n    public removeChild(child: Container)\n    {\n        // remove all the children...\n        this.structureDidChange = true;\n\n        if (child._onRender)\n        {\n            this.removeOnRender(child);\n        }\n\n        if (child.renderGroup.root !== child)\n        {\n            const children = child.children;\n\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n\n            if (child.didChange)\n            {\n                child.renderGroup._removeChildFromUpdate(child);\n            }\n\n            child.renderGroup = null;\n        }\n\n        else\n        {\n            this._removeRenderGroupChild(child.renderGroup);\n        }\n\n        const index = this._children.indexOf(child);\n\n        if (index > -1)\n        {\n            this._children.splice(index, 1);\n        }\n    }\n\n    public onChildUpdate(child: Container)\n    {\n        let childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth];\n\n        if (!childrenToUpdate)\n        {\n            childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth] = {\n                index: 0,\n                list: [],\n            };\n        }\n\n        childrenToUpdate.list[childrenToUpdate.index++] = child;\n    }\n\n    // SHOULD THIS BE HERE?\n    public updateRenderable(container: Container)\n    {\n        // only update if its visible!\n        if (container.globalDisplayStatus < 0b111) return;\n\n        container.didViewUpdate = false;\n        // actually updates the renderable..\n        this.instructionSet.renderPipes[container.renderPipeId].updateRenderable(container);\n    }\n\n    public onChildViewUpdate(child: Container)\n    {\n        this.childrenRenderablesToUpdate.list[this.childrenRenderablesToUpdate.index++] = child;\n    }\n\n    private _removeChildFromUpdate(child: Container)\n    {\n        const childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth];\n\n        if (!childrenToUpdate)\n        { return; }\n\n        const index = childrenToUpdate.list.indexOf(child);\n\n        // TODO this should be optimized - don't really want to change array size on the fly if we can avoid!\n        if (index > -1)\n        {\n            childrenToUpdate.list.splice(index, 1);\n        }\n\n        childrenToUpdate.index--;\n    }\n\n    get isRenderable(): boolean\n    {\n        return (this.root.localDisplayStatus === 0b111 && this.worldAlpha > 0);\n    }\n\n    /**\n     * adding a container to the onRender list will make sure the user function\n     * passed in to the user defined 'onRender` callBack\n     * @param container - the container to add to the onRender list\n     */\n    public addOnRender(container: Container)\n    {\n        this._onRenderContainers.push(container);\n    }\n\n    public removeOnRender(container: Container)\n    {\n        this._onRenderContainers.splice(this._onRenderContainers.indexOf(container), 1);\n    }\n\n    public runOnRender()\n    {\n        for (let i = 0; i < this._onRenderContainers.length; i++)\n        {\n            this._onRenderContainers[i]._onRender();\n        }\n    }\n}\n",null,"import { uid } from '../../../../utils/data/uid';\n\nimport type { Instruction } from './Instruction';\n\n/**\n * A set of instructions that can be executed by the renderer.\n * Basically wraps an array, but with some extra properties that help the renderer\n * to keep things nice and optimised.\n *\n * Note:\n * InstructionSet.instructions contains all the instructions, but does not resize (for performance).\n * So for the true length of the instructions you need to use InstructionSet.instructionSize\n * @memberof rendering\n */\nexport class InstructionSet\n{\n    /** a unique id for this instruction set used through the renderer */\n    public readonly uid = uid('instructionSet');\n    /** the array of instructions */\n    public readonly instructions: Instruction[] = [];\n    /** the actual size of the array (any instructions passed this should be ignored) */\n    public instructionSize = 0;\n    /** allows for access to the render pipes of the renderer */\n    public renderPipes: any;\n\n    /** reset the instruction set so it can be reused set size back to 0 */\n    public reset()\n    {\n        this.instructionSize = 0;\n    }\n\n    /**\n     * Add an instruction to the set\n     * @param instruction - add an instruction to the set\n     */\n    public add(instruction: Instruction)\n    {\n        this.instructions[this.instructionSize++] = instruction;\n    }\n\n    /**\n     * Log the instructions to the console (for debugging)\n     * @internal\n     * @ignore\n     */\n    public log()\n    {\n        this.instructions.length = this.instructionSize;\n        // eslint-disable-next-line no-console\n        console.table(this.instructions, ['type', 'action']);\n    }\n}\n",null,"/**\n * Assigns properties from one object to another, using an optional array of property names to ignore.\n * @param target - The target object to assign properties to.\n * @param options - The object to assign properties from.\n * @param ignore - An object of property names to ignore ({ propToIgnore: true }).\n */\nexport function assignWithIgnore<T extends Record<string, any>>(\n    target: T,\n    options: T,\n    ignore: Record<string, boolean> = {}\n)\n{\n    for (const key in options)\n    {\n        if (!ignore[key] && options[key] !== undefined)\n        {\n            target[key] = options[key];\n        }\n    }\n}\n",null,"import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n",null,"import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link app.ResizePlugin}.\n * @memberof app\n * @property {Window|HTMLElement} [resizeTo=window] - Element to automatically resize the renderer to.\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @memberof app.ApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#resizeTo}\n * * {@link app.Application#resize}\n * * {@link app.Application#queueResize}\n * * {@link app.Application#cancelResize}\n * @example\n * import { extensions, ResizePlugin } from 'pixi.js';\n *\n * extensions.add(ResizePlugin);\n * @memberof app\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof app.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof app.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof app.Application#\n         * @method cancelResize\n         * @private\n         */\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof app.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n",null,"import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link app.TickerPluginOptions}.\n * @memberof app\n * @property {boolean} [autoStart=true] - Automatically starts the rendering after the construction.\n * **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n * `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n * @property {boolean} [sharedTicker=false] - Set`true` to use `Ticker.shared`, `false` to create new ticker.\n * If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n * The system ticker will always run before both the shared ticker and the app ticker.\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @memberof app.ApplicationOptions\n     * @default true\n     */\n    autoStart?: boolean;\n    /**\n     * Set`true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @memberof app.ApplicationOptions\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link ticker.Ticker} functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#start}\n * * {@link app.Application#stop}\n * * {@link app.Application#ticker}\n * @example\n * import { extensions, TickerPlugin } from 'pixi.js';\n *\n * extensions.add(TickerPlugin);\n * @memberof app\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static start: () => void;\n    public static stop: () => void;\n    private static _ticker: Ticker;\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {Ticker}\n         * @name _ticker\n         * @memberof app.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {ticker.Ticker}\n         * @name ticker\n         * @memberof app.Application#\n         * @default Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n",null,"/**\n * Represents the update priorities used by internal Pixi classes when registered with\n * the {@link ticker.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n * @static\n * @enum {number}\n * @memberof ticker\n */\nexport enum UPDATE_PRIORITY\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Highest priority used for interaction events in {@link EventSystem}\n     * @default 50\n     */\n    INTERACTION = 50,\n    /**\n     * High priority updating, used by {@link AnimatedSprite}\n     * @default 25\n     */\n    HIGH = 25,\n    /**\n     * Default priority for ticker events, see {@link Ticker#add}.\n     * @default 0\n     */\n    NORMAL = 0,\n    /**\n     * Low priority used for {@link Application} rendering.\n     * @default -25\n     */\n    LOW = -25,\n    /**\n     * Lowest priority used for {@link BasePrepare} utility.\n     * @default -50\n     */\n    UTILITY = -50,\n}\n",null,"import { UPDATE_PRIORITY } from './const';\nimport { TickerListener } from './TickerListener';\n\n/**\n * A callback which can be added to a ticker.\n * ```js\n * ticker.add(() => {\n *    // do something every frame\n * });\n * ```\n * @memberof ticker\n */\nexport type TickerCallback<T> = (this: T, ticker: Ticker) => any;\n\n/**\n * {@link ticker.Ticker|Tickers} provide periodic callbacks based on the system clock.\n * Your game update logic will generally be run in response to a tick once per frame.\n * You can have multiple tickers in use at one time.\n * ```js\n * import { Ticker } from 'pixi.js';\n *\n * const callback = (ticker: Ticker) => {\n *    // do something on the next animation frame\n * };\n *\n * // create a ticker\n * const ticker = new Ticker();\n *\n * // register the callback and start the ticker\n * ticker.add(callback);\n * ticker.start();\n * ```\n *\n * You can always use the {@link ticker.Ticker.shared|shared} ticker that Pixi renders with by default.\n * ```js\n * Ticker.shared.add(callback);\n * ```\n * @namespace ticker\n */\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n * @class\n * @memberof ticker\n */\nexport class Ticker\n{\n    /**\n     * Target frames per millisecond.\n     * @static\n     */\n    public static targetFPMS = 0.06;\n\n    /** The private shared ticker instance */\n    private static _shared: Ticker;\n    /** The private system ticker instance  */\n    private static _system: Ticker;\n\n    /**\n     * Whether or not this ticker should invoke the method\n     * {@link ticker.Ticker#start|start} automatically when a listener is added.\n     */\n    public autoStart = false;\n    /**\n     * Scalar time value from last frame to this frame.\n     * This value is capped by setting {@link ticker.Ticker#minFPS|minFPS}\n     * and is scaled with {@link ticker.Ticker#speed|speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     */\n    public deltaTime = 1;\n    /**\n     * Scaler time elapsed in milliseconds from last frame to this frame.\n     * This value is capped by setting {@link ticker.Ticker#minFPS|minFPS}\n     * and is scaled with {@link ticker.Ticker#speed|speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public deltaMS: number;\n    /**\n     * Time elapsed in milliseconds from last frame to this frame.\n     * Opposed to what the scalar {@link ticker.Ticker#deltaTime|deltaTime}\n     * is based, this value is neither capped nor scaled.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public elapsedMS: number;\n    /**\n     * The last time {@link ticker.Ticker#update|update} was invoked.\n     * This value is also reset internally outside of invoking\n     * update, but only when a new animation frame is requested.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     */\n    public lastTime = -1;\n    /**\n     * Factor of current {@link ticker.Ticker#deltaTime|deltaTime}.\n     * @example\n     * // Scales ticker.deltaTime to what would be\n     * // the equivalent of approximately 120 FPS\n     * ticker.speed = 2;\n     */\n    public speed = 1;\n    /**\n     * Whether or not this ticker has been started.\n     * `true` if {@link ticker.Ticker#start|start} has been called.\n     * `false` if {@link ticker.Ticker#stop|Stop} has been called.\n     * While `false`, this value may change to `true` in the\n     * event of {@link ticker.Ticker#autoStart|autoStart} being `true`\n     * and a listener is added.\n     */\n    public started = false;\n\n    /** The first listener. All new listeners added are chained on this. */\n    private _head: TickerListener;\n    /** Internal current frame request ID */\n    private _requestId: number = null;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the maximum allowed milliseconds between updates.\n     */\n    private _maxElapsedMS = 100;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the minimum allowed milliseconds between updates.\n     */\n    private _minElapsedMS = 0;\n    /** If enabled, deleting is disabled.*/\n    private _protected = false;\n    /** The last time keyframe was executed. Maintains a relatively fixed interval with the previous value. */\n    private _lastFrame = -1;\n    /**\n     * Internal tick method bound to ticker instance.\n     * This is because in early 2015, Function.bind\n     * is still 60% slower in high performance scenarios.\n     * Also separating frame requests from update method\n     * so listeners may be called at any time and with\n     * any animation API, just invoke ticker.update(time).\n     * @param time - Time since last tick.\n     */\n    private readonly _tick: (time: number) => any;\n\n    constructor()\n    {\n        this._head = new TickerListener(null, null, Infinity);\n        this.deltaMS = 1 / Ticker.targetFPMS;\n        this.elapsedMS = 1 / Ticker.targetFPMS;\n\n        this._tick = (time: number): void =>\n        {\n            this._requestId = null;\n\n            if (this.started)\n            {\n                // Invoke listeners now\n                this.update(time);\n                // Listener side effects may have modified ticker state.\n                if (this.started && this._requestId === null && this._head.next)\n                {\n                    this._requestId = requestAnimationFrame(this._tick);\n                }\n            }\n        };\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     * @private\n     */\n    private _requestIfNeeded(): void\n    {\n        if (this._requestId === null && this._head.next)\n        {\n            // ensure callbacks get correct delta\n            this.lastTime = performance.now();\n            this._lastFrame = this.lastTime;\n            this._requestId = requestAnimationFrame(this._tick);\n        }\n    }\n\n    /**\n     * Conditionally cancels a pending animation frame.\n     * @private\n     */\n    private _cancelIfNeeded(): void\n    {\n        if (this._requestId !== null)\n        {\n            cancelAnimationFrame(this._requestId);\n            this._requestId = null;\n        }\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     * @private\n     */\n    private _startIfPossible(): void\n    {\n        if (this.started)\n        {\n            this._requestIfNeeded();\n        }\n        else if (this.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     * @param fn - The listener function to be added for updates\n     * @param context - The listener context\n     * @param {number} [priority=UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    public add<T = any>(fn: TickerCallback<T>, context?: T, priority: number = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority));\n    }\n\n    /**\n     * Add a handler for the tick event which is only execute once.\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param {number} [priority=UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    public addOnce<T = any>(fn: TickerCallback<T>, context?: T, priority: number = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority, true));\n    }\n\n    /**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     * @private\n     * @param listener - Current listener being added.\n     * @returns This instance of a ticker\n     */\n    private _addListener(listener: TickerListener): this\n    {\n        // For attaching to head\n        let current = this._head.next;\n        let previous = this._head;\n\n        // Add the first item\n        if (!current)\n        {\n            listener.connect(previous);\n        }\n        else\n        {\n            // Go from highest to lowest priority\n            while (current)\n            {\n                if (listener.priority > current.priority)\n                {\n                    listener.connect(previous);\n                    break;\n                }\n                previous = current;\n                current = current.next;\n            }\n\n            // Not yet connected\n            if (!listener.previous)\n            {\n                listener.connect(previous);\n            }\n        }\n\n        this._startIfPossible();\n\n        return this;\n    }\n\n    /**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     * @param fn - The listener function to be removed\n     * @param context - The listener context to be removed\n     * @returns This instance of a ticker\n     */\n    public remove<T = any>(fn: TickerCallback<T>, context?: T): this\n    {\n        let listener = this._head.next;\n\n        while (listener)\n        {\n            // We found a match, lets remove it\n            // no break to delete all possible matches\n            // incase a listener was added 2+ times\n            if (listener.match(fn, context))\n            {\n                listener = listener.destroy();\n            }\n            else\n            {\n                listener = listener.next;\n            }\n        }\n\n        if (!this._head.next)\n        {\n            this._cancelIfNeeded();\n        }\n\n        return this;\n    }\n\n    /**\n     * The number of listeners on this ticker, calculated by walking through linked list\n     * @readonly\n     * @member {number}\n     */\n    get count(): number\n    {\n        if (!this._head)\n        {\n            return 0;\n        }\n\n        let count = 0;\n        let current = this._head;\n\n        while ((current = current.next))\n        {\n            count++;\n        }\n\n        return count;\n    }\n\n    /** Starts the ticker. If the ticker has listeners a new animation frame is requested at this point. */\n    public start(): void\n    {\n        if (!this.started)\n        {\n            this.started = true;\n            this._requestIfNeeded();\n        }\n    }\n\n    /** Stops the ticker. If the ticker has requested an animation frame it is canceled at this point. */\n    public stop(): void\n    {\n        if (this.started)\n        {\n            this.started = false;\n            this._cancelIfNeeded();\n        }\n    }\n\n    /** Destroy the ticker and don't use after this. Calling this method removes all references to internal events. */\n    public destroy(): void\n    {\n        if (!this._protected)\n        {\n            this.stop();\n\n            let listener = this._head.next;\n\n            while (listener)\n            {\n                listener = listener.destroy(true);\n            }\n\n            this._head.destroy();\n            this._head = null;\n        }\n    }\n\n    /**\n     * Triggers an update. An update entails setting the\n     * current {@link ticker.Ticker#elapsedMS|elapsedMS},\n     * the current {@link ticker.Ticker#deltaTime|deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link ticker.Ticker#lastTime|lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */\n    public update(currentTime: number = performance.now()): void\n    {\n        let elapsedMS;\n\n        // If the difference in time is zero or negative, we ignore most of the work done here.\n        // If there is no valid difference, then should be no reason to let anyone know about it.\n        // A zero delta, is exactly that, nothing should update.\n        //\n        // The difference in time can be negative, and no this does not mean time traveling.\n        // This can be the result of a race condition between when an animation frame is requested\n        // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n        // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n        // can receive a time argument that can be less than the lastTime value that was set within\n        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n        //\n        // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n\n        if (currentTime > this.lastTime)\n        {\n            // Save uncapped elapsedMS for measurement\n            elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n\n            // cap the milliseconds elapsed used for deltaTime\n            if (elapsedMS > this._maxElapsedMS)\n            {\n                elapsedMS = this._maxElapsedMS;\n            }\n\n            elapsedMS *= this.speed;\n\n            // If not enough time has passed, exit the function.\n            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n            // adjustment to ensure a relatively stable interval.\n            if (this._minElapsedMS)\n            {\n                const delta = currentTime - this._lastFrame | 0;\n\n                if (delta < this._minElapsedMS)\n                {\n                    return;\n                }\n\n                this._lastFrame = currentTime - (delta % this._minElapsedMS);\n            }\n\n            this.deltaMS = elapsedMS;\n            this.deltaTime = this.deltaMS * Ticker.targetFPMS;\n\n            // Cache a local reference, in-case ticker is destroyed\n            // during the emit, we can still check for head.next\n            const head = this._head;\n\n            // Invoke listeners added to internal emitter\n            let listener = head.next;\n\n            while (listener)\n            {\n                listener = listener.emit(this);\n            }\n\n            if (!head.next)\n            {\n                this._cancelIfNeeded();\n            }\n        }\n        else\n        {\n            this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n        }\n\n        this.lastTime = currentTime;\n    }\n\n    /**\n     * The frames per second at which this ticker is running.\n     * The default is approximately 60 in most modern browsers.\n     * **Note:** This does not factor in the value of\n     * {@link ticker.Ticker#speed|speed}, which is specific\n     * to scaling {@link ticker.Ticker#deltaTime|deltaTime}.\n     * @member {number}\n     * @readonly\n     */\n    get FPS(): number\n    {\n        return 1000 / this.elapsedMS;\n    }\n\n    /**\n     * Manages the maximum amount of milliseconds allowed to\n     * elapse between invoking {@link ticker.Ticker#update|update}.\n     * This value is used to cap {@link ticker.Ticker#deltaTime|deltaTime},\n     * but does not effect the measured value of {@link ticker.Ticker#FPS|FPS}.\n     * When setting this property it is clamped to a value between\n     * `0` and `Ticker.targetFPMS * 1000`.\n     * @member {number}\n     * @default 10\n     */\n    get minFPS(): number\n    {\n        return 1000 / this._maxElapsedMS;\n    }\n\n    set minFPS(fps: number)\n    {\n        // Minimum must be below the maxFPS\n        const minFPS = Math.min(this.maxFPS, fps);\n\n        // Must be at least 0, but below 1 / Ticker.targetFPMS\n        const minFPMS = Math.min(Math.max(0, minFPS) / 1000, Ticker.targetFPMS);\n\n        this._maxElapsedMS = 1 / minFPMS;\n    }\n\n    /**\n     * Manages the minimum amount of milliseconds required to\n     * elapse between invoking {@link ticker.Ticker#update|update}.\n     * This will effect the measured value of {@link ticker.Ticker#FPS|FPS}.\n     * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n     * Otherwise it will be at least `minFPS`\n     * @member {number}\n     * @default 0\n     */\n    get maxFPS(): number\n    {\n        if (this._minElapsedMS)\n        {\n            return Math.round(1000 / this._minElapsedMS);\n        }\n\n        return 0;\n    }\n\n    set maxFPS(fps: number)\n    {\n        if (fps === 0)\n        {\n            this._minElapsedMS = 0;\n        }\n        else\n        {\n            // Max must be at least the minFPS\n            const maxFPS = Math.max(this.minFPS, fps);\n\n            this._minElapsedMS = 1 / (maxFPS / 1000);\n        }\n    }\n\n    /**\n     * The shared ticker instance used by {@link AnimatedSprite} and by\n     * {@link VideoResource} to update animation frames / video textures.\n     *\n     * It may also be used by {@link Application} if created with the `sharedTicker` option property set to true.\n     *\n     * The property {@link ticker.Ticker#autoStart|autoStart} is set to `true` for this instance.\n     * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n     * @example\n     * import { Ticker } from 'pixi.js';\n     *\n     * const ticker = Ticker.shared;\n     * // Set this to prevent starting this ticker when listeners are added.\n     * // By default this is true only for the Ticker.shared instance.\n     * ticker.autoStart = false;\n     *\n     * // FYI, call this to ensure the ticker is stopped. It should be stopped\n     * // if you have not attempted to render anything yet.\n     * ticker.stop();\n     *\n     * // Call this when you are ready for a running shared ticker.\n     * ticker.start();\n     * @example\n     * import { autoDetectRenderer, Container } from 'pixi.js';\n     *\n     * // You may use the shared ticker to render...\n     * const renderer = autoDetectRenderer();\n     * const stage = new Container();\n     * document.body.appendChild(renderer.view);\n     * ticker.add((time) => renderer.render(stage));\n     *\n     * // Or you can just update it manually.\n     * ticker.autoStart = false;\n     * ticker.stop();\n     * const animate = (time) => {\n     *     ticker.update(time);\n     *     renderer.render(stage);\n     *     requestAnimationFrame(animate);\n     * };\n     * animate(performance.now());\n     * @member {ticker.Ticker}\n     * @readonly\n     * @static\n     */\n    static get shared(): Ticker\n    {\n        if (!Ticker._shared)\n        {\n            const shared = Ticker._shared = new Ticker();\n\n            shared.autoStart = true;\n            shared._protected = true;\n        }\n\n        return Ticker._shared;\n    }\n\n    /**\n     * The system ticker instance used by {@link BasePrepare} for core timing\n     * functionality that shouldn't usually need to be paused, unlike the `shared`\n     * ticker which drives visual animations and rendering which may want to be paused.\n     *\n     * The property {@link ticker.Ticker#autoStart|autoStart} is set to `true` for this instance.\n     * @member {ticker.Ticker}\n     * @readonly\n     * @static\n     */\n    static get system(): Ticker\n    {\n        if (!Ticker._system)\n        {\n            const system = Ticker._system = new Ticker();\n\n            system.autoStart = true;\n            system._protected = true;\n        }\n\n        return Ticker._system;\n    }\n}\n",null,"import type { Ticker, TickerCallback } from './Ticker';\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n * @private\n * @class\n */\nexport class TickerListener<T = any>\n{\n    /** The current priority. */\n    public priority: number;\n    /** The next item in chain. */\n    public next: TickerListener = null;\n    /** The previous item in chain. */\n    public previous: TickerListener = null;\n\n    /** The handler function to execute. */\n    private _fn: TickerCallback<T>;\n    /** The calling to execute. */\n    private _context: T;\n    /** If this should only execute once. */\n    private readonly _once: boolean;\n    /** `true` if this listener has been destroyed already. */\n    private _destroyed = false;\n\n    /**\n     * Constructor\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param priority - The priority for emitting\n     * @param once - If the handler should fire once\n     */\n    constructor(fn: TickerCallback<T>, context: T = null, priority = 0, once = false)\n    {\n        this._fn = fn;\n        this._context = context;\n        this.priority = priority;\n        this._once = once;\n    }\n\n    /**\n     * Simple compare function to figure out if a function and context match.\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @returns `true` if the listener match the arguments\n     */\n    public match(fn: TickerCallback<T>, context: any = null): boolean\n    {\n        return this._fn === fn && this._context === context;\n    }\n\n    /**\n     * Emit by calling the current function.\n     * @param ticker - The ticker emitting.\n     * @returns Next ticker\n     */\n    public emit(ticker: Ticker): TickerListener\n    {\n        if (this._fn)\n        {\n            if (this._context)\n            {\n                this._fn.call(this._context, ticker);\n            }\n            else\n            {\n                (this as TickerListener<any>)._fn(ticker);\n            }\n        }\n\n        const redirect = this.next;\n\n        if (this._once)\n        {\n            this.destroy(true);\n        }\n\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed)\n        {\n            this.next = null;\n        }\n\n        return redirect;\n    }\n\n    /**\n     * Connect to the list.\n     * @param previous - Input node, previous listener\n     */\n    public connect(previous: TickerListener): void\n    {\n        this.previous = previous;\n        if (previous.next)\n        {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param hard - `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @returns The listener to redirect while emitting or removing.\n     */\n    public destroy(hard = false): TickerListener\n    {\n        this._destroyed = true;\n        this._fn = null;\n        this._context = null;\n\n        // Disconnect, hook up next and previous\n        if (this.previous)\n        {\n            this.previous.next = this.next;\n        }\n\n        if (this.next)\n        {\n            this.next.previous = this.previous;\n        }\n\n        // Redirect to the next item\n        const redirect = this.next;\n\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n\n        return redirect;\n    }\n}\n",null,"import { extensions } from '../extensions/Extensions';\nimport { spritesheetAsset } from './spritesheetAsset';\n\nextensions.add(spritesheetAsset);\n",null,"import { LoaderParserPriority } from '../assets/loader/parsers/LoaderParser';\nimport { Resolver } from '../assets/resolver/Resolver';\nimport { copySearchParams } from '../assets/utils/copySearchParams';\nimport { ExtensionType } from '../extensions/Extensions';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { path } from '../utils/path';\nimport { Spritesheet } from './Spritesheet';\n\nimport type { AssetExtension } from '../assets/AssetExtension';\nimport type { Loader } from '../assets/loader/Loader';\nimport type { ResolvedAsset, UnresolvedAsset } from '../assets/types';\nimport type { SpritesheetData } from './Spritesheet';\n\nexport interface SpriteSheetJson extends SpritesheetData\n{\n    meta: {\n        image: string;\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\nconst validImages = ['jpg', 'png', 'jpeg', 'avif', 'webp',\n    'basis', 'etc2', 'bc7', 'bc6h', 'bc5', 'bc4', 'bc3', 'bc2', 'bc1', 'eac', 'astc'];\n\nfunction getCacheableAssets(keys: string[], asset: Spritesheet, ignoreMultiPack: boolean)\n{\n    const out: Record<string, any> = {};\n\n    keys.forEach((key: string) =>\n    {\n        out[key] = asset;\n    });\n\n    Object.keys(asset.textures).forEach((key) =>\n    {\n        out[key] = asset.textures[key];\n    });\n\n    if (!ignoreMultiPack)\n    {\n        const basePath = path.dirname(keys[0]);\n\n        asset.linkedSheets.forEach((item: Spritesheet, i) =>\n        {\n            const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n\n            Object.assign(out, out2);\n        });\n    }\n\n    return out;\n}\n\n/**\n * Asset extension for loading spritesheets\n * @example\n * import { Assets } from 'pixi.js';\n *\n * Assets.load({\n *     alias: 'spritesheet',\n *     src: 'path/to/spritesheet.json',\n *     data: {\n *         ignoreMultiPack: true,\n *     }\n * })\n * @type {AssetExtension}\n * @memberof assets\n */\nexport const spritesheetAsset = {\n    extension: ExtensionType.Asset,\n    /** Handle the caching of the related Spritesheet Textures */\n    cache: {\n        test: (asset: Spritesheet) => asset instanceof Spritesheet,\n        getCacheableAssets: (keys: string[], asset: Spritesheet) => getCacheableAssets(keys, asset, false),\n    },\n    /** Resolve the resolution of the asset. */\n    resolver: {\n        test: (value: string): boolean =>\n        {\n            const tempURL = value.split('?')[0];\n            const split = tempURL.split('.');\n            const extension = split.pop();\n            const format = split.pop();\n\n            return extension === 'json' && validImages.includes(format);\n        },\n        parse: (value: string): UnresolvedAsset =>\n        {\n            const split = value.split('.');\n\n            return {\n                resolution: parseFloat(Resolver.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                format: split[split.length - 2],\n                src: value,\n            };\n        },\n    },\n    /**\n     * Loader plugin that parses sprite sheets!\n     * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n     * If it is, we load the spritesheets image and parse the data into Spritesheet\n     * All textures in the sprite sheet are then added to the cache\n     */\n    loader: {\n        name: 'spritesheetLoader',\n\n        extension: {\n            type: ExtensionType.LoadParser,\n            priority: LoaderParserPriority.Normal,\n        },\n\n        async testParse(asset: SpriteSheetJson, options: ResolvedAsset): Promise<boolean>\n        {\n            return (path.extname(options.src).toLowerCase() === '.json' && !!asset.frames);\n        },\n\n        async parse(\n            asset: SpriteSheetJson,\n            options: ResolvedAsset<{texture: Texture, imageFilename: string, ignoreMultiPack: boolean}>,\n            loader: Loader\n        ): Promise<Spritesheet>\n        {\n            const {\n                texture: imageTexture, // if user need to use preloaded texture\n                imageFilename // if user need to use custom filename (not from jsonFile.meta.image)\n            } = options?.data ?? {};\n\n            let basePath = path.dirname(options.src);\n\n            if (basePath && basePath.lastIndexOf('/') !== (basePath.length - 1))\n            {\n                basePath += '/';\n            }\n\n            let texture: Texture;\n\n            if (imageTexture instanceof Texture)\n            {\n                texture = imageTexture;\n            }\n            else\n            {\n                const imagePath = copySearchParams(basePath + (imageFilename ?? asset.meta.image), options.src);\n\n                const assets = await loader.load<Texture>([imagePath]);\n\n                texture = assets[imagePath];\n            }\n\n            const spritesheet = new Spritesheet(\n                texture.source,\n                asset,\n            );\n\n            await spritesheet.parse();\n\n            // Check and add the multi atlas\n            // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n            // eslint-disable-next-line camelcase\n            const multiPacks = asset?.meta?.related_multi_packs;\n\n            if (Array.isArray(multiPacks))\n            {\n                const promises: Promise<Spritesheet<SpriteSheetJson>>[] = [];\n\n                for (const item of multiPacks)\n                {\n                    if (typeof item !== 'string')\n                    {\n                        continue;\n                    }\n\n                    let itemUrl = basePath + item;\n\n                    // Check if the file wasn't already added as multipack\n                    if (options.data?.ignoreMultiPack)\n                    {\n                        continue;\n                    }\n\n                    itemUrl = copySearchParams(itemUrl, options.src);\n\n                    promises.push(loader.load<Spritesheet<SpriteSheetJson>>({\n                        src: itemUrl,\n                        data: {\n                            ignoreMultiPack: true,\n                        }\n                    }));\n                }\n\n                const res = await Promise.all(promises);\n\n                spritesheet.linkedSheets = res;\n                res.forEach((item) =>\n                {\n                    item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => (sp !== item)));\n                });\n            }\n\n            return spritesheet;\n        },\n\n        async unload(spritesheet: Spritesheet, _resolvedAsset, loader)\n        {\n            await loader.unload(spritesheet.textureSource._sourceOrigin);\n\n            spritesheet.destroy(false);\n        },\n    },\n} as AssetExtension<Spritesheet | SpriteSheetJson>;\n",null,"import type { ExtensionMetadata } from '../../../extensions/Extensions';\nimport type { ResolvedAsset } from '../../types';\nimport type { Loader } from '../Loader';\n\n/**\n * The extension priority for loader parsers.\n * Helpful when managing multiple parsers that share the same extension test.\n * The higher priority parsers will be checked first.\n * @enum {number}\n */\nexport enum LoaderParserPriority\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /** Generic parsers: txt, json, webfonts */\n    Low = 0,\n    /** PixiJS assets with generic extensions: spritesheets, bitmapfonts  */\n    Normal = 1,\n    /** Specific texture types: svg, png, ktx, dds, basis */\n    High = 2,\n}\n\n/**\n * The interface to define a loader parser *(all functions are optional)*.\n *\n * When you create a `parser` object, the flow for every asset loaded is:\n *\n * 1. `parser.test()` - Each URL to load will be tested here, if the test is passed the assets are\n * loaded using the load function below. Good place to test for things like file extensions!\n * 2. `parser.load()` - This is the promise that loads the URL provided resolves with a loaded asset\n * if returned by the parser.\n * 3. `parser.testParse()` - This function is used to test if the parse function should be run on the\n *  asset If this returns true then parse is called with the asset\n * 4. `parse.parse()` - Gets called on the asset it testParse passes. Useful to convert a raw asset\n *  into something more useful\n *\n * <br/>\n * Some loaders may only be used for parsing, some only for loading, and some for both!\n * @memberof assets\n */\nexport interface LoaderParser<ASSET = any, META_DATA = any, CONFIG = Record<string, any>>\n{\n    /** Should be ExtensionType.LoaderParser */\n    extension?: ExtensionMetadata;\n\n    /** A config to adjust the parser */\n    config?: CONFIG;\n\n    /** The name of the parser (this can be used when specifying loadParser in a ResolvedAsset) */\n    name: string;\n\n    /**\n     * Each URL to load will be tested here,\n     * if the test is passed the assets are loaded using the load function below.\n     * Good place to test for things like file extensions!\n     * @param url - The URL to test\n     * @param resolvedAsset - Any custom additional information relevant to the asset being loaded\n     * @param loader - The loader instance\n     */\n    test?: (url: string, resolvedAsset?: ResolvedAsset<META_DATA>, loader?: Loader) => boolean;\n\n    /**\n     * This is the promise that loads the URL provided\n     * resolves with a loaded asset if returned by the parser.\n     * @param url - The URL to load\n     * @param resolvedAsset - Any custom additional information relevant to the asset being loaded\n     * @param loader - The loader instance\n     */\n    load?: <T>(url: string, resolvedAsset?: ResolvedAsset<META_DATA>, loader?: Loader) => Promise<T>;\n\n    /**\n     * This function is used to test if the parse function should be run on the asset\n     * If this returns true then parse is called with the asset\n     * @param asset - The loaded asset data\n     * @param resolvedAsset - Any custom additional information relevant to the asset being loaded\n     * @param loader - The loader instance\n     */\n    testParse?: (asset: ASSET, resolvedAsset?: ResolvedAsset<META_DATA>, loader?: Loader) => Promise<boolean>;\n\n    /**\n     * Gets called on the asset it testParse passes. Useful to convert a raw asset into something more useful\n     * @param asset - The loaded asset data\n     * @param resolvedAsset - Any custom additional information relevant to the asset being loaded\n     * @param loader - The loader instance\n     */\n    parse?: <T>(asset: ASSET, resolvedAsset?: ResolvedAsset<META_DATA>, loader?: Loader) => Promise<T>;\n\n    /**\n     * If an asset is parsed using this parser, the unload function will be called when the user requests an asset\n     * to be unloaded. This is useful for things like sounds or textures that can be unloaded from memory\n     * @param asset - The asset to unload/destroy\n     * @param resolvedAsset - Any custom additional information relevant to the asset being loaded\n     * @param loader - The loader instance\n     */\n    unload?: (asset: ASSET, resolvedAsset?: ResolvedAsset<META_DATA>, loader?: Loader) => Promise<void>;\n}\n",null,"import { warn } from '../../utils/logging/warn';\nimport { path } from '../../utils/path';\nimport { convertToList } from '../utils/convertToList';\nimport { createStringVariations } from '../utils/createStringVariations';\nimport { isSingleItem } from '../utils/isSingleItem';\n\nimport type {\n    ArrayOr,\n    AssetsBundle,\n    AssetsManifest,\n    AssetSrc,\n    ResolvedAsset,\n    ResolvedSrc,\n    UnresolvedAsset,\n} from '../types';\nimport type { PreferOrder, ResolveURLParser } from './types';\n\n/**\n * Options for how the resolver deals with generating bundle ids\n * @memberof assets\n */\nexport interface BundleIdentifierOptions\n{\n    /** The character that is used to connect the bundleId and the assetId when generating a bundle asset id key */\n    connector?: string;\n    /**\n     * A function that generates a bundle asset id key from a bundleId and an assetId\n     * @param bundleId - the bundleId\n     * @param assetId  - the assetId\n     * @returns the bundle asset id key\n     */\n    createBundleAssetId?: (bundleId: string, assetId: string) => string;\n    /**\n     * A function that generates an assetId from a bundle asset id key. This is the reverse of generateBundleAssetId\n     * @param bundleId - the bundleId\n     * @param assetBundleId - the bundle asset id key\n     * @returns the assetId\n     */\n    extractAssetIdFromBundle?: (bundleId: string, assetBundleId: string) => string;\n}\n\n/**\n * A class that is responsible for resolving mapping asset URLs to keys.\n * At its most basic it can be used for Aliases:\n *\n * ```js\n * resolver.add('foo', 'bar');\n * resolver.resolveUrl('foo') // => 'bar'\n * ```\n *\n * It can also be used to resolve the most appropriate asset for a given URL:\n *\n * ```js\n * resolver.prefer({\n *     params: {\n *         format: 'webp',\n *         resolution: 2,\n *     }\n * });\n *\n * resolver.add('foo', ['bar@2x.webp', 'bar@2x.png', 'bar.webp', 'bar.png']);\n *\n * resolver.resolveUrl('foo') // => 'bar@2x.webp'\n * ```\n * Other features include:\n * - Ability to process a manifest file to get the correct understanding of how to resolve all assets\n * - Ability to add custom parsers for specific file types\n * - Ability to add custom prefer rules\n *\n * This class only cares about the URL, not the loading of the asset itself.\n *\n * It is not intended that this class is created by developers - its part of the Asset class\n * This is the third major system of PixiJS' main Assets class\n * @memberof assets\n */\nexport class Resolver\n{\n    /**\n     * The prefix that denotes a URL is for a retina asset.\n     * @static\n     * @name RETINA_PREFIX\n     * @type {RegExp}\n     * @default /@([0-9\\.]+)x/\n     * @example `@2x`\n     */\n    public static RETINA_PREFIX = /@([0-9\\.]+)x/;\n\n    private readonly _defaultBundleIdentifierOptions: Required<BundleIdentifierOptions> = {\n        connector: '-',\n        createBundleAssetId: (bundleId, assetId) =>\n            `${bundleId}${this._bundleIdConnector}${assetId}`,\n        extractAssetIdFromBundle: (bundleId, assetBundleId) =>\n            assetBundleId.replace(`${bundleId}${this._bundleIdConnector}`, ''),\n    };\n\n    /** The character that is used to connect the bundleId and the assetId when generating a bundle asset id key */\n    private _bundleIdConnector = this._defaultBundleIdentifierOptions.connector;\n\n    /**\n     * A function that generates a bundle asset id key from a bundleId and an assetId\n     * @param bundleId - the bundleId\n     * @param assetId  - the assetId\n     * @returns the bundle asset id key\n     */\n    private _createBundleAssetId: (\n        bundleId: string,\n        assetId: string\n    ) => string = this._defaultBundleIdentifierOptions.createBundleAssetId;\n\n    /**\n     * A function that generates an assetId from a bundle asset id key. This is the reverse of generateBundleAssetId\n     * @param bundleId - the bundleId\n     * @param assetBundleId - the bundle asset id key\n     * @returns the assetId\n     */\n    private _extractAssetIdFromBundle: (\n        bundleId: string,\n        assetBundleId: string\n    ) => string = this._defaultBundleIdentifierOptions.extractAssetIdFromBundle;\n\n    private _assetMap: Record<string, ResolvedAsset[]> = {};\n    private _preferredOrder: PreferOrder[] = [];\n    private readonly _parsers: ResolveURLParser[] = [];\n\n    private _resolverHash: Record<string, ResolvedAsset> = {};\n    private _rootPath: string;\n    private _basePath: string;\n    private _manifest: AssetsManifest;\n    private _bundles: Record<string, string[]> = {};\n    private _defaultSearchParams: string;\n\n    /**\n     * Override how the resolver deals with generating bundle ids.\n     * must be called before any bundles are added\n     * @param bundleIdentifier - the bundle identifier options\n     */\n    public setBundleIdentifier(bundleIdentifier: BundleIdentifierOptions): void\n    {\n        this._bundleIdConnector = bundleIdentifier.connector ?? this._bundleIdConnector;\n        this._createBundleAssetId = bundleIdentifier.createBundleAssetId ?? this._createBundleAssetId;\n        this._extractAssetIdFromBundle = bundleIdentifier.extractAssetIdFromBundle ?? this._extractAssetIdFromBundle;\n\n        if (this._extractAssetIdFromBundle('foo', this._createBundleAssetId('foo', 'bar')) !== 'bar')\n        {\n            throw new Error('[Resolver] GenerateBundleAssetId are not working correctly');\n        }\n    }\n\n    /**\n     * Let the resolver know which assets you prefer to use when resolving assets.\n     * Multiple prefer user defined rules can be added.\n     * @example\n     * resolver.prefer({\n     *     // first look for something with the correct format, and then then correct resolution\n     *     priority: ['format', 'resolution'],\n     *     params:{\n     *         format:'webp', // prefer webp images\n     *         resolution: 2, // prefer a resolution of 2\n     *     }\n     * })\n     * resolver.add('foo', ['bar@2x.webp', 'bar@2x.png', 'bar.webp', 'bar.png']);\n     * resolver.resolveUrl('foo') // => 'bar@2x.webp'\n     * @param preferOrders - the prefer options\n     */\n    public prefer(...preferOrders: PreferOrder[]): void\n    {\n        preferOrders.forEach((prefer) =>\n        {\n            this._preferredOrder.push(prefer);\n\n            if (!prefer.priority)\n            {\n                // generate the priority based on the order of the object\n                prefer.priority = Object.keys(prefer.params);\n            }\n        });\n\n        this._resolverHash = {};\n    }\n\n    /**\n     * Set the base path to prepend to all urls when resolving\n     * @example\n     * resolver.basePath = 'https://home.com/';\n     * resolver.add('foo', 'bar.ong');\n     * resolver.resolveUrl('foo', 'bar.png'); // => 'https://home.com/bar.png'\n     * @param basePath - the base path to use\n     */\n    public set basePath(basePath: string)\n    {\n        this._basePath = basePath;\n    }\n\n    public get basePath(): string\n    {\n        return this._basePath;\n    }\n\n    /**\n     * Set the root path for root-relative URLs. By default the `basePath`'s root is used. If no `basePath` is set, then the\n     * default value for browsers is `window.location.origin`\n     * @example\n     * // Application hosted on https://home.com/some-path/index.html\n     * resolver.basePath = 'https://home.com/some-path/';\n     * resolver.rootPath = 'https://home.com/';\n     * resolver.add('foo', '/bar.png');\n     * resolver.resolveUrl('foo', '/bar.png'); // => 'https://home.com/bar.png'\n     * @param rootPath - the root path to use\n     */\n    public set rootPath(rootPath: string)\n    {\n        this._rootPath = rootPath;\n    }\n\n    public get rootPath(): string\n    {\n        return this._rootPath;\n    }\n\n    /**\n     * All the active URL parsers that help the parser to extract information and create\n     * an asset object-based on parsing the URL itself.\n     *\n     * Can be added using the extensions API\n     * @example\n     * resolver.add('foo', [\n     *     {\n     *         resolution: 2,\n     *         format: 'png',\n     *         src: 'image@2x.png',\n     *     },\n     *     {\n     *         resolution:1,\n     *         format:'png',\n     *         src: 'image.png',\n     *     },\n     * ]);\n     *\n     * // With a url parser the information such as resolution and file format could extracted from the url itself:\n     * extensions.add({\n     *     extension: ExtensionType.ResolveParser,\n     *     test: loadTextures.test, // test if url ends in an image\n     *     parse: (value: string) =>\n     *     ({\n     *         resolution: parseFloat(Resolver.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n     *         format: value.split('.').pop(),\n     *         src: value,\n     *     }),\n     * });\n     *\n     * // Now resolution and format can be extracted from the url\n     * resolver.add('foo', [\n     *     'image@2x.png',\n     *     'image.png',\n     * ]);\n     */\n    public get parsers(): ResolveURLParser[]\n    {\n        return this._parsers;\n    }\n\n    /** Used for testing, this resets the resolver to its initial state */\n    public reset(): void\n    {\n        this.setBundleIdentifier(this._defaultBundleIdentifierOptions);\n\n        this._assetMap = {};\n        this._preferredOrder = [];\n        // Do not reset this._parsers\n\n        this._resolverHash = {};\n        this._rootPath = null;\n        this._basePath = null;\n        this._manifest = null;\n        this._bundles = {};\n        this._defaultSearchParams = null;\n    }\n\n    /**\n     * Sets the default URL search parameters for the URL resolver. The urls can be specified as a string or an object.\n     * @param searchParams - the default url parameters to append when resolving urls\n     */\n    public setDefaultSearchParams(searchParams: string | Record<string, unknown>): void\n    {\n        if (typeof searchParams === 'string')\n        {\n            this._defaultSearchParams = searchParams;\n        }\n        else\n        {\n            const queryValues = searchParams as Record<string, any>;\n\n            this._defaultSearchParams = Object.keys(queryValues)\n                .map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(queryValues[key])}`)\n                .join('&');\n        }\n    }\n\n    /**\n     * Returns the aliases for a given asset\n     * @param asset - the asset to get the aliases for\n     */\n    public getAlias(asset: UnresolvedAsset): string[]\n    {\n        const { alias, src } = asset;\n        const aliasesToUse = convertToList<ArrayOr<string | AssetSrc>>(\n            alias || src, (value: string | AssetSrc) =>\n            {\n                if (typeof value === 'string') return value;\n\n                if (Array.isArray(value)) return value.map((v) => (v as ResolvedSrc)?.src ?? v);\n\n                if (value?.src) return value.src;\n\n                return value;\n            }, true) as string[];\n\n        return aliasesToUse;\n    }\n\n    /**\n     * Add a manifest to the asset resolver. This is a nice way to add all the asset information in one go.\n     * generally a manifest would be built using a tool.\n     * @param manifest - the manifest to add to the resolver\n     */\n    public addManifest(manifest: AssetsManifest): void\n    {\n        if (this._manifest)\n        {\n            // #if _DEBUG\n            warn('[Resolver] Manifest already exists, this will be overwritten');\n            // #endif\n        }\n\n        this._manifest = manifest;\n\n        manifest.bundles.forEach((bundle) =>\n        {\n            this.addBundle(bundle.name, bundle.assets);\n        });\n    }\n\n    /**\n     * This adds a bundle of assets in one go so that you can resolve them as a group.\n     * For example you could add a bundle for each screen in you pixi app\n     * @example\n     * resolver.addBundle('animals', [\n     *  { alias: 'bunny', src: 'bunny.png' },\n     *  { alias: 'chicken', src: 'chicken.png' },\n     *  { alias: 'thumper', src: 'thumper.png' },\n     * ]);\n     * // or\n     * resolver.addBundle('animals', {\n     *     bunny: 'bunny.png',\n     *     chicken: 'chicken.png',\n     *     thumper: 'thumper.png',\n     * });\n     *\n     * const resolvedAssets = await resolver.resolveBundle('animals');\n     * @param bundleId - The id of the bundle to add\n     * @param assets - A record of the asset or assets that will be chosen from when loading via the specified key\n     */\n    public addBundle(bundleId: string, assets: AssetsBundle['assets']): void\n    {\n        const assetNames: string[] = [];\n        let convertedAssets: UnresolvedAsset[] = assets as UnresolvedAsset[];\n\n        if (!Array.isArray(assets))\n        {\n            // convert to array...\n            convertedAssets = Object.entries(assets).map(([alias, src]) =>\n            {\n                if (typeof src === 'string' || Array.isArray(src))\n                {\n                    return { alias, src };\n                }\n\n                return { alias, ...src };\n            });\n        }\n\n        // when storing keys against a bundle we prepend the bundleId to each asset key\n        // and pass it through as an additional alias for the asset\n        // this keeps clashing ids separate on a per-bundle basis\n        // you can also resolve a file using the bundleId-assetId syntax\n\n        convertedAssets.forEach((asset) =>\n        {\n            const srcs = asset.src;\n            const aliases = asset.alias;\n            let ids: string[];\n\n            if (typeof aliases === 'string')\n            {\n                const bundleAssetId = this._createBundleAssetId(bundleId, aliases);\n\n                assetNames.push(bundleAssetId);\n                ids = [aliases, bundleAssetId];\n            }\n            else\n            {\n                const bundleIds = aliases.map((name) => this._createBundleAssetId(bundleId, name));\n\n                assetNames.push(...bundleIds);\n                ids = [...aliases, ...bundleIds];\n            }\n\n            this.add({\n                ...asset,\n                ...{\n                    alias: ids,\n                    src: srcs,\n                }\n            });\n        });\n\n        this._bundles[bundleId] = assetNames;\n    }\n\n    /**\n     * Tells the resolver what keys are associated with witch asset.\n     * The most important thing the resolver does\n     * @example\n     * // Single key, single asset:\n     * resolver.add({alias: 'foo', src: 'bar.png');\n     * resolver.resolveUrl('foo') // => 'bar.png'\n     *\n     * // Multiple keys, single asset:\n     * resolver.add({alias: ['foo', 'boo'], src: 'bar.png'});\n     * resolver.resolveUrl('foo') // => 'bar.png'\n     * resolver.resolveUrl('boo') // => 'bar.png'\n     *\n     * // Multiple keys, multiple assets:\n     * resolver.add({alias: ['foo', 'boo'], src: ['bar.png', 'bar.webp']});\n     * resolver.resolveUrl('foo') // => 'bar.png'\n     *\n     * // Add custom data attached to the resolver\n     * Resolver.add({\n     *     alias: 'bunnyBooBooSmooth',\n     *     src: 'bunny{png,webp}',\n     *     data: { scaleMode:SCALE_MODES.NEAREST }, // Base texture options\n     * });\n     *\n     * resolver.resolve('bunnyBooBooSmooth') // => { src: 'bunny.png', data: { scaleMode: SCALE_MODES.NEAREST } }\n     * @param aliases - the UnresolvedAsset or array of UnresolvedAssets to add to the resolver\n     */\n    public add(\n        aliases: ArrayOr<UnresolvedAsset>,\n    ): void\n    {\n        const assets: UnresolvedAsset[] = [];\n\n        if (Array.isArray(aliases))\n        {\n            assets.push(...(aliases as UnresolvedAsset[]));\n        }\n        else\n        {\n            assets.push(aliases as UnresolvedAsset);\n        }\n\n        let keyCheck: (key: string) => void;\n\n        // #if _DEBUG\n        // eslint-disable-next-line prefer-const\n        keyCheck = (key: string) =>\n        {\n            if (this.hasKey(key))\n            {\n                // #if _DEBUG\n                warn(`[Resolver] already has key: ${key} overwriting`);\n                // #endif\n            }\n        };\n        // #endif\n\n        const assetArray = convertToList(assets);\n\n        // loop through all the assets and generate a resolve asset for each src\n        assetArray.forEach((asset) =>\n        {\n            const { src } = asset;\n            let { data, format, loadParser } = asset;\n\n            // src can contain an unresolved asset itself\n            // so we need to merge that data with the current asset\n            // we dont need to create string variations for the src if it is a ResolvedAsset\n            const srcsToUse: (string | ResolvedSrc)[][] = convertToList<AssetSrc>(src).map((src) =>\n            {\n                if (typeof src === 'string')\n                { return createStringVariations(src); }\n\n                return Array.isArray(src) ? src : [src];\n            });\n\n            const aliasesToUse = this.getAlias(asset);\n\n            // #if _DEBUG\n            Array.isArray(aliasesToUse) ? aliasesToUse.forEach(keyCheck) : keyCheck(aliasesToUse);\n            // #endif\n\n            // loop through all the srcs and generate a resolve asset for each src\n            const resolvedAssets: ResolvedAsset[] = [];\n\n            srcsToUse.forEach((srcs) =>\n            {\n                srcs.forEach((src) =>\n                {\n                    let formattedAsset = {} as ResolvedAsset;\n\n                    if (typeof src !== 'object')\n                    {\n                        formattedAsset.src = src;\n                        // first see if it contains any {} tags...\n                        for (let i = 0; i < this._parsers.length; i++)\n                        {\n                            const parser = this._parsers[i];\n\n                            if (parser.test(src))\n                            {\n                                formattedAsset = parser.parse(src);\n                                break;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        data = src.data ?? data;\n                        format = src.format ?? format;\n                        loadParser = src.loadParser ?? loadParser;\n                        formattedAsset = {\n                            ...formattedAsset,\n                            ...src,\n                        };\n                    }\n\n                    // check if aliases is undefined\n                    if (!aliasesToUse)\n                    {\n                        throw new Error(`[Resolver] alias is undefined for this asset: ${formattedAsset.src}`);\n                    }\n\n                    formattedAsset = this._buildResolvedAsset(formattedAsset, {\n                        aliases: aliasesToUse,\n                        data,\n                        format,\n                        loadParser,\n                    });\n\n                    resolvedAssets.push(formattedAsset);\n                });\n            });\n\n            aliasesToUse.forEach((alias) =>\n            {\n                this._assetMap[alias] = resolvedAssets;\n            });\n        });\n    }\n\n    // TODO: this needs an overload like load did in Assets\n    /**\n     * If the resolver has had a manifest set via setManifest, this will return the assets urls for\n     * a given bundleId or bundleIds.\n     * @example\n     * // Manifest Example\n     * const manifest = {\n     *     bundles: [\n     *         {\n     *             name: 'load-screen',\n     *             assets: [\n     *                 {\n     *                     alias: 'background',\n     *                     src: 'sunset.png',\n     *                 },\n     *                 {\n     *                     alias: 'bar',\n     *                     src: 'load-bar.{png,webp}',\n     *                 },\n     *             ],\n     *         },\n     *         {\n     *             name: 'game-screen',\n     *             assets: [\n     *                 {\n     *                     alias: 'character',\n     *                     src: 'robot.png',\n     *                 },\n     *                 {\n     *                     alias: 'enemy',\n     *                     src: 'bad-guy.png',\n     *                 },\n     *             ],\n     *         },\n     *     ]\n     * };\n     *\n     * resolver.setManifest(manifest);\n     * const resolved = resolver.resolveBundle('load-screen');\n     * @param bundleIds - The bundle ids to resolve\n     * @returns All the bundles assets or a hash of assets for each bundle specified\n     */\n    public resolveBundle(bundleIds: ArrayOr<string>):\n    Record<string, ResolvedAsset> | Record<string, Record<string, ResolvedAsset>>\n    {\n        const singleAsset = isSingleItem(bundleIds);\n\n        bundleIds = convertToList<string>(bundleIds);\n\n        const out: Record<string, Record<string, ResolvedAsset>> = {};\n\n        bundleIds.forEach((bundleId) =>\n        {\n            const assetNames = this._bundles[bundleId];\n\n            if (assetNames)\n            {\n                const results = this.resolve(assetNames) as Record<string, ResolvedAsset>;\n\n                const assets: Record<string, ResolvedAsset> = {};\n\n                for (const key in results)\n                {\n                    const asset = results[key];\n\n                    assets[this._extractAssetIdFromBundle(bundleId, key)] = asset;\n                }\n\n                out[bundleId] = assets;\n            }\n        });\n\n        return singleAsset ? out[bundleIds[0]] : out;\n    }\n\n    /**\n     * Does exactly what resolve does, but returns just the URL rather than the whole asset object\n     * @param key - The key or keys to resolve\n     * @returns - The URLs associated with the key(s)\n     */\n    public resolveUrl(key: ArrayOr<string>): string | Record<string, string>\n    {\n        const result = this.resolve(key as string) as ResolvedAsset | Record<string, ResolvedAsset>;\n\n        if (typeof key !== 'string')\n        {\n            const out: Record<string, string> = {};\n\n            for (const i in result)\n            {\n                out[i] = (result as Record<string, ResolvedAsset>)[i].src;\n            }\n\n            return out;\n        }\n\n        return (result as ResolvedAsset).src;\n    }\n\n    /**\n     * Resolves each key in the list to an asset object.\n     * Another key function of the resolver! After adding all the various key/asset pairs. this will run the logic\n     * of finding which asset to return based on any preferences set using the `prefer` function\n     * by default the same key passed in will be returned if nothing is matched by the resolver.\n     * @example\n     * resolver.add('boo', 'bunny.png');\n     *\n     * resolver.resolve('boo') // => { src: 'bunny.png' }\n     *\n     * // Will return the same string as no key was added for this value..\n     * resolver.resolve('another-thing.png') // => { src: 'another-thing.png' }\n     * @param keys - key or keys to resolve\n     * @returns - the resolve asset or a hash of resolve assets for each key specified\n     */\n    public resolve(keys: string): ResolvedAsset;\n    public resolve(keys: string[]): Record<string, ResolvedAsset>;\n    public resolve(keys: ArrayOr<string>): ResolvedAsset | Record<string, ResolvedAsset>\n    {\n        const singleAsset = isSingleItem(keys);\n\n        keys = convertToList<string>(keys);\n\n        const result: Record<string, ResolvedAsset> = {};\n\n        keys.forEach((key) =>\n        {\n            if (!this._resolverHash[key])\n            {\n                if (this._assetMap[key])\n                {\n                    let assets = this._assetMap[key];\n                    const preferredOrder = this._getPreferredOrder(assets);\n\n                    preferredOrder?.priority.forEach((priorityKey) =>\n                    {\n                        preferredOrder.params[priorityKey].forEach((value: unknown) =>\n                        {\n                            const filteredAssets = assets.filter((asset) =>\n                            {\n                                if (asset[priorityKey as keyof ResolvedAsset])\n                                {\n                                    return asset[priorityKey as keyof ResolvedAsset] === value;\n                                }\n\n                                return false;\n                            });\n\n                            if (filteredAssets.length)\n                            {\n                                assets = filteredAssets;\n                            }\n                        });\n                    });\n\n                    this._resolverHash[key] = assets[0];\n                }\n                else\n                {\n                    this._resolverHash[key] = this._buildResolvedAsset({\n                        alias: [key],\n                        src: key,\n                    }, {});\n                }\n            }\n\n            result[key] = this._resolverHash[key];\n        });\n\n        return singleAsset ? result[keys[0]] : result;\n    }\n\n    /**\n     * Checks if an asset with a given key exists in the resolver\n     * @param key - The key of the asset\n     */\n    public hasKey(key: string): boolean\n    {\n        return !!this._assetMap[key];\n    }\n\n    /**\n     * Checks if a bundle with the given key exists in the resolver\n     * @param key - The key of the bundle\n     */\n    public hasBundle(key: string): boolean\n    {\n        return !!this._bundles[key];\n    }\n\n    /**\n     * Internal function for figuring out what prefer criteria an asset should use.\n     * @param assets\n     */\n    private _getPreferredOrder(assets: ResolvedAsset[]): PreferOrder\n    {\n        for (let i = 0; i < assets.length; i++)\n        {\n            const asset = assets[0];\n\n            const preferred = this._preferredOrder.find((preference: PreferOrder) =>\n                preference.params.format.includes(asset.format));\n\n            if (preferred)\n            {\n                return preferred;\n            }\n        }\n\n        return this._preferredOrder[0];\n    }\n\n    /**\n     * Appends the default url parameters to the url\n     * @param url - The url to append the default parameters to\n     * @returns - The url with the default parameters appended\n     */\n    private _appendDefaultSearchParams(url: string): string\n    {\n        if (!this._defaultSearchParams) return url;\n\n        const paramConnector = (/\\?/).test(url) ? '&' : '?';\n\n        return `${url}${paramConnector}${this._defaultSearchParams}`;\n    }\n\n    private _buildResolvedAsset(formattedAsset: ResolvedAsset, data?: {\n        aliases?: string[],\n        data?: Record<string, unknown>\n        loadParser?: string,\n        format?: string,\n    }): ResolvedAsset\n    {\n        const { aliases, data: assetData, loadParser, format } = data;\n\n        if (this._basePath || this._rootPath)\n        {\n            formattedAsset.src = path.toAbsolute(formattedAsset.src, this._basePath, this._rootPath);\n        }\n\n        formattedAsset.alias = aliases ?? formattedAsset.alias ?? [formattedAsset.src];\n        formattedAsset.src = this._appendDefaultSearchParams(formattedAsset.src);\n        formattedAsset.data = { ...assetData || {}, ...formattedAsset.data };\n        formattedAsset.loadParser = loadParser ?? formattedAsset.loadParser;\n        formattedAsset.format = format ?? formattedAsset.format ?? getUrlExtension(formattedAsset.src);\n\n        return formattedAsset;\n    }\n}\n\nexport function getUrlExtension(url: string)\n{\n    return url.split('.').pop().split('?').shift()\n        .split('#')\n        .shift();\n}\n",null,"import { DOMAdapter } from '../environment/adapter';\n\nfunction assertPath(path: string)\n{\n    if (typeof path !== 'string')\n    {\n        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);\n    }\n}\n\nfunction removeUrlParams(url: string): string\n{\n    const re = url.split('?')[0];\n\n    return re.split('#')[0];\n}\n\nfunction escapeRegExp(string: string)\n{\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction replaceAll(str: string, find: string, replace: string)\n{\n    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path: string, allowAboveRoot: boolean)\n{\n    let res = '';\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let code = -1;\n\n    for (let i = 0; i <= path.length; ++i)\n    {\n        if (i < path.length)\n        {\n            code = path.charCodeAt(i);\n        }\n        else if (code === 47)\n        {\n            break;\n        }\n        else\n        {\n            code = 47;\n        }\n        if (code === 47)\n        {\n            if (lastSlash === i - 1 || dots === 1)\n            {\n                // NOOP\n            }\n            else if (lastSlash !== i - 1 && dots === 2)\n            {\n                if (\n                    res.length < 2\n                    || lastSegmentLength !== 2\n                    || res.charCodeAt(res.length - 1) !== 46\n                    || res.charCodeAt(res.length - 2) !== 46\n                )\n                {\n                    if (res.length > 2)\n                    {\n                        const lastSlashIndex = res.lastIndexOf('/');\n\n                        if (lastSlashIndex !== res.length - 1)\n                        {\n                            if (lastSlashIndex === -1)\n                            {\n                                res = '';\n                                lastSegmentLength = 0;\n                            }\n                            else\n                            {\n                                res = res.slice(0, lastSlashIndex);\n                                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n                            }\n                            lastSlash = i;\n                            dots = 0;\n                            continue;\n                        }\n                    }\n                    else if (res.length === 2 || res.length === 1)\n                    {\n                        res = '';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot)\n                {\n                    if (res.length > 0)\n                    { res += '/..'; }\n                    else\n                    { res = '..'; }\n                    lastSegmentLength = 2;\n                }\n            }\n            else\n            {\n                if (res.length > 0)\n                {\n                    res += `/${path.slice(lastSlash + 1, i)}`;\n                }\n                else\n                {\n                    res = path.slice(lastSlash + 1, i);\n                }\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === 46 && dots !== -1)\n        {\n            ++dots;\n        }\n        else\n        {\n            dots = -1;\n        }\n    }\n\n    return res;\n}\n\n/**\n * Path utilities for working with URLs and file paths in a cross-platform way.\n * All paths that are passed in will become normalized to have posix separators.\n * ```js\n * import { path } from 'pixi.js';\n *\n * path.normalize('http://www.example.com/foo/bar/../baz'); // http://www.example.com/foo/baz\n * ```\n * @memberof utils\n */\nexport interface Path\n{\n    /**\n     * Converts a path to posix format.\n     * @param path - The path to convert to posix\n     */\n    toPosix: (path: string) => string;\n    /**\n     * Checks if the path is a URL e.g. http://, https://\n     * @param path - The path to check\n     */\n    isUrl: (path: string) => boolean;\n    /**\n     * Checks if the path is a data URL\n     * @param path - The path to check\n     */\n    isDataUrl: (path: string) => boolean;\n    /**\n     * Checks if the path is a blob URL\n     * @param path - The path to check\n     */\n    isBlobUrl: (path: string) => boolean;\n    /**\n     * Checks if the path has a protocol e.g. http://, https://, file:///, data:, blob:, C:/\n     * This will return true for windows file paths\n     * @param path - The path to check\n     */\n    hasProtocol: (path: string) => boolean;\n    /**\n     * Returns the protocol of the path e.g. http://, https://, file:///, data:, blob:, C:/\n     * @param path - The path to get the protocol from\n     */\n    getProtocol: (path: string) => string;\n    /**\n     * Converts URL to an absolute path.\n     * When loading from a Web Worker, we must use absolute paths.\n     * If the URL is already absolute we return it as is\n     * If it's not, we convert it\n     * @param url - The URL to test\n     * @param customBaseUrl - The base URL to use\n     * @param customRootUrl - The root URL to use\n     */\n    toAbsolute: (url: string, baseUrl?: string, rootUrl?: string) => string;\n    /**\n     * Normalizes the given path, resolving '..' and '.' segments\n     * @param path - The path to normalize\n     */\n    normalize: (path: string) => string;\n    /**\n     * Determines if path is an absolute path.\n     * Absolute paths can be urls, data urls, or paths on disk\n     * @param path - The path to test\n     */\n    isAbsolute: (path: string) => boolean;\n    /**\n     * Joins all given path segments together using the platform-specific separator as a delimiter,\n     * then normalizes the resulting path\n     * @param segments - The segments of the path to join\n     */\n    join: (...paths: string[]) => string;\n    /**\n     * Returns the directory name of a path\n     * @param path - The path to parse\n     */\n    dirname: (path: string) => string;\n    /**\n     * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n     * @param path - The path to parse\n     */\n    rootname: (path: string) => string;\n    /**\n     * Returns the last portion of a path\n     * @param path - The path to test\n     * @param ext - Optional extension to remove\n     */\n    basename: (path: string, ext?: string) => string;\n    /**\n     * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n     * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n     * the first character of the basename of path, an empty string is returned.\n     * @param path - The path to parse\n     */\n    extname: (path: string) => string;\n    /**\n     * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n     * @param path - The path to parse\n     */\n    parse: (path: string) => { root?: string, dir?: string, base?: string, ext?: string, name?: string };\n    sep: string,\n    delimiter: string,\n    joinExtensions: string[],\n}\n\n/**\n * Path utilities for working with URLs and file paths in a cross-platform way.\n * All paths that are passed in will become normalized to have posix separators.\n * ```js\n * import { path } from 'pixi.js';\n *\n * path.normalize('http://www.example.com/foo/bar/../baz'); // http://www.example.com/foo/baz\n * ```\n * @see {@link utils.Path}\n * @memberof utils\n */\nexport const path: Path = {\n    /**\n     * Converts a path to posix format.\n     * @param path - The path to convert to posix\n     */\n    toPosix(path: string) { return replaceAll(path, '\\\\', '/'); },\n    /**\n     * Checks if the path is a URL e.g. http://, https://\n     * @param path - The path to check\n     */\n    isUrl(path: string) { return (/^https?:/).test(this.toPosix(path)); },\n    /**\n     * Checks if the path is a data URL\n     * @param path - The path to check\n     */\n    isDataUrl(path: string)\n    {\n        // eslint-disable-next-line max-len\n        return (/^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i)\n            .test(path);\n    },\n    /**\n     * Checks if the path is a blob URL\n     * @param path - The path to check\n     */\n    isBlobUrl(path: string)\n    {\n        // Not necessary to have an exact regex to match the blob URLs\n        return path.startsWith('blob:');\n    },\n    /**\n     * Checks if the path has a protocol e.g. http://, https://, file:///, data:, blob:, C:/\n     * This will return true for windows file paths\n     * @param path - The path to check\n     */\n    hasProtocol(path: string) { return (/^[^/:]+:/).test(this.toPosix(path)); },\n    /**\n     * Returns the protocol of the path e.g. http://, https://, file:///, data:, blob:, C:/\n     * @param path - The path to get the protocol from\n     */\n    getProtocol(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        const matchFile = (/^file:\\/\\/\\//).exec(path);\n\n        if (matchFile)\n        {\n            return matchFile[0];\n        }\n\n        const matchProtocol = (/^[^/:]+:\\/{0,2}/).exec(path);\n\n        if (matchProtocol)\n        {\n            return matchProtocol[0];\n        }\n\n        return '';\n    },\n\n    /**\n     * Converts URL to an absolute path.\n     * When loading from a Web Worker, we must use absolute paths.\n     * If the URL is already absolute we return it as is\n     * If it's not, we convert it\n     * @param url - The URL to test\n     * @param customBaseUrl - The base URL to use\n     * @param customRootUrl - The root URL to use\n     */\n    toAbsolute(url: string, customBaseUrl?: string, customRootUrl?: string)\n    {\n        assertPath(url);\n\n        if (this.isDataUrl(url) || this.isBlobUrl(url)) return url;\n\n        const baseUrl = removeUrlParams(this.toPosix(customBaseUrl ?? DOMAdapter.get().getBaseUrl()));\n        const rootUrl = removeUrlParams(this.toPosix(customRootUrl ?? this.rootname(baseUrl)));\n\n        url = this.toPosix(url);\n\n        // root relative url\n        if (url.startsWith('/'))\n        {\n            return path.join(rootUrl, url.slice(1));\n        }\n\n        const absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n\n        return absolutePath;\n    },\n\n    /**\n     * Normalizes the given path, resolving '..' and '.' segments\n     * @param path - The path to normalize\n     */\n    normalize(path: string)\n    {\n        assertPath(path);\n\n        if (path.length === 0) return '.';\n        if (this.isDataUrl(path) || this.isBlobUrl(path)) return path;\n\n        path = this.toPosix(path);\n\n        let protocol = '';\n        const isAbsolute = path.startsWith('/');\n\n        if (this.hasProtocol(path))\n        {\n            protocol = this.rootname(path);\n            path = path.slice(protocol.length);\n        }\n\n        const trailingSeparator = path.endsWith('/');\n\n        // Normalize the path\n        path = normalizeStringPosix(path, false);\n\n        if (path.length > 0 && trailingSeparator) path += '/';\n        if (isAbsolute) return `/${path}`;\n\n        return protocol + path;\n    },\n\n    /**\n     * Determines if path is an absolute path.\n     * Absolute paths can be urls, data urls, or paths on disk\n     * @param path - The path to test\n     */\n    isAbsolute(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        if (this.hasProtocol(path)) return true;\n\n        return path.startsWith('/');\n    },\n\n    /**\n     * Joins all given path segments together using the platform-specific separator as a delimiter,\n     * then normalizes the resulting path\n     * @param segments - The segments of the path to join\n     */\n    join(...segments: string[])\n    {\n        if (segments.length === 0)\n        { return '.'; }\n        let joined;\n\n        for (let i = 0; i < segments.length; ++i)\n        {\n            const arg = segments[i];\n\n            assertPath(arg);\n            if (arg.length > 0)\n            {\n                if (joined === undefined) joined = arg;\n                else\n                {\n                    const prevArg = segments[i - 1] ?? '';\n\n                    if (this.joinExtensions.includes(this.extname(prevArg).toLowerCase()))\n                    {\n                        joined += `/../${arg}`;\n                    }\n                    else\n                    {\n                        joined += `/${arg}`;\n                    }\n                }\n            }\n        }\n        if (joined === undefined) { return '.'; }\n\n        return this.normalize(joined);\n    },\n\n    /**\n     * Returns the directory name of a path\n     * @param path - The path to parse\n     */\n    dirname(path: string)\n    {\n        assertPath(path);\n        if (path.length === 0) return '.';\n        path = this.toPosix(path);\n        let code = path.charCodeAt(0);\n        const hasRoot = code === 47;\n        let end = -1;\n        let matchedSlash = true;\n\n        const proto = this.getProtocol(path);\n        const origpath = path;\n\n        path = path.slice(proto.length);\n\n        for (let i = path.length - 1; i >= 1; --i)\n        {\n            code = path.charCodeAt(i);\n            if (code === 47)\n            {\n                if (!matchedSlash)\n                {\n                    end = i;\n                    break;\n                }\n            }\n            else\n            {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n\n        // if end is -1 and its a url then we need to add the path back\n        // eslint-disable-next-line no-nested-ternary\n        if (end === -1) return hasRoot ? '/' : this.isUrl(origpath) ? proto + path : proto;\n        if (hasRoot && end === 1) return '//';\n\n        return proto + path.slice(0, end);\n    },\n\n    /**\n     * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n     * @param path - The path to parse\n     */\n    rootname(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        let root = '';\n\n        if (path.startsWith('/')) root = '/';\n        else\n        {\n            root = this.getProtocol(path);\n        }\n\n        if (this.isUrl(path))\n        {\n            // need to find the first path separator\n            const index = path.indexOf('/', root.length);\n\n            if (index !== -1)\n            {\n                root = path.slice(0, index);\n            }\n            else root = path;\n\n            if (!root.endsWith('/')) root += '/';\n        }\n\n        return root;\n    },\n\n    /**\n     * Returns the last portion of a path\n     * @param path - The path to test\n     * @param ext - Optional extension to remove\n     */\n    basename(path: string, ext?: string)\n    {\n        assertPath(path);\n        if (ext) assertPath(ext);\n\n        path = removeUrlParams(this.toPosix(path));\n\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i: number;\n\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length)\n        {\n            if (ext.length === path.length && ext === path) return '';\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n\n            for (i = path.length - 1; i >= 0; --i)\n            {\n                const code = path.charCodeAt(i);\n\n                if (code === 47)\n                {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash)\n                    {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else\n                {\n                    if (firstNonSlashEnd === -1)\n                    {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0)\n                    {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx))\n                        {\n                            if (--extIdx === -1)\n                            {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else\n                        {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n\n            if (start === end) end = firstNonSlashEnd; else if (end === -1) end = path.length;\n\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= 0; --i)\n        {\n            if (path.charCodeAt(i) === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n\n        if (end === -1) return '';\n\n        return path.slice(start, end);\n    },\n\n    /**\n     * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n     * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n     * the first character of the basename of path, an empty string is returned.\n     * @param path - The path to parse\n     */\n    extname(path: string)\n    {\n        assertPath(path);\n        path = removeUrlParams(this.toPosix(path));\n\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n\n        for (let i = path.length - 1; i >= 0; --i)\n        {\n            const code = path.charCodeAt(i);\n\n            if (code === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === 46)\n            {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) startDot = i;\n                else if (preDotState !== 1) preDotState = 1;\n            }\n            else if (startDot !== -1)\n            {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n\n        if (\n            startDot === -1 || end === -1\n            // We saw a non-dot character immediately before the dot\n            || preDotState === 0\n            // The (right-most) trimmed path component is exactly '..'\n            // eslint-disable-next-line no-mixed-operators, no-mixed-operators/no-mixed-operators\n            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1\n        )\n        {\n            return '';\n        }\n\n        return path.slice(startDot, end);\n    },\n\n    /**\n     * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n     * @param path - The path to parse\n     */\n    parse(path: string)\n    {\n        assertPath(path);\n\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n\n        if (path.length === 0) return ret;\n        path = removeUrlParams(this.toPosix(path));\n\n        let code = path.charCodeAt(0);\n        const isAbsolute = this.isAbsolute(path);\n        let start: number;\n        const protocol = '';\n\n        ret.root = this.rootname(path);\n\n        if (isAbsolute || this.hasProtocol(path))\n        {\n            start = 1;\n        }\n        else\n        {\n            start = 0;\n        }\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n\n        // Get non-dir info\n        for (; i >= start; --i)\n        {\n            code = path.charCodeAt(i);\n            if (code === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === 46)\n            {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) startDot = i;\n                else if (preDotState !== 1) preDotState = 1;\n            }\n            else if (startDot !== -1)\n            {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n\n        if (\n            startDot === -1 || end === -1\n            // We saw a non-dot character immediately before the dot\n            || preDotState === 0\n            // The (right-most) trimmed path component is exactly '..'\n            // eslint-disable-next-line no-mixed-operators, no-mixed-operators/no-mixed-operators\n            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1\n        )\n        {\n            if (end !== -1)\n            {\n                if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);\n                else ret.base = ret.name = path.slice(startPart, end);\n            }\n        }\n        else\n        {\n            if (startPart === 0 && isAbsolute)\n            {\n                ret.name = path.slice(1, startDot);\n                ret.base = path.slice(1, end);\n            }\n            else\n            {\n                ret.name = path.slice(startPart, startDot);\n                ret.base = path.slice(startPart, end);\n            }\n            ret.ext = path.slice(startDot, end);\n        }\n\n        ret.dir = this.dirname(path);\n        if (protocol) ret.dir = protocol + ret.dir;\n\n        return ret;\n    },\n\n    sep: '/',\n    delimiter: ':',\n    joinExtensions: ['.html'],\n} as Path;\n",null,"import { BrowserAdapter } from '../environment-browser/BrowserAdapter';\n\nimport type { ICanvas } from './canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from './canvas/ICanvasRenderingContext2D';\n\n/**\n * PixiJS supports multiple environments including browsers, Web Workers, and Node.js.\n * The environment is auto-detected by default using the {@link environment.autoDetectEnvironment} function.\n *\n * The {@link environment.Adapter} interface provides a way to abstract away the differences between\n * these environments. PixiJS uses the {@link environment.BrowserAdapter} by default.\n *\n * However you can manually set the environment using the {@link environment.DOMAdapter} singleton, for example to\n * use Pixi within a WebWorker.\n * ```js\n * import { DOMAdapter, WebWorkerAdapter } from 'pixi.js';\n *\n * // WebWorkerAdapter is an implementation of the Adapter interface\n * DOMAdapter.set(WebWorkerAdapter);\n *\n * // use the adapter to create a canvas (in this case an OffscreenCanvas)\n * DOMAdapter.get().createCanvas(800, 600);\n * ```\n * @namespace environment\n */\n\n/**\n * This interface describes all the DOM dependent calls that Pixi makes throughout its codebase.\n * Implementations of this interface can be used to make sure Pixi will work in any environment,\n * such as browser, Web Workers, and Node.js.\n * @memberof environment\n */\nexport interface Adapter\n{\n    /** Returns a canvas object that can be used to create a webgl context. */\n    createCanvas: (width?: number, height?: number) => ICanvas;\n    /** Returns a 2D rendering context. */\n    getCanvasRenderingContext2D: () => { prototype: ICanvasRenderingContext2D; };\n    /** Returns a WebGL rendering context. */\n    getWebGLRenderingContext: () => typeof WebGLRenderingContext;\n    /** Returns a WebGL2 rendering context. */\n    getWebGL2RenderingContext: () => typeof WebGL2RenderingContext;\n    /** Returns a partial implementation of the browsers window.navigator */\n    getNavigator: () => { userAgent: string, gpu: GPU | null };\n    /** Returns the current base URL For browser environments this is either the document.baseURI or window.location.href */\n    getBaseUrl: () => string;\n    /** Return the font face set if available */\n    getFontFaceSet: () => FontFaceSet | null;\n    /** Returns a Response object that has been fetched from the given URL. */\n    fetch: (url: RequestInfo, options?: RequestInit) => Promise<Response>;\n    /** Returns Document object that has been parsed from the given XML string. */\n    parseXML: (xml: string) => Document;\n}\n\nlet currentAdapter: Adapter = BrowserAdapter;\n\n/**\n * The DOMAdapter is a singleton that allows PixiJS to perform DOM operations, such as creating a canvas.\n * This allows PixiJS to be used in any environment, such as a web browser, Web Worker, or Node.js.\n * It uses the {@link environment.Adapter} interface to abstract away the differences between these environments\n * and uses the {@link environment.BrowserAdapter} by default.\n *\n * It has two methods: `get():Adapter` and `set(adapter: Adapter)`.\n *\n * Defaults to the {@link environment.BrowserAdapter}.\n * @example\n * import { DOMAdapter, WebWorkerAdapter } from 'pixi.js';\n *\n * // WebWorkerAdapter is an implementation of the Adapter interface\n * DOMAdapter.set(WebWorkerAdapter);\n *\n * // use the adapter to create a canvas (in this case an OffscreenCanvas)\n * DOMAdapter.get().createCanvas(800, 600);\n * @memberof environment\n */\nexport const DOMAdapter = {\n    /**\n     * Returns the current adapter.\n     * @returns {environment.Adapter} The current adapter.\n     */\n    get(): Adapter\n    {\n        return currentAdapter;\n    },\n    /**\n     * Sets the current adapter.\n     * @param adapter - The new adapter.\n     */\n    set(adapter: Adapter): void\n    {\n        currentAdapter = adapter;\n    },\n};\n",null,"import { type Adapter } from '../environment/adapter';\n\n/**\n * This is an implementation of the {@link environment.Adapter} interface.\n * It can be used to make Pixi work in the browser.\n * @memberof environment\n * @property {Function} createCanvas - Creates a canvas element of the given size.\n * This canvas is created using the browser's native canvas element.\n * @property {Function} getCanvasRenderingContext2D - Returns a 2D rendering context.\n * @property {Function} getWebGLRenderingContext - Returns a WebGL rendering context.\n * @property {Function} getNavigator - Returns browsers window.navigator\n * @property {Function} getBaseUrl - Returns the current base URL for browser environments this is either\n * the document.baseURI or window.location.href\n * @property {Function} getFontFaceSet - Return the font face set if available\n * @property {Function} fetch - Returns a Response object that has been fetched from the given URL.\n * @property {Function} parseXML - Returns Document object that has been parsed from the given XML string.\n */\nexport const BrowserAdapter = {\n    createCanvas: (width: number, height: number): HTMLCanvasElement =>\n    {\n        const canvas = document.createElement('canvas');\n\n        canvas.width = width;\n        canvas.height = height;\n\n        return canvas;\n    },\n    getCanvasRenderingContext2D: () => CanvasRenderingContext2D,\n    getWebGLRenderingContext: () => WebGLRenderingContext,\n    getWebGL2RenderingContext: () => WebGL2RenderingContext,\n    getNavigator: () => navigator,\n    getBaseUrl: () => (document.baseURI ?? window.location.href),\n    getFontFaceSet: () => document.fonts,\n    fetch: (url: RequestInfo, options?: RequestInit) => fetch(url, options),\n    parseXML: (xml: string) =>\n    {\n        const parser = new DOMParser();\n\n        return parser.parseFromString(xml, 'text/xml');\n    },\n} as Adapter;\n",null,"export const convertToList = <T>(\n    input: string | T | (string | T)[],\n    transform?: (input: string) => T,\n    forceTransform = false\n): T[] =>\n{\n    if (!Array.isArray(input))\n    {\n        input = [input as T];\n    }\n\n    if (!transform)\n    {\n        return input as T[];\n    }\n\n    return (input as (string | T)[]).map((item): T =>\n    {\n        if (typeof item === 'string' || forceTransform)\n        {\n            return transform(item as string);\n        }\n\n        return item as T;\n    });\n};\n",null,"function processX(base: string, ids: string[][], depth: number, result: string[], tags: string[])\n{\n    const id = ids[depth];\n\n    for (let i = 0; i < id.length; i++)\n    {\n        const value = id[i];\n\n        if (depth < ids.length - 1)\n        {\n            processX(base.replace(result[depth], value), ids, depth + 1, result, tags);\n        }\n        else\n        {\n            tags.push(base.replace(result[depth], value));\n        }\n    }\n}\n\n/**\n * Creates a list of all possible combinations of the given strings.\n * @example\n * const out2 = createStringVariations('name is {chicken,wolf,sheep}');\n * console.log(out2); // [ 'name is chicken', 'name is wolf', 'name is sheep' ]\n * @param string - The string to process\n */\nexport function createStringVariations(string: string): string[]\n{\n    const regex = /\\{(.*?)\\}/g;\n\n    const result = string.match(regex);\n\n    const tags: string[] = [];\n\n    if (result)\n    {\n        const ids: string[][] = [];\n\n        result.forEach((vars) =>\n        {\n            // first remove the brackets...\n            const split = vars.substring(1, vars.length - 1).split(',');\n\n            ids.push(split);\n        });\n\n        processX(string, ids, 0, result, tags);\n    }\n    else\n    {\n        tags.push(string);\n    }\n\n    return tags;\n}\n",null,"/**\n * Checks if the given value is an array.\n * @param item - The item to test\n */\nexport const isSingleItem = (item: unknown): boolean => (!Array.isArray(item));\n",null,"/**\n * Copies the search params from one url to another\n * @param targetUrl - the url to copy the search params to\n * @param sourceUrl - the url container the search params we want to copy\n * @returns the url with the search params copied\n */\nexport const copySearchParams = (targetUrl: string, sourceUrl: string) =>\n{\n    const searchParams = sourceUrl.split('?')[1];\n\n    if (searchParams)\n    {\n        targetUrl += `?${searchParams}`;\n    }\n\n    return targetUrl;\n};\n",null,"import EventEmitter from 'eventemitter3';\nimport { groupD8 } from '../../../../maths/matrix/groupD8';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { uid } from '../../../../utils/data/uid';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\nimport { NOOP } from '../../../../utils/misc/NOOP';\nimport { BufferImageSource } from './sources/BufferSource';\nimport { TextureSource } from './sources/TextureSource';\nimport { TextureMatrix } from './TextureMatrix';\n\nimport type { TextureResourceOrOptions } from './utils/textureFrom';\n\n/**\n * Stores the width of the non-scalable borders, for example when used with {@link scene.NineSlicePlane} texture.\n * @memberof rendering\n */\nexport interface TextureBorders\n{\n    /** left border in pixels */\n    left: number;\n    /** top border in pixels */\n    top: number;\n    /** right border in pixels */\n    right: number;\n    /** bottom border in pixels */\n    bottom: number;\n}\n\n/**\n * The UVs data structure for a texture.\n * @memberof rendering\n */\nexport type UVs = {\n    x0: number;\n    y0: number;\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    x3: number;\n    y3: number;\n};\n\n/**\n * The options that can be passed to a new Texture\n * @memberof rendering\n */\nexport interface TextureOptions\n{\n    /** the underlying texture data that this texture will use  */\n    source?: TextureSource;\n    /** optional label, for debugging */\n    label?: string;\n    /** The rectangle frame of the texture to show */\n    frame?: Rectangle;\n    /** The area of original texture */\n    orig?: Rectangle;\n    /** Trimmed rectangle of original texture */\n    trim?: Rectangle;\n    /** Default anchor point used for sprite placement / rotation */\n    defaultAnchor?: { x: number; y: number };\n    /** Default borders used for 9-slice scaling {@link NineSlicePlane}*/\n    defaultBorders?: TextureBorders;\n    /** indicates how the texture was rotated by texture packer. See {@link groupD8} */\n    rotate?: number;\n    /** set to true if you plan on modifying the uvs of this texture - can affect performance with high numbers of sprites*/\n    dynamic?: boolean;\n}\n\nexport interface BindableTexture\n{\n    source: TextureSource;\n}\n\nexport type TextureSourceLike = TextureSource | TextureResourceOrOptions | string;\n\n/**\n * A texture stores the information that represents an image or part of an image.\n *\n * A texture must have a loaded resource passed to it to work. It does not contain any\n * loading mechanisms.\n *\n * The Assets class can be used to load an texture from a file. This is the recommended\n * way as it will handle the loading and caching for you.\n *\n * ```js\n *\n * const texture = await Asset.load('assets/image.png');\n *\n * // once Assets has loaded the image it will be available via the from method\n * const sameTexture = Texture.from('assets/image.png');\n * // another way to acces the texture once loaded\n * const sameAgainTexture = Asset.get('assets/image.png');\n *\n * const sprite1 = new Sprite(texture);\n *\n * ```\n *\n * It cannot be added to the display list directly; instead use it as the texture for a Sprite.\n * If no frame is provided for a texture, then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * import { Sprite, Texture } from 'pixi.js';\n *\n * const texture = await Asset.load('assets/image.png');\n * const sprite1 = new Sprite(texture);\n * const sprite2 = new Sprite(texture);\n * ```\n *\n * If you didn't pass the texture frame to constructor, it enables `noFrame` mode:\n * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.\n * @memberof rendering\n * @class\n */\nexport class Texture extends EventEmitter<{\n    update: Texture\n    destroy: Texture\n}> implements BindableTexture\n{\n    /**\n     * Helper function that creates a returns Texture based on the source you provide.\n     * The source should be loaded and ready to go. If not its best to grab the asset using Assets.\n     * @param id - String or Source to create texture from\n     * @param skipCache - Skip adding the texture to the cache\n     * @returns The texture based on the Id provided\n     */\n    public static from: (id: TextureSourceLike, skipCache?: boolean) => Texture;\n\n    /** label used for debugging */\n    public label?: string;\n    /** unique id for this texture */\n    public uid = uid('texture');\n    /**\n     * Has the texture been destroyed?\n     * @readonly\n     */\n    public destroyed: boolean;\n\n    public _source: TextureSource;\n\n    /**\n     * Indicates whether the texture is rotated inside the atlas\n     * set to 2 to compensate for texture packer rotation\n     * set to 6 to compensate for spine packer rotation\n     * can be used to rotate or mirror sprites\n     * See {@link PIXI.groupD8} for explanation\n     */\n    public readonly rotate: number;\n    /** A uvs object based on the given frame and the texture source */\n    public readonly uvs: UVs = { x0: 0, y0: 0, x1: 0, y1: 0, x2: 0, y2: 0, x3: 0, y3: 0 };\n    /**\n     * Anchor point that is used as default if sprite is created with this texture.\n     * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.\n     * @default {0,0}\n     */\n    public readonly defaultAnchor?: { x: number; y: number };\n    /**\n     * Default width of the non-scalable border that is used if 9-slice plane is created with this texture.\n     * @since 7.2.0\n     * @see PIXI.NineSlicePlane\n     */\n    public readonly defaultBorders?: TextureBorders;\n    /**\n     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n     */\n    public readonly frame = new Rectangle();\n    /** This is the area of original texture, before it was put in atlas. */\n    public readonly orig: Rectangle;\n    /**\n     * This is the trimmed area of original texture, before it was put in atlas\n     * Please call `updateUvs()` after you change coordinates of `trim` manually.\n     */\n    public readonly trim: Rectangle;\n\n    /**\n     * Does this Texture have any frame data assigned to it?\n     *\n     * This mode is enabled automatically if no frame was passed inside constructor.\n     *\n     * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n     *\n     * Beware, after loading or resize of baseTexture event can fired two times!\n     * If you want more control, subscribe on baseTexture itself.\n     * @example\n     * texture.on('update', () => {});\n     */\n    public noFrame = false;\n\n    /**\n     * Set to true if you plan on modifying the uvs of this texture.\n     * When this is the case, sprites and other objects using the texture will\n     * make sure to listen for changes to the uvs and update their vertices accordingly.\n     */\n    public dynamic = false;\n\n    private _textureMatrix: TextureMatrix;\n\n    /** is it a texture? yes! used for type checking */\n    public readonly isTexture = true;\n\n    /**\n     * @param {TextureOptions} param0 - Options for the texture\n     */\n    constructor({\n        source,\n        label,\n        frame,\n        orig,\n        trim,\n        defaultAnchor,\n        defaultBorders,\n        rotate,\n        dynamic\n    }: TextureOptions = {})\n    {\n        super();\n\n        this.label = label;\n        this.source = source?.source ?? new TextureSource();\n\n        this.noFrame = !frame;\n\n        if (frame)\n        {\n            this.frame.copyFrom(frame);\n        }\n        else\n        {\n            const { width, height } = this._source;\n\n            this.frame.width = width;\n            this.frame.height = height;\n        }\n\n        this.orig = orig || this.frame;\n        this.trim = trim;\n\n        this.rotate = rotate ?? 0;\n        this.defaultAnchor = defaultAnchor;\n        this.defaultBorders = defaultBorders;\n\n        this.destroyed = false;\n        this.dynamic = dynamic || false;\n\n        this.updateUvs();\n    }\n\n    set source(value: TextureSource)\n    {\n        if (this._source)\n        {\n            this._source.off('resize', this.update, this);\n        }\n\n        this._source = value;\n\n        value.on('resize', this.update, this);\n\n        this.emit('update', this);\n    }\n\n    /** the underlying source of the texture (equivalent of baseTexture in v7) */\n    get source(): TextureSource\n    {\n        return this._source;\n    }\n\n    /** returns a TextureMatrix instance for this texture. By default, that object is not created because its heavy. */\n    get textureMatrix()\n    {\n        if (!this._textureMatrix)\n        {\n            this._textureMatrix = new TextureMatrix(this);\n        }\n\n        return this._textureMatrix;\n    }\n\n    /** The width of the Texture in pixels. */\n    get width(): number\n    {\n        return this.orig.width;\n    }\n\n    /** The height of the Texture in pixels. */\n    get height(): number\n    {\n        return this.orig.height;\n    }\n\n    /** Call this function when you have modified the frame of this texture. */\n    public updateUvs()\n    {\n        const { uvs, frame } = this;\n        const { width, height } = this._source;\n\n        const nX = frame.x / width;\n        const nY = frame.y / height;\n\n        const nW = frame.width / width;\n        const nH = frame.height / height;\n\n        let rotate = this.rotate;\n\n        if (rotate)\n        {\n            // width and height div 2 div baseFrame size\n            const w2 = nW / 2;\n            const h2 = nH / 2;\n\n            // coordinates of center\n            const cX = nX + w2;\n            const cY = nY + h2;\n\n            rotate = groupD8.add(rotate, groupD8.NW); // NW is top-left corner\n            uvs.x0 = cX + (w2 * groupD8.uX(rotate));\n            uvs.y0 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\n            uvs.x1 = cX + (w2 * groupD8.uX(rotate));\n            uvs.y1 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2);\n            uvs.x2 = cX + (w2 * groupD8.uX(rotate));\n            uvs.y2 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2);\n            uvs.x3 = cX + (w2 * groupD8.uX(rotate));\n            uvs.y3 = cY + (h2 * groupD8.uY(rotate));\n        }\n\n        else\n        {\n            uvs.x0 = nX;\n            uvs.y0 = nY;\n            uvs.x1 = nX + nW;\n            uvs.y1 = nY;\n            uvs.x2 = nX + nW;\n            uvs.y2 = nY + nH;\n            uvs.x3 = nX;\n            uvs.y3 = nY + nH;\n        }\n    }\n\n    /**\n     * Destroys this texture\n     * @param destroySource - Destroy the source when the texture is destroyed.\n     */\n    public destroy(destroySource = false)\n    {\n        if (this._source)\n        {\n            if (destroySource)\n            {\n                this._source.destroy();\n                this._source = null;\n            }\n        }\n\n        this._textureMatrix = null;\n        this.destroyed = true;\n        this.emit('destroy', this);\n        this.removeAllListeners();\n    }\n\n    /** call this if you have modified the `texture outside` of the constructor */\n    public update(): void\n    {\n        if (this.noFrame)\n        {\n            this.frame.width = this._source.width;\n            this.frame.height = this._source.height;\n        }\n\n        this.updateUvs();\n        this.emit('update', this);\n    }\n\n    /** @deprecated since 8.0.0 */\n    get baseTexture(): TextureSource\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Texture.baseTexture is now Texture.source');\n        // #endif\n\n        return this._source;\n    }\n\n    /** an Empty Texture used internally by the engine */\n    public static EMPTY: Texture;\n    /** a White texture used internally by the engine */\n    public static WHITE: Texture;\n}\n\nTexture.EMPTY = new Texture({\n    label: 'EMPTY',\n    source: new TextureSource({\n        label: 'EMPTY',\n    })\n});\n\nTexture.EMPTY.destroy = NOOP;\n\nTexture.WHITE = new Texture({\n    source: new BufferImageSource({\n        resource: new Uint8Array([255, 255, 255, 255]),\n        width: 1,\n        height: 1,\n        alphaMode: 'premultiply-alpha-on-upload',\n        label: 'WHITE',\n    }),\n    label: 'WHITE',\n});\n\nTexture.WHITE.destroy = NOOP;\n",null,"// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n//\n// This file implements the dihedral group of order 16, also called\n// of degree 8. That's why its called groupD8.\n\nimport { Matrix } from './Matrix';\n\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n * @type {number[][]}\n * @private\n */\nconst rotationCayley: number[][] = [];\n\n/**\n * Matrices for each `GD8Symmetry` rotation.\n * @type {Matrix[]}\n * @private\n */\nconst rotationMatrices: Matrix[] = [];\n\n/*\n * Alias for {@code Math.sign}.\n */\nconst signum = Math.sign;\n\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init(): void\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row: number[] = [];\n\n        rotationCayley.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            /* Multiplies rotation matrices i and j. */\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy\n                      && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\n\ninit();\n\ntype GD8Symmetry = number;\n/**\n * @typedef {number} GD8Symmetry\n * @see groupD8\n */\n\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n * @see maths.groupD8.E\n * @see maths.groupD8.SE\n * @see maths.groupD8.S\n * @see maths.groupD8.SW\n * @see maths.groupD8.W\n * @see maths.groupD8.NW\n * @see maths.groupD8.N\n * @see maths.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace maths.groupD8\n */\nexport const groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    E: 0,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    SE: 1,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    S: 2,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    SW: 3,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    W: 4,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    NW: 5,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    N: 6,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    NE: 7,\n\n    /**\n     * Reflection about Y-axis.\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    MIRROR_VERTICAL: 8,\n\n    /**\n     * Reflection about the main diagonal.\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    MAIN_DIAGONAL: 10,\n\n    /**\n     * Reflection about X-axis.\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    MIRROR_HORIZONTAL: 12,\n\n    /**\n     * Reflection about reverse diagonal.\n     * @memberof maths.groupD8\n     * @constant {GD8Symmetry}\n     */\n    REVERSE_DIAGONAL: 14,\n\n    /**\n     * @memberof maths.groupD8\n     * @param {GD8Symmetry} ind - sprite rotation angle.\n     * @returns {GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: (ind: GD8Symmetry): GD8Symmetry => ux[ind],\n\n    /**\n     * @memberof maths.groupD8\n     * @param {GD8Symmetry} ind - sprite rotation angle.\n     * @returns {GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: (ind: GD8Symmetry): GD8Symmetry => uy[ind],\n\n    /**\n     * @memberof maths.groupD8\n     * @param {GD8Symmetry} ind - sprite rotation angle.\n     * @returns {GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: (ind: GD8Symmetry): GD8Symmetry => vx[ind],\n\n    /**\n     * @memberof maths.groupD8\n     * @param {GD8Symmetry} ind - sprite rotation angle.\n     * @returns {GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: (ind: GD8Symmetry): GD8Symmetry => vy[ind],\n\n    /**\n     * @memberof maths.groupD8\n     * @param {GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @returns {GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: (rotation: GD8Symmetry): GD8Symmetry =>\n    {\n        if (rotation & 8)// true only if between 8 & 15 (reflections)\n        {\n            return rotation & 15;// or rotation % 16\n        }\n\n        return (-rotation) & 7;// or (8 - rotation) % 8\n    },\n\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @memberof maths.groupD8\n     * @param {GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @returns {GD8Symmetry} Composed operation\n     */\n    add: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][rotationFirst]\n    ),\n\n    /**\n     * Reverse of `add`.\n     * @memberof maths.groupD8\n     * @param {GD8Symmetry} rotationSecond - Second operation\n     * @param {GD8Symmetry} rotationFirst - First operation\n     * @returns {GD8Symmetry} Result\n     */\n    sub: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]\n    ),\n\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     * @memberof maths.groupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: (rotation: number): number => rotation ^ 4,\n\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     * @memberof maths.groupD8\n     * @param {GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation: GD8Symmetry): boolean => (rotation & 3) === 2, // rotation % 4 === 2\n\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     * @memberof maths.groupD8\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @returns {GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: (dx: number, dy: number): GD8Symmetry =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return groupD8.S;\n            }\n\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return groupD8.E;\n            }\n\n            return groupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return groupD8.SE;\n            }\n\n            return groupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return groupD8.NE;\n        }\n\n        return groupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     * @memberof maths.groupD8\n     * @param {Matrix} matrix - sprite world matrix\n     * @param {GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix: Matrix, rotation: GD8Symmetry, tx = 0, ty = 0): void =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat: Matrix = rotationMatrices[groupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n",null,"export const NOOP = () =>\n{\n    // empty!\n};\n",null,"import { ExtensionType } from '../../../../../extensions/Extensions';\nimport { TextureSource } from './TextureSource';\n\nimport type { ExtensionMetadata } from '../../../../../extensions/Extensions';\nimport type { TypedArray } from '../../buffer/Buffer';\nimport type { TextureSourceOptions } from './TextureSource';\n\nexport interface BufferSourceOptions extends TextureSourceOptions<TypedArray | ArrayBuffer>\n{\n    width: number;\n    height: number;\n}\n\nexport class BufferImageSource extends TextureSource<TypedArray | ArrayBuffer>\n{\n    public static extension: ExtensionMetadata = ExtensionType.TextureSource;\n\n    public uploadMethodId = 'buffer';\n\n    constructor(options: BufferSourceOptions)\n    {\n        const buffer = options.resource || new Float32Array(options.width * options.height * 4);\n        let format = options.format;\n\n        if (!format)\n        {\n            if (buffer instanceof Float32Array)\n            {\n                format = 'rgba32float';\n            }\n            else if (buffer instanceof Int32Array)\n            {\n                format = 'rgba32uint';\n            }\n            else if (buffer instanceof Uint32Array)\n            {\n                format = 'rgba32uint';\n            }\n            else if (buffer instanceof Int16Array)\n            {\n                format = 'rgba16uint';\n            }\n            else if (buffer instanceof Uint16Array)\n            {\n                format = 'rgba16uint';\n            }\n            else if (buffer instanceof Int8Array)\n            {\n                format = 'bgra8unorm';\n            }\n            else\n            {\n                format = 'bgra8unorm';\n            }\n        }\n\n        super({\n            ...options,\n            resource: buffer,\n            format,\n        });\n    }\n\n    public static test(resource: any): resource is TypedArray | ArrayBuffer\n    {\n        return resource instanceof Int8Array\n        || resource instanceof Uint8Array\n        || resource instanceof Uint8ClampedArray\n        || resource instanceof Int16Array\n        || resource instanceof Uint16Array\n        || resource instanceof Int32Array\n        || resource instanceof Uint32Array\n        || resource instanceof Float32Array;\n    }\n}\n",null,"import EventEmitter from 'eventemitter3';\nimport { isPow2 } from '../../../../../maths/misc/pow2';\nimport { definedProps } from '../../../../../scene/container/utils/definedProps';\nimport { uid } from '../../../../../utils/data/uid';\nimport { TextureStyle } from '../TextureStyle';\n\nimport type { BindResource } from '../../../gpu/shader/BindResource';\nimport type { ALPHA_MODES, SCALE_MODE, TEXTURE_DIMENSIONS, TEXTURE_FORMATS, WRAP_MODE } from '../const';\nimport type { TextureStyleOptions } from '../TextureStyle';\n\n/**\n * options for creating a new TextureSource\n * @memberof rendering\n */\nexport interface TextureSourceOptions<T extends Record<string, any> = any> extends TextureStyleOptions\n{\n    /**\n     * the resource that will be upladed to the GPU. This is where we get our pixels from\n     * eg an ImageBimt / Canvas / Video etc\n     */\n    resource?: T;\n    /** the pixel width of this texture source. This is the REAL pure number, not accounting resolution */\n    width?: number;\n    /** the pixel height of this texture source. This is the REAL pure number, not accounting resolution */\n    height?: number;\n    /** the resolution of the texture. */\n    resolution?: number;\n    /** the format that the texture data has */\n    format?: TEXTURE_FORMATS;\n    /**\n     * Used by internal textures\n     * @ignore\n     */\n    sampleCount?: number;\n    /**\n     * Only really affects RenderTextures.\n     * Should we use antialiasing for this texture. It will look better, but may impact performance as a\n     * Blit operation will be required to resolve the texture.\n     */\n    antialias?: boolean;\n    /** how many dimensions does this texture have? currently v8 only supports 2d */\n    dimensions?: TEXTURE_DIMENSIONS;\n    /** The number of mip levels to generate for this texture. this is  overridden if autoGenerateMipmaps is true */\n    mipLevelCount?: number;\n    /**\n     * Should we auto generate mipmaps for this texture? This will automatically generate mipmaps\n     * for this texture when uploading to the GPU. Mipmapped textures take up more memory, but\n     * can look better when scaled down.\n     *\n     * For performance reasons, it is recommended to NOT use this with RenderTextures, as they are often updated every frame.\n     * If you do, make sure to call `updateMipmaps` after you update the texture.\n     */\n    autoGenerateMipmaps?: boolean;\n    /** the alpha mode of the texture */\n    alphaMode?: ALPHA_MODES;\n    /** optional label, can be used for debugging */\n    label?: string;\n    /** If true, the Garbage Collector will unload this texture if it is not used after a period of time */\n    autoGarbageCollect?: boolean;\n}\n\n/**\n * A TextureSource stores the information that represents an image.\n * All textures have require TextureSource, which contains information about the source.\n * Therefore you can have many textures all using a single TextureSource (eg a sprite sheet)\n *\n * This is an class is extended depending on the source of the texture.\n * Eg if you are using an an image as your resource, then an ImageSource is used.\n * @memberof rendering\n * @typeParam T - The TextureSource's Resource type.\n */\nexport class TextureSource<T extends Record<string, any> = any> extends EventEmitter<{\n    change: BindResource;\n    update: TextureSource;\n    unload: TextureSource;\n    destroy: TextureSource;\n    resize: TextureSource;\n    styleChange: TextureSource;\n    updateMipmaps: TextureSource;\n    error: Error;\n}> implements BindResource\n{\n    /** The default options used when creating a new TextureSource. override these to add your own defaults */\n    public static defaultOptions: TextureSourceOptions = {\n        resolution: 1,\n        format: 'bgra8unorm',\n        alphaMode: 'premultiply-alpha-on-upload',\n        dimensions: '2d',\n        mipLevelCount: 1,\n        autoGenerateMipmaps: false,\n        sampleCount: 1,\n        antialias: false,\n        autoGarbageCollect: false,\n    };\n\n    /** unique id for this Texture source */\n    public readonly uid = uid('textureSource');\n    /** optional label, can be used for debugging */\n    public label: string;\n\n    /**\n     * The resource type used by this TextureSource. This is used by the bind groups to determine\n     * how to handle this resource.\n     * @ignore\n     * @internal\n     */\n    public readonly _resourceType = 'textureSource';\n    /**\n     * i unique resource id, used by the bind group systems.\n     * This can change if the texture is resized or its resource changes\n     */\n    public _resourceId = uid('resource');\n    /**\n     * this is how the backends know how to upload this texture to the GPU\n     * It changes depending on the resource type. Classes that extend TextureSource\n     * should override this property.\n     * @ignore\n     * @internal\n     */\n    public uploadMethodId = 'unknown';\n\n    // dimensions\n    public _resolution = 1;\n\n    /** the pixel width of this texture source. This is the REAL pure number, not accounting resolution */\n    public pixelWidth = 1;\n    /** the pixel height of this texture source. This is the REAL pure number, not accounting resolution */\n    public pixelHeight = 1;\n\n    /**\n     * the width of this texture source, accounting for resolution\n     * eg pixelWidth 200, resolution 2, then width will be 100\n     */\n    public width = 1;\n    /**\n     * the height of this texture source, accounting for resolution\n     * eg pixelHeight 200, resolution 2, then height will be 100\n     */\n    public height = 1;\n\n    /**\n     * the resource that will be upladed to the GPU. This is where we get our pixels from\n     * eg an ImageBimt / Canvas / Video etc\n     */\n    public resource: T;\n\n    /**\n     * The number of samples of a multisample texture. This is always 1 for non-multisample textures.\n     * To enable multisample for a texture, set antialias to true\n     * @internal\n     * @ignore\n     */\n    public sampleCount = 1;\n\n    /** The number of mip levels to generate for this texture. this is  overridden if autoGenerateMipmaps is true */\n    public mipLevelCount = 1;\n    /**\n     * Should we auto generate mipmaps for this texture? This will automatically generate mipmaps\n     * for this texture when uploading to the GPU. Mipmapped textures take up more memory, but\n     * can look better when scaled down.\n     *\n     * For performance reasons, it is recommended to NOT use this with RenderTextures, as they are often updated every frame.\n     * If you do, make sure to call `updateMipmaps` after you update the texture.\n     */\n    public autoGenerateMipmaps = false;\n    /** the format that the texture data has */\n    public format: TEXTURE_FORMATS = 'rgba8unorm';\n    /** how many dimensions does this texture have? currently v8 only supports 2d */\n    public dimension: TEXTURE_DIMENSIONS = '2d';\n    /** the alpha mode of the texture */\n    public alphaMode: ALPHA_MODES;\n    private _style: TextureStyle;\n\n    /**\n     * Only really affects RenderTextures.\n     * Should we use antialiasing for this texture. It will look better, but may impact performance as a\n     * Blit operation will be required to resolve the texture.\n     */\n    public antialias = false;\n\n    /**\n     * Has the source been destroyed?\n     * @readonly\n     */\n    public destroyed: boolean;\n\n    /**\n     * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n     * @protected\n     */\n    public _touched = 0;\n\n    /**\n     * Used by the batcher to build texture batches. faster to have the variable here!\n     * @protected\n     */\n    public _batchTick = -1;\n    /**\n     * A temporary batch location for the texture batching. Here for performance reasons only!\n     * @protected\n     */\n    public _textureBindLocation = -1;\n\n    public isPowerOfTwo: boolean;\n\n    /** If true, the Garbage Collector will unload this texture if it is not used after a period of time */\n    public autoGarbageCollect: boolean;\n\n    /**\n     * used internally to know where a texture came from. Usually assigned by the asset loader!\n     * @ignore\n     */\n    public _sourceOrigin: string;\n\n    /**\n     * @param options - options for creating a new TextureSource\n     */\n    constructor(protected readonly options: TextureSourceOptions<T> = {})\n    {\n        super();\n\n        options = { ...TextureSource.defaultOptions, ...options };\n\n        this.label = options.label ?? '';\n        this.resource = options.resource;\n        this.autoGarbageCollect = options.autoGarbageCollect;\n        this._resolution = options.resolution;\n\n        if (options.width)\n        {\n            this.pixelWidth = options.width * this._resolution;\n        }\n        else\n        {\n            this.pixelWidth = this.resource ? (this.resourceWidth ?? 1) : 1;\n        }\n\n        if (options.height)\n        {\n            this.pixelHeight = options.height * this._resolution;\n        }\n        else\n        {\n            this.pixelHeight = this.resource ? (this.resourceHeight ?? 1) : 1;\n        }\n\n        this.width = this.pixelWidth / this._resolution;\n        this.height = this.pixelHeight / this._resolution;\n\n        this.format = options.format;\n        this.dimension = options.dimensions;\n        this.mipLevelCount = options.mipLevelCount;\n        this.autoGenerateMipmaps = options.autoGenerateMipmaps;\n        this.sampleCount = options.sampleCount;\n        this.antialias = options.antialias;\n        this.alphaMode = options.alphaMode;\n\n        this.style = new TextureStyle(definedProps(options));\n\n        this.destroyed = false;\n\n        this._refreshPOT();\n    }\n\n    /** returns itself */\n    get source(): TextureSource\n    {\n        return this;\n    }\n\n    /** the style of the texture */\n    get style(): TextureStyle\n    {\n        return this._style;\n    }\n\n    set style(value: TextureStyle)\n    {\n        if (this.style === value) return;\n\n        this._style?.off('change', this._onStyleChange, this);\n        this._style = value;\n        this._style?.on('change', this._onStyleChange, this);\n\n        this._onStyleChange();\n    }\n\n    /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n    get addressMode(): WRAP_MODE\n    {\n        return this._style.addressMode;\n    }\n\n    set addressMode(value: WRAP_MODE)\n    {\n        this._style.addressMode = value;\n    }\n\n    /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n    get repeatMode(): WRAP_MODE\n    {\n        return this._style.addressMode;\n    }\n\n    set repeatMode(value: WRAP_MODE)\n    {\n        this._style.addressMode = value;\n    }\n\n    /** Specifies the sampling behavior when the sample footprint is smaller than or equal to one texel. */\n    get magFilter(): SCALE_MODE\n    {\n        return this._style.magFilter;\n    }\n\n    set magFilter(value: SCALE_MODE)\n    {\n        this._style.magFilter = value;\n    }\n\n    /** Specifies the sampling behavior when the sample footprint is larger than one texel. */\n    get minFilter(): SCALE_MODE\n    {\n        return this._style.minFilter;\n    }\n\n    set minFilter(value: SCALE_MODE)\n    {\n        this._style.minFilter = value;\n    }\n\n    /** Specifies behavior for sampling between mipmap levels. */\n    get mipmapFilter(): SCALE_MODE\n    {\n        return this._style.mipmapFilter;\n    }\n\n    set mipmapFilter(value: SCALE_MODE)\n    {\n        this._style.mipmapFilter = value;\n    }\n\n    /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n    get lodMinClamp(): number\n    {\n        return this._style.lodMinClamp;\n    }\n\n    set lodMinClamp(value: number)\n    {\n        this._style.lodMinClamp = value;\n    }\n\n    /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n    get lodMaxClamp(): number\n    {\n        return this._style.lodMaxClamp;\n    }\n\n    set lodMaxClamp(value: number)\n    {\n        this._style.lodMaxClamp = value;\n    }\n\n    private _onStyleChange()\n    {\n        this.emit('styleChange', this);\n    }\n\n    /** call this if you have modified the texture outside of the constructor */\n    public update()\n    {\n        // update resource...\n        if (this.resource)\n        {\n            const resolution = this._resolution;\n\n            const didResize = this.resize(this.resourceWidth / resolution, this.resourceHeight / resolution);\n\n            // no ned to dispatch the update we resized as that will\n            // notify the texture systems anyway\n            if (didResize) return;\n        }\n\n        this.emit('update', this);\n    }\n\n    /** Destroys this texture source */\n    public destroy()\n    {\n        this.destroyed = true;\n        this.emit('destroy', this);\n\n        if (this._style)\n        {\n            this._style.destroy();\n            this._style = null;\n        }\n\n        this.uploadMethodId = null;\n        this.resource = null;\n        this.removeAllListeners();\n    }\n\n    /**\n     * This will unload the Texture source from the GPU. This will free up the GPU memory\n     * As soon as it is required fore rendering, it will be re-uploaded.\n     */\n    public unload()\n    {\n        this._resourceId = uid('resource');\n        this.emit('change', this);\n        this.emit('unload', this);\n    }\n\n    /** the width of the resource. This is the REAL pure number, not accounting resolution   */\n    public get resourceWidth(): number\n    {\n        const { resource } = this;\n\n        return resource.naturalWidth || resource.videoWidth || resource.displayWidth || resource.width;\n    }\n\n    /** the height of the resource. This is the REAL pure number, not accounting resolution */\n    public get resourceHeight(): number\n    {\n        const { resource } = this;\n\n        return resource.naturalHeight || resource.videoHeight || resource.displayHeight || resource.height;\n    }\n\n    /**\n     * the resolution of the texture. Changing this number, will not change the number of pixels in the actual texture\n     * but will the size of the texture when rendered.\n     *\n     * changing the resolution of this texture to 2 for example will make it appear twice as small when rendered (as pixel\n     * density will have increased)\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(resolution: number)\n    {\n        if (this._resolution === resolution) return;\n\n        this._resolution = resolution;\n\n        this.width = this.pixelWidth / resolution;\n        this.height = this.pixelHeight / resolution;\n    }\n\n    /**\n     * Resize the texture, this is handy if you want to use the texture as a render texture\n     * @param width - the new width of the texture\n     * @param height - the new height of the texture\n     * @param resolution - the new resolution of the texture\n     * @returns - if the texture was resized\n     */\n    public resize(width?: number, height?: number, resolution?: number): boolean\n    {\n        resolution = resolution || this._resolution;\n        width = width || this.width;\n        height = height || this.height;\n\n        // make sure we work with rounded pixels\n        const newPixelWidth = Math.round(width * resolution);\n        const newPixelHeight = Math.round(height * resolution);\n\n        this.width = newPixelWidth / resolution;\n        this.height = newPixelHeight / resolution;\n\n        this._resolution = resolution;\n\n        if (this.pixelWidth === newPixelWidth && this.pixelHeight === newPixelHeight)\n        {\n            return false;\n        }\n\n        this._refreshPOT();\n\n        this.pixelWidth = newPixelWidth;\n        this.pixelHeight = newPixelHeight;\n\n        this.emit('resize', this);\n\n        this._resourceId = uid('resource');\n        this.emit('change', this);\n\n        return true;\n    }\n\n    /**\n     * Lets the renderer know that this texture has been updated and its mipmaps should be re-generated.\n     * This is only important for RenderTexture instances, as standard Texture instances will have their\n     * mipmaps generated on upload. You should call this method after you make any change to the texture\n     *\n     * The reason for this is is can be quite expensive to update mipmaps for a texture. So by default,\n     * We want you, the developer to specify when this action should happen.\n     *\n     * Generally you don't want to have mipmaps generated on Render targets that are changed every frame,\n     */\n    public updateMipmaps()\n    {\n        if (this.autoGenerateMipmaps && this.mipLevelCount > 1)\n        {\n            this.emit('updateMipmaps', this);\n        }\n    }\n\n    set wrapMode(value: WRAP_MODE)\n    {\n        this._style.wrapMode = value;\n    }\n\n    get wrapMode(): WRAP_MODE\n    {\n        return this._style.wrapMode;\n    }\n\n    set scaleMode(value: SCALE_MODE)\n    {\n        this._style.scaleMode = value;\n    }\n\n    /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n    get scaleMode(): SCALE_MODE\n    {\n        return this._style.scaleMode;\n    }\n\n    /**\n     * Refresh check for isPowerOfTwo texture based on size\n     * @private\n     */\n    protected _refreshPOT(): void\n    {\n        this.isPowerOfTwo = isPow2(this.pixelWidth) && isPow2(this.pixelHeight);\n    }\n\n    public static test(_resource: any): any\n    {\n        // this should be overridden by other sources..\n        throw new Error('Unimplemented');\n    }\n}\n",null,"// Taken from the bit-twiddle package\n\n/**\n * Rounds to next power of two.\n * @function nextPow2\n * @param {number} v - input value\n * @returns {number} - next rounded power of two\n * @memberof maths\n */\nexport function nextPow2(v: number): number\n{\n    v += v === 0 ? 1 : 0;\n    --v;\n    v |= v >>> 1;\n    v |= v >>> 2;\n    v |= v >>> 4;\n    v |= v >>> 8;\n    v |= v >>> 16;\n\n    return v + 1;\n}\n\n/**\n * Checks if a number is a power of two.\n * @function isPow2\n * @param {number} v - input value\n * @returns {boolean} `true` if value is power of two\n * @memberof maths\n */\nexport function isPow2(v: number): boolean\n{\n    return !(v & (v - 1)) && (!!v);\n}\n\n/**\n * Computes ceil of log base 2\n * @function log2\n * @param {number} v - input value\n * @returns {number} logarithm base 2\n * @memberof maths\n */\nexport function log2(v: number): number\n{\n    let r = (v > 0xFFFF ? 1 : 0) << 4;\n\n    v >>>= r;\n\n    let shift = (v > 0xFF ? 1 : 0) << 3;\n\n    v >>>= shift; r |= shift;\n    shift = (v > 0xF ? 1 : 0) << 2;\n    v >>>= shift; r |= shift;\n    shift = (v > 0x3 ? 1 : 0) << 1;\n    v >>>= shift; r |= shift;\n\n    return r | (v >> 1);\n}\n",null,"/**\n * Returns a new object with all properties from the input object that have defined values.\n * @template T - The type of the input object.\n * @param {T} obj - The input object.\n * @returns {T} - A new object with only the defined properties from the input object.\n * @memberof utils\n * @ignore\n */\nexport function definedProps<T extends Record<string, any>>(obj: T): T\n{\n    const result: Partial<T> = {};\n\n    for (const key in obj)\n    {\n        if (obj[key] !== undefined)\n        {\n            result[key] = obj[key];\n        }\n    }\n\n    return result as T;\n}\n",null,"import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { COMPARE_FUNCTION, SCALE_MODE, WRAP_MODE } from './const';\n\nconst idHash: Record<string, number> = Object.create(null);\n\n/**\n * This takes a shader string and maps it to a resource id.\n * This is a little different than regular resource ids as these ids\n * are not unique to the resource. But must not overlap with other (non sampler) resources Ids.\n * @param value - the string to turn into a resource id\n * @returns a unique resource id\n */\nfunction createResourceIdFromString(value: string): number\n{\n    const id = idHash[value];\n\n    if (id === undefined)\n    {\n        idHash[value] = uid('resource');\n    }\n\n    return id;\n}\n\nexport interface TextureStyleOptions extends Partial<TextureStyle>\n{\n    /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n    addressMode?: WRAP_MODE;\n    /** specifies the {{GPUAddressMode|address modes}} for the texture width, height, and depth coordinates, respectively. */\n    addressModeU?: WRAP_MODE;\n    /** specifies the {{GPUAddressMode|address modes}} for the texture width, height, and depth coordinates, respectively. */\n    addressModeV?: WRAP_MODE;\n    /** Specifies the {{GPUAddressMode|address modes}} for the texture width, height, and depth coordinates, respectively. */\n    addressModeW?: WRAP_MODE;\n\n    /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n    scaleMode?: SCALE_MODE;\n\n    /** specifies the sampling behavior when the sample footprint is smaller than or equal to one texel. */\n    magFilter?: SCALE_MODE;\n    /** specifies the sampling behavior when the sample footprint is larger than one texel. */\n    minFilter?: SCALE_MODE;\n    /** specifies behavior for sampling between mipmap levels. */\n    mipmapFilter?: SCALE_MODE;\n\n    /** specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n    lodMinClamp?: number;\n    /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n    lodMaxClamp?: number;\n    /**\n     * When provided the sampler will be a comparison sampler with the specified\n     * {@link GPUCompareFunction}.\n     * Note: Comparison samplers may use filtering, but the sampling results will be\n     * implementation-dependent and may differ from the normal filtering rules.\n     */\n    compare?: COMPARE_FUNCTION;\n    /**\n     * Specifies the maximum anisotropy value clamp used by the sampler.\n     * Note: Most implementations support {@link GPUSamplerDescriptor#maxAnisotropy} values in range\n     * between 1 and 16, inclusive. The used value of {@link GPUSamplerDescriptor#maxAnisotropy} will\n     * be clamped to the maximum value that the platform supports.\n     *\n     * setting this to anything higher than 1 will set scale modes to 'linear'\n     */\n    maxAnisotropy?: number;\n}\n\n/**\n * A texture style describes how a texture should be sampled by a shader.\n * @memberof rendering\n */\nexport class TextureStyle extends EventEmitter<{\n    change: TextureStyle,\n    destroy: TextureStyle,\n}> implements BindResource\n{\n    public _resourceType = 'textureSampler';\n    public _touched = 0;\n    private _sharedResourceId: number;\n\n    /** default options for the style */\n    public static readonly defaultOptions: TextureStyleOptions = {\n        addressMode: 'clamp-to-edge',\n        scaleMode: 'linear'\n    };\n\n    /** */\n    public addressModeU?: WRAP_MODE;\n    /** */\n    public addressModeV?: WRAP_MODE;\n    /** Specifies the {{GPUAddressMode|address modes}} for the texture width, height, and depth coordinates, respectively. */\n    public addressModeW?: WRAP_MODE;\n    /** Specifies the sampling behavior when the sample footprint is smaller than or equal to one texel. */\n    public magFilter?: SCALE_MODE;\n    /** Specifies the sampling behavior when the sample footprint is larger than one texel. */\n    public minFilter?: SCALE_MODE;\n    /** Specifies behavior for sampling between mipmap levels. */\n    public mipmapFilter?: SCALE_MODE;\n    /** */\n    public lodMinClamp?: number;\n    /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n    public lodMaxClamp?: number;\n    /**\n     * When provided the sampler will be a comparison sampler with the specified\n     * {@link GPUCompareFunction}.\n     * Note: Comparison samplers may use filtering, but the sampling results will be\n     * implementation-dependent and may differ from the normal filtering rules.\n     */\n    public compare?: COMPARE_FUNCTION;\n    /**\n     * Specifies the maximum anisotropy value clamp used by the sampler.\n     * Note: Most implementations support {@link GPUSamplerDescriptor#maxAnisotropy} values in range\n     * between 1 and 16, inclusive. The used value of {@link GPUSamplerDescriptor#maxAnisotropy} will\n     * be clamped to the maximum value that the platform supports.\n     * @internal\n     * @ignore\n     */\n    public _maxAnisotropy?: number = 1;\n\n    /**\n     * @param options - options for the style\n     */\n    constructor(options: TextureStyleOptions = {})\n    {\n        super();\n\n        options = { ...TextureStyle.defaultOptions, ...options };\n\n        this.addressMode = options.addressMode;\n\n        this.addressModeU = options.addressModeU ?? this.addressModeU;\n        this.addressModeV = options.addressModeV ?? this.addressModeV;\n        this.addressModeW = options.addressModeW ?? this.addressModeW;\n\n        this.scaleMode = options.scaleMode;\n\n        this.magFilter = options.magFilter ?? this.magFilter;\n        this.minFilter = options.minFilter ?? this.minFilter;\n        this.mipmapFilter = options.mipmapFilter ?? this.mipmapFilter;\n\n        this.lodMinClamp = options.lodMinClamp;\n        this.lodMaxClamp = options.lodMaxClamp;\n\n        this.compare = options.compare;\n\n        this.maxAnisotropy = options.maxAnisotropy ?? 1;\n    }\n\n    set addressMode(value: WRAP_MODE)\n    {\n        this.addressModeU = value;\n        this.addressModeV = value;\n        this.addressModeW = value;\n    }\n\n    /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n    get addressMode(): WRAP_MODE\n    {\n        return this.addressModeU;\n    }\n\n    set wrapMode(value: WRAP_MODE)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'TextureStyle.wrapMode is now TextureStyle.addressMode');\n        // #endif\n\n        this.addressMode = value;\n    }\n\n    get wrapMode(): WRAP_MODE\n    {\n        return this.addressMode;\n    }\n\n    set scaleMode(value: SCALE_MODE)\n    {\n        this.magFilter = value;\n        this.minFilter = value;\n        this.mipmapFilter = value;\n    }\n\n    /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n    get scaleMode(): SCALE_MODE\n    {\n        return this.magFilter;\n    }\n\n    /** Specifies the maximum anisotropy value clamp used by the sampler. */\n    set maxAnisotropy(value: number)\n    {\n        this._maxAnisotropy = Math.min(value, 16);\n\n        if (this._maxAnisotropy > 1)\n        {\n            this.scaleMode = 'linear';\n        }\n    }\n\n    get maxAnisotropy(): number\n    {\n        return this._maxAnisotropy;\n    }\n\n    // TODO - move this to WebGL?\n    get _resourceId(): number\n    {\n        return this._sharedResourceId || this._generateResourceId();\n    }\n\n    public update()\n    {\n        // manage the resource..\n        this.emit('change', this);\n        this._sharedResourceId = null;\n    }\n\n    private _generateResourceId(): number\n    {\n        // eslint-disable-next-line max-len\n        const bigKey = `${this.addressModeU}-${this.addressModeV}-${this.addressModeW}-${this.magFilter}-${this.minFilter}-${this.mipmapFilter}-${this.lodMinClamp}-${this.lodMaxClamp}-${this.compare}-${this._maxAnisotropy}`;\n\n        this._sharedResourceId = createResourceIdFromString(bigKey);\n\n        return this._resourceId;\n    }\n\n    /** Destroys the style */\n    public destroy()\n    {\n        this.emit('destroy', this);\n\n        this.removeAllListeners();\n    }\n}\n",null,"import { Matrix } from '../../../../maths/matrix/Matrix';\n\nimport type { Texture } from './Texture';\n\nconst tempMat = new Matrix();\n\n/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n * @see Texture\n * @see Mesh\n * @see TilingSprite\n * @memberof rendering\n */\nexport class TextureMatrix\n{\n    /**\n     * Matrix operation that converts texture region coords to texture coords\n     * @readonly\n     */\n    public mapCoord: Matrix;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n     * @default 0\n     */\n    public clampOffset: number;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     */\n    public clampMargin: number;\n\n    /**\n     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n     * Calculated based on clampOffset.\n     */\n    public readonly uClampFrame: Float32Array;\n\n    /** Normalized clamp offset. Calculated based on clampOffset. */\n    public readonly uClampOffset: Float32Array;\n\n    /**\n     * Tracks Texture frame changes.\n     * @ignore\n     */\n    public _updateID: number;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    protected _textureID: number;\n\n    protected _texture: Texture;\n\n    /**\n     * If texture size is the same as baseTexture.\n     * @default false\n     * @readonly\n     */\n    public isSimple: boolean;\n\n    /**\n     * @param texture - observed texture\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     */\n    constructor(texture: Texture, clampMargin?: number)\n    {\n        this.mapCoord = new Matrix();\n        this.uClampFrame = new Float32Array(4);\n        this.uClampOffset = new Float32Array(2);\n        this._textureID = -1;\n        this._updateID = 0;\n\n        this.clampOffset = 0;\n\n        if ((typeof clampMargin === 'undefined'))\n        {\n            this.clampMargin = (texture.width < 10) ? 0 : 0.5;\n        }\n        else\n        {\n            this.clampMargin = clampMargin;\n        }\n\n        this.isSimple = false;\n\n        this.texture = texture;\n    }\n\n    /** Texture property. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this.texture === value) return;\n\n        this._texture?.removeListener('update', this.update, this);\n        this._texture = value;\n        this._texture.addListener('update', this.update, this);\n\n        this.update();\n    }\n\n    /**\n     * Multiplies uvs array to transform\n     * @param uvs - mesh uvs\n     * @param [out=uvs] - output\n     * @returns - output\n     */\n    public multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array\n    {\n        if (out === undefined)\n        {\n            out = uvs;\n        }\n\n        const mat = this.mapCoord;\n\n        for (let i = 0; i < uvs.length; i += 2)\n        {\n            const x = uvs[i];\n            const y = uvs[i + 1];\n\n            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;\n            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;\n        }\n\n        return out;\n    }\n\n    /**\n     * Updates matrices if texture was changed\n     * @returns - whether or not it was updated\n     */\n    public update(): boolean\n    {\n        const tex = this._texture;\n\n        this._updateID++;\n\n        const uvs = tex.uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(\n                orig.width / trim.width,\n                0, 0, orig.height / trim.height,\n                -trim.x / trim.width,\n                -trim.y / trim.height\n            );\n\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.source;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase._resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex.frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex.frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex.frame.x + tex.frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex.frame.y + tex.frame.height - margin + offset) / texBase.height;\n\n        this.uClampOffset[0] = offset / texBase.pixelWidth;\n        this.uClampOffset[1] = offset / texBase.pixelHeight;\n\n        this.isSimple = tex.frame.width === texBase.width\n            && tex.frame.height === texBase.height\n            && tex.rotate === 0;\n\n        return true;\n    }\n}\n",null,"import { Rectangle } from '../maths/shapes/Rectangle';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\n\nimport type { PointData } from '../maths/point/PointData';\nimport type { TextureSource } from '../rendering/renderers/shared/texture/sources/TextureSource';\nimport type { BindableTexture, TextureBorders } from '../rendering/renderers/shared/texture/Texture';\nimport type { Dict } from '../utils/types';\n\n/**\n * Represents the JSON data for a spritesheet atlas.\n * @memberof assets\n */\nexport interface SpritesheetFrameData\n{\n    /** The frame rectangle of the texture. */\n    frame: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    /** Whether the texture is trimmed. */\n    trimmed?: boolean;\n    /** Whether the texture is rotated. */\n    rotated?: boolean;\n    /** The source size of the texture. */\n    sourceSize?: {\n        w: number;\n        h: number;\n    };\n    /** The sprite source size. */\n    spriteSourceSize?: {\n        h?: number;\n        w?: number;\n        x: number;\n        y: number;\n    };\n    /** The anchor point of the texture. */\n    anchor?: PointData;\n    /** The 9-slice borders of the texture. */\n    borders?: TextureBorders\n}\n\n/**\n * Atlas format.\n * @memberof assets\n */\nexport interface SpritesheetData\n{\n    /** The frames of the atlas. */\n    frames: Dict<SpritesheetFrameData>;\n    /** The animations of the atlas. */\n    animations?: Dict<string[]>;\n    /** The meta data of the atlas. */\n    meta: {\n        app?: string;\n        format?: string;\n        frameTags?: {\n            from: number;\n            name: string;\n            to: number;\n            direction: string;\n        }[];\n        image?: string;\n        layers?: {\n            blendMode: string;\n            name: string;\n            opacity: number;\n        }[];\n        scale: number | string;\n        size?: {\n            h: number;\n            w: number;\n        };\n        slices?: {\n            color: string;\n            name: string;\n            keys: {\n                frame: number,\n                bounds: {\n                    x: number;\n                    y: number;\n                    w: number;\n                    h: number;\n                };\n            }[];\n        }[];\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n        version?: string;\n    };\n}\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code you may pass its JSON data file to Pixi's loader:\n *\n * ```js\n * import { Assets } from 'pixi.js';\n *\n * const sheet = await Assets.load('images/spritesheet.json');\n * ```\n *\n * Alternately, you may circumvent the loader by instantiating the Spritesheet directly:\n *\n * ```js\n * import { Spritesheet } from 'pixi.js';\n *\n * const sheet = new Spritesheet(texture, spritesheetData);\n * await sheet.parse();\n * console.log('Spritesheet ready to use!');\n * ```\n *\n * With the `sheet.textures` you can create Sprite objects, and `sheet.animations` can be used to create an AnimatedSprite.\n *\n * Here's an example of a sprite sheet JSON data file:\n * ```json\n * {\n *     \"frames\": {\n *         \"enemy1.png\":\n *         {\n *             \"frame\": {\"x\":103,\"y\":1,\"w\":32,\"h\":32},\n *             \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":32,\"h\":32},\n *             \"sourceSize\": {\"w\":32,\"h\":32},\n *             \"anchor\": {\"x\":16,\"y\":16}\n *         },\n *         \"enemy2.png\":\n *         {\n *             \"frame\": {\"x\":103,\"y\":35,\"w\":32,\"h\":32},\n *             \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":32,\"h\":32},\n *             \"sourceSize\": {\"w\":32,\"h\":32},\n *             \"anchor\": {\"x\":16,\"y\":16}\n *         },\n *         \"button.png\":\n *         {\n *             \"frame\": {\"x\":1,\"y\":1,\"w\":100,\"h\":100},\n *             \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":100,\"h\":100},\n *             \"sourceSize\": {\"w\":100,\"h\":100},\n *             \"anchor\": {\"x\":0,\"y\":0},\n *             \"borders\": {\"left\":35,\"top\":35,\"right\":35,\"bottom\":35}\n *         }\n *     },\n *\n *     \"animations\": {\n *         \"enemy\": [\"enemy1.png\",\"enemy2.png\"]\n *     },\n *\n *     \"meta\": {\n *         \"image\": \"sheet.png\",\n *         \"format\": \"RGBA8888\",\n *         \"size\": {\"w\":136,\"h\":102},\n *         \"scale\": \"1\"\n *     }\n * }\n * ```\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link Texture#defaultAnchor}), default 9-slice borders\n * (see {@link Texture#defaultBorders}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n *\n * Alternative ways for loading spritesheet image if you need more control:\n *\n * ```js\n * import { Assets } from 'pixi.js';\n *\n * const sheetTexture = await Assets.load('images/spritesheet.png');\n * Assets.add({\n *     alias: 'atlas',\n *     src: 'images/spritesheet.json'\n *     data: {texture: sheetTexture} // using of preloaded texture\n * });\n * const sheet = await Assets.load('atlas')\n * ```\n *\n * or:\n *\n * ```js\n * import { Assets } from 'pixi.js';\n *\n * Assets.add({\n *     alias: 'atlas',\n *     src: 'images/spritesheet.json'\n *     data: {imageFilename: 'my-spritesheet.2x.avif'} // using of custom filename located in \"images/my-spritesheet.2x.avif\"\n * });\n * const sheet = await Assets.load('atlas')\n * ```\n * @memberof assets\n */\nexport class Spritesheet<S extends SpritesheetData = SpritesheetData>\n{\n    /** The maximum number of Textures to build per process. */\n    public static readonly BATCH_SIZE = 1000;\n\n    /** For multi-packed spritesheets, this contains a reference to all the other spritesheets it depends on. */\n    public linkedSheets: Spritesheet<S>[] = [];\n\n    /** Reference to ths source texture. */\n    public textureSource: TextureSource;\n\n    /**\n     * A map containing all textures of the sprite sheet.\n     * Can be used to create a {@link Sprite|Sprite}:\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * new Sprite(sheet.textures['image.png']);\n     */\n    public textures: Record<keyof S['frames'], Texture>;\n\n    /**\n     * A map containing the textures for each animation.\n     * Can be used to create an {@link AnimatedSprite|AnimatedSprite}:\n     * @example\n     * import { AnimatedSprite } from 'pixi.js';\n     *\n     * new AnimatedSprite(sheet.animations['anim_name']);\n     */\n    public animations: Record<keyof NonNullable<S['animations']>, Texture[]>;\n\n    /**\n     * Reference to the original JSON data.\n     * @type {object}\n     */\n    public data: S;\n\n    /** The resolution of the spritesheet. */\n    public resolution: number;\n\n    /**\n     * Reference to original source image from the Loader. This reference is retained so we\n     * can destroy the Texture later on. It is never used internally.\n     */\n    private _texture: Texture;\n\n    /**\n     * Map of spritesheet frames.\n     * @type {object}\n     */\n    private _frames: S['frames'];\n\n    /** Collection of frame names. */\n    private _frameKeys: (keyof S['frames'])[];\n\n    /** Current batch index being processed. */\n    private _batchIndex: number;\n\n    /**\n     * Callback when parse is completed.\n     * @type {Function}\n     */\n    private _callback: (textures: Dict<Texture>) => void;\n\n    /**\n     * @param texture - Reference to the source BaseTexture object.\n     * @param {object} data - Spritesheet image data.\n     */\n    constructor(texture: BindableTexture, data: S)\n    {\n        this._texture = texture instanceof Texture ? texture : null;\n        this.textureSource = texture.source;\n        this.textures = {} as Record<keyof S['frames'], Texture>;\n        this.animations = {} as Record<keyof NonNullable<S['animations']>, Texture[]>;\n        this.data = data;\n\n        const metaResolution = parseFloat(data.meta.scale as string);\n\n        if (metaResolution)\n        {\n            this.resolution = metaResolution;\n            texture.source.resolution = this.resolution;\n        }\n        else\n        {\n            this.resolution = texture.source._resolution;\n        }\n\n        this._frames = this.data.frames;\n        this._frameKeys = Object.keys(this._frames);\n        this._batchIndex = 0;\n        this._callback = null;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     */\n    public parse(): Promise<Record<string, Texture>>\n    {\n        return new Promise((resolve) =>\n        {\n            this._callback = resolve;\n            this._batchIndex = 0;\n\n            if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n            {\n                this._processFrames(0);\n                this._processAnimations();\n                this._parseComplete();\n            }\n            else\n            {\n                this._nextBatch();\n            }\n        });\n    }\n\n    /**\n     * Process a batch of frames\n     * @param initialFrameIndex - The index of frame to start.\n     */\n    private _processFrames(initialFrameIndex: number): void\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture({\n                    source: this.textureSource,\n\n                    frame,\n                    orig,\n                    trim,\n                    rotate: data.rotated ? 2 : 0,\n                    defaultAnchor: data.anchor,\n                    defaultBorders: data.borders,\n\n                    label: i.toString(),\n                });\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /** Parse animations config. */\n    private _processAnimations(): void\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName as keyof S['animations']] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /** The parse has completed. */\n    private _parseComplete(): void\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /** Begin the next batch of textures. */\n    private _nextBatch(): void\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    public destroy(destroyBase = false): void\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this._texture?.destroy();\n            this.textureSource.destroy();\n        }\n        this._texture = null;\n        this.textureSource = null;\n        this.linkedSheets = [];\n    }\n}\n",null,"import { extensions } from '../extensions/Extensions';\nimport { AlphaMask } from './mask/alpha/AlphaMask';\nimport { ColorMask } from './mask/color/ColorMask';\nimport { StencilMask } from './mask/stencil/StencilMask';\nimport { BufferImageSource } from './renderers/shared/texture/sources/BufferSource';\nimport { CanvasSource } from './renderers/shared/texture/sources/CanvasSource';\nimport { ImageSource } from './renderers/shared/texture/sources/ImageSource';\nimport { VideoSource } from './renderers/shared/texture/sources/VideoSource';\nimport './renderers/shared/texture/utils/textureFrom';\nimport './mask/MaskEffectManager';\n\n/**\n * The rendering namespace contains all the classes used for core rendering in PixiJS\n * this includes all the lower level resources such as Textures, Shaders, State, Buffers,\n * Geometry and the systems required to use them. This covers WebGL and WebGPU and their shared classes.\n *\n * To automatically create a renderer based on available resources, see the {@link rendering.autoDetectRenderer} function.\n * @namespace rendering\n */\n\nextensions.add(AlphaMask, ColorMask, StencilMask, VideoSource, ImageSource, CanvasSource, BufferImageSource);\n\n",null,"import { ExtensionType } from '../../../extensions/Extensions';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { addMaskBounds } from '../utils/addMaskBounds';\nimport { addMaskLocalBounds } from '../utils/addMaskLocalBounds';\n\nimport type { ExtensionMetadata } from '../../../extensions/Extensions';\nimport type { Point } from '../../../maths/point/Point';\nimport type { Bounds } from '../../../scene/container/bounds/Bounds';\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\n\nexport class AlphaMask implements Effect, PoolItem\n{\n    public static extension: ExtensionMetadata = ExtensionType.MaskEffect;\n\n    public priority = 0;\n    public mask: Container;\n    public pipe = 'alphaMask';\n    public renderMaskToTexture: boolean;\n\n    constructor(options?: {mask: Container})\n    {\n        if (options?.mask)\n        {\n            this.init(options.mask);\n        }\n    }\n\n    public init(mask: Container): void\n    {\n        this.mask = mask;\n\n        // TODO - might want to change this to adjust on the fly\n        // user may add children to the sprite..\n        this.renderMaskToTexture = !(mask instanceof Sprite);\n\n        this.mask.renderable = this.renderMaskToTexture;\n        this.mask.includeInBuild = !this.renderMaskToTexture;\n\n        this.mask.measurable = false;\n    }\n\n    public reset()\n    {\n        this.mask.measurable = true;\n        this.mask = null;\n    }\n\n    public addBounds(bounds: Bounds, skipUpdateTransform?: boolean): void\n    {\n        addMaskBounds(this.mask, bounds, skipUpdateTransform);\n    }\n\n    public addLocalBounds(bounds: Bounds, localRoot: Container): void\n    {\n        addMaskLocalBounds(this.mask, bounds, localRoot);\n    }\n\n    public containsPoint(point: Point, hitTestFn: (container: Container, point: Point) => boolean): boolean\n    {\n        const mask = this.mask as any;\n\n        // if the point is in the mask, yay!\n        return hitTestFn(mask, point);\n    }\n\n    public destroy(): void\n    {\n        this.reset();\n    }\n\n    public static test(mask: any): boolean\n    {\n        return mask instanceof Sprite;\n    }\n}\n",null,"import { ObservablePoint } from '../../maths/point/ObservablePoint';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { Container } from '../container/Container';\n\nimport type { Size } from '../../maths/misc/Size';\nimport type { PointData } from '../../maths/point/PointData';\nimport type { TextureSourceLike } from '../../rendering/renderers/shared/texture/Texture';\nimport type { View } from '../../rendering/renderers/shared/view/View';\nimport type { Bounds, BoundsData } from '../container/bounds/Bounds';\nimport type { ContainerOptions } from '../container/Container';\nimport type { Optional } from '../container/container-mixins/measureMixin';\nimport type { DestroyOptions } from '../container/destroyTypes';\n\n/**\n * Options for the {@link scene.Sprite} constructor.\n * @memberof scene\n */\nexport interface SpriteOptions extends ContainerOptions\n{\n    /** The texture to use for the sprite. */\n    texture?: Texture;\n    /** The anchor point of the sprite. */\n    anchor?: PointData | number;\n    /** Whether or not to round the x/y position. */\n    roundPixels?: boolean;\n}\n\n/**\n * The Sprite object is one of the most important objects in PixiJS. It is a\n * drawing item that can be added to a scene and rendered to the screen.\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * import { Sprite } from 'pixi.js';\n *\n * const sprite = Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link assets.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * import { Assets, Sprite } from 'pixi.js';\n *\n * const sheet = await Assets.load('assets/spritesheet.json');\n * const sprite = new Sprite(sheet.textures['image.png']);\n * ```\n * @memberof scene\n * @extends scene.Container\n */\nexport class Sprite extends Container implements View\n{\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image, video, canvas element, video element, texture\n     * @param source - Source to create texture from\n     * @param [skipCache] - Whether to skip the cache or not\n     * @returns The newly created sprite\n     */\n    public static from(source: Texture | TextureSourceLike, skipCache = false): Sprite\n    {\n        if (source instanceof Texture)\n        {\n            return new Sprite(source);\n        }\n\n        return new Sprite(Texture.from(source, skipCache));\n    }\n\n    public readonly renderPipeId = 'sprite';\n\n    public batched = true;\n    public readonly _anchor: ObservablePoint;\n\n    // sprite specific..\n    public _texture: Texture;\n    public _didSpriteUpdate = false;\n\n    private readonly _bounds: BoundsData = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    private readonly _sourceBounds: BoundsData = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    private _boundsDirty = true;\n    private _sourceBoundsDirty = true;\n\n    public _roundPixels: 0 | 1 = 0;\n\n    /**\n     * @param options - The options for creating the sprite.\n     */\n    constructor(options: SpriteOptions | Texture = Texture.EMPTY)\n    {\n        if (options instanceof Texture)\n        {\n            options = { texture: options };\n        }\n\n        // split out\n        const { texture, anchor, roundPixels, width, height, ...rest } = options;\n\n        super({\n            label: 'Sprite',\n            ...rest\n        });\n\n        this._anchor = new ObservablePoint(\n            {\n                _onUpdate: () =>\n                {\n                    this.onViewUpdate();\n                }\n            },\n        );\n\n        if (anchor) this.anchor = anchor;\n        this.texture = texture;\n        this.allowChildren = false;\n        this.roundPixels = roundPixels ?? false;\n\n        // needs to be set after the container has initiated\n        if (width) this.width = width;\n        if (height) this.height = height;\n    }\n\n    set texture(value: Texture)\n    {\n        value ||= Texture.EMPTY;\n\n        const currentTexture = this._texture;\n\n        if (currentTexture === value) return;\n\n        if (currentTexture && currentTexture.dynamic) currentTexture.off('update', this.onViewUpdate, this);\n        if (value.dynamic) value.on('update', this.onViewUpdate, this);\n\n        this._texture = value;\n\n        this.onViewUpdate();\n    }\n\n    /** The texture that the sprite is using. */\n    get texture()\n    {\n        return this._texture;\n    }\n\n    /**\n     * The local bounds of the sprite.\n     * @type {rendering.Bounds}\n     */\n    get bounds()\n    {\n        if (this._boundsDirty)\n        {\n            this._updateBounds();\n            this._boundsDirty = false;\n        }\n\n        return this._bounds;\n    }\n\n    /**\n     * The bounds of the sprite, taking the texture's trim into account.\n     * @type {rendering.Bounds}\n     */\n    get sourceBounds()\n    {\n        if (this._sourceBoundsDirty)\n        {\n            this._updateSourceBounds();\n            this._sourceBoundsDirty = false;\n        }\n\n        return this._sourceBounds;\n    }\n\n    /**\n     * Checks if the object contains the given point.\n     * @param point - The point to check\n     */\n    public containsPoint(point: PointData)\n    {\n        const bounds = this.sourceBounds;\n\n        if (point.x >= bounds.maxX && point.x <= bounds.minX)\n        {\n            if (point.y >= bounds.maxY && point.y <= bounds.minY)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Adds the bounds of this object to the bounds object.\n     * @param bounds - The output bounds object.\n     */\n    public addBounds(bounds: Bounds)\n    {\n        const _bounds = this._texture.trim ? this.sourceBounds : this.bounds;\n\n        bounds.addFrame(_bounds.minX, _bounds.minY, _bounds.maxX, _bounds.maxY);\n    }\n\n    public onViewUpdate()\n    {\n        // increment from the 12th bit!\n        this._didChangeId += 1 << 12;\n        this._didSpriteUpdate = true;\n        this._sourceBoundsDirty = this._boundsDirty = true;\n\n        if (this.didViewUpdate) return;\n        this.didViewUpdate = true;\n\n        if (this.renderGroup)\n        {\n            this.renderGroup.onChildViewUpdate(this);\n        }\n    }\n\n    private _updateBounds()\n    {\n        updateQuadBounds(this._bounds, this._anchor, this._texture, 0);\n    }\n\n    private _updateSourceBounds()\n    {\n        const anchor = this._anchor;\n        const texture = this._texture;\n\n        const sourceBounds = this._sourceBounds;\n\n        const { width, height } = texture.orig;\n\n        sourceBounds.maxX = -anchor._x * width;\n        sourceBounds.minX = sourceBounds.maxX + width;\n\n        sourceBounds.maxY = -anchor._y * height;\n        sourceBounds.minY = sourceBounds.maxY + height;\n    }\n\n    /**\n     * Destroys this sprite renderable and optionally its texture.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n     */\n    public destroy(options: DestroyOptions = false)\n    {\n        super.destroy(options);\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            this._texture.destroy(destroyTextureSource);\n        }\n\n        this._texture = null;\n        (this._bounds as null) = null;\n        (this._sourceBounds as null) = null;\n        (this._anchor as null) = null;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite({texture: Texture.WHITE});\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: PointData | number)\n    {\n        typeof value === 'number' ? this._anchor.set(value) : this._anchor.copyFrom(value);\n    }\n\n    /**\n     *  Whether or not to round the x/y position of the sprite.\n     * @type {boolean}\n     */\n    get roundPixels()\n    {\n        return !!this._roundPixels;\n    }\n\n    set roundPixels(value: boolean)\n    {\n        this._roundPixels = value ? 1 : 0;\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    override get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    override set width(value: number)\n    {\n        this._setWidth(value, this._texture.orig.width);\n    }\n\n    /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n    override get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    override set height(value: number)\n    {\n        this._setHeight(value, this._texture.orig.height);\n    }\n\n    /**\n     * Retrieves the size of the Sprite as a [Size]{@link Size} object.\n     * This is faster than get the width and height separately.\n     * @param out - Optional object to store the size in.\n     * @returns - The size of the Sprite.\n     */\n    public override getSize(out?: Size): Size\n    {\n        if (!out)\n        {\n            out = {} as Size;\n        }\n\n        out.width = Math.abs(this.scale.x) * this._texture.orig.width;\n        out.height = Math.abs(this.scale.y) * this._texture.orig.height;\n\n        return out;\n    }\n\n    /**\n     * Sets the size of the Sprite to the specified width and height.\n     * This is faster than setting the width and height separately.\n     * @param value - This can be either a number or a [Size]{@link Size} object.\n     * @param height - The height to set. Defaults to the value of `width` if not provided.\n     */\n    public override setSize(value: number | Optional<Size, 'height'>, height?: number)\n    {\n        let convertedWidth: number;\n        let convertedHeight: number;\n\n        if (typeof value !== 'object')\n        {\n            convertedWidth = value;\n            convertedHeight = height ?? value;\n        }\n        else\n        {\n            convertedWidth = value.width;\n            convertedHeight = value.height ?? value.width;\n        }\n\n        if (convertedWidth !== undefined)\n        {\n            this._setWidth(convertedWidth, this._texture.orig.width);\n        }\n\n        if (convertedHeight !== undefined)\n        {\n            this._setHeight(convertedHeight, this._texture.orig.height);\n        }\n    }\n}\n",null,"import type { ObservablePoint } from '../../maths/point/ObservablePoint';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../../scene/container/bounds/Bounds';\n\nexport function updateQuadBounds(\n    bounds: BoundsData,\n    anchor: ObservablePoint,\n    texture: Texture,\n    padding: number\n)\n{\n    const { width, height } = texture.orig;\n    const trim = texture.trim;\n\n    if (trim)\n    {\n        const sourceWidth = trim.width;\n        const sourceHeight = trim.height;\n\n        bounds.minX = (trim.x) - (anchor._x * width) - padding;\n        bounds.maxX = bounds.minX + sourceWidth;\n\n        bounds.minY = (trim.y) - (anchor._y * height) - padding;\n        bounds.maxY = bounds.minY + sourceHeight;\n    }\n\n    else\n    {\n        bounds.minX = (-anchor._x * width) - padding;\n        bounds.maxX = bounds.minX + width;\n\n        bounds.minY = (-anchor._y * height) - padding;\n        bounds.maxY = bounds.minY + height;\n    }\n\n    return;\n}\n",null,"import { Bounds } from '../../../scene/container/bounds/Bounds';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds';\n\nimport type { Container } from '../../../scene/container/Container';\n\nconst tempBounds = new Bounds();\n\nexport function addMaskBounds(mask: Container, bounds: Bounds, skipUpdateTransform: boolean): void\n{\n    const boundsToMask = tempBounds;\n\n    mask.measurable = true;\n\n    getGlobalBounds(mask, skipUpdateTransform, boundsToMask);\n\n    bounds.addBoundsMask(boundsToMask);\n\n    mask.measurable = false;\n}\n\n",null,"import { getLocalBounds } from '../../../scene/container/bounds/getLocalBounds';\nimport { boundsPool, matrixPool } from '../../../scene/container/bounds/utils/matrixAndBoundsPool';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Bounds } from '../../../scene/container/bounds/Bounds';\nimport type { Container } from '../../../scene/container/Container';\n\nexport function addMaskLocalBounds(mask: Container, bounds: Bounds, localRoot: Container): void\n{\n    const boundsToMask = boundsPool.get();\n\n    mask.measurable = true;\n\n    const tempMatrix = matrixPool.get().identity();\n\n    const relativeMask = getMatrixRelativeToParent(mask, localRoot, tempMatrix);\n\n    getLocalBounds(mask, boundsToMask, relativeMask);\n\n    mask.measurable = false;\n\n    bounds.addBoundsMask(boundsToMask);\n\n    matrixPool.return(tempMatrix);\n    boundsPool.return(boundsToMask);\n}\n\nexport function getMatrixRelativeToParent(target: Container, root: Container, matrix: Matrix): Matrix\n{\n    if (!target)\n    {\n        // we have reach the top of the tree!\n        // #if _DEBUG\n        warn('Mask bounds, renderable is not inside the root container');\n        // #endif\n\n        return matrix;\n    }\n\n    if (target !== root)\n    {\n        getMatrixRelativeToParent(target.parent, root, matrix);\n\n        target.updateLocalTransform();\n\n        matrix.append(target.localTransform);\n    }\n\n    return matrix;\n}\n",null,"import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../../../extensions/Extensions';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\n\nexport class ColorMask implements Effect, PoolItem\n{\n    public static extension: ExtensionMetadata = ExtensionType.MaskEffect;\n\n    public priority = 0;\n    public mask: number;\n    public pipe = 'colorMask';\n\n    constructor(options: {mask: number})\n    {\n        if (options?.mask)\n        {\n            this.init(options.mask);\n        }\n    }\n\n    public init(mask: number): void\n    {\n        this.mask = mask;\n    }\n\n    public destroy(): void\n    {\n        // nothing to destroy\n    }\n\n    public static test(mask: any): boolean\n    {\n        return typeof mask === 'number';\n    }\n}\n",null,"import { ExtensionType } from '../../../extensions/Extensions';\nimport { Container } from '../../../scene/container/Container';\nimport { addMaskBounds } from '../utils/addMaskBounds';\nimport { addMaskLocalBounds } from '../utils/addMaskLocalBounds';\n\nimport type { ExtensionMetadata } from '../../../extensions/Extensions';\nimport type { Point } from '../../../maths/point/Point';\nimport type { Bounds } from '../../../scene/container/bounds/Bounds';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\n\nexport class StencilMask implements Effect, PoolItem\n{\n    public static extension: ExtensionMetadata = ExtensionType.MaskEffect;\n\n    public priority = 0;\n    public mask: Container;\n    public pipe = 'stencilMask';\n\n    constructor(options: {mask: Container})\n    {\n        if (options?.mask)\n        {\n            this.init(options.mask);\n        }\n    }\n\n    public init(mask: Container): void\n    {\n        this.mask = mask;\n        this.mask.includeInBuild = false;\n        this.mask.measurable = false;\n    }\n\n    public reset()\n    {\n        this.mask.measurable = true;\n        this.mask.includeInBuild = true;\n        this.mask = null;\n    }\n\n    public addBounds(bounds: Bounds, skipUpdateTransform: boolean): void\n    {\n        addMaskBounds(this.mask, bounds, skipUpdateTransform);\n    }\n\n    public addLocalBounds(bounds: Bounds, localRoot: Container): void\n    {\n        addMaskLocalBounds(this.mask, bounds, localRoot);\n    }\n\n    public containsPoint(point: Point, hitTestFn: (container: Container, point: Point) => boolean): boolean\n    {\n        const mask = this.mask as any;\n\n        // if the point is in the mask, yay!\n        return hitTestFn(mask, point);\n    }\n\n    public destroy(): void\n    {\n        this.reset();\n    }\n\n    public static test(mask: any): boolean\n    {\n        return mask instanceof Container;\n    }\n}\n",null,"import { DOMAdapter } from '../../../../../environment/adapter';\nimport { ExtensionType } from '../../../../../extensions/Extensions';\nimport { TextureSource } from './TextureSource';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { ExtensionMetadata } from '../../../../../extensions/Extensions';\nimport type { TextureSourceOptions } from './TextureSource';\n\nexport interface CanvasSourceOptions extends TextureSourceOptions<ICanvas>\n{\n    /** should the canvas be resized to preserve its screen width and height regardless of the resolution of the renderer */\n    autoDensity?: boolean;\n    /** if true, this canvas will be set up to be transparent where possible */\n    transparent?: boolean;\n}\n\nexport class CanvasSource extends TextureSource<ICanvas>\n{\n    public static extension: ExtensionMetadata = ExtensionType.TextureSource;\n\n    public uploadMethodId = 'image';\n    public autoDensity: boolean;\n    public transparent: boolean;\n\n    constructor(options: CanvasSourceOptions)\n    {\n        if (!options.resource)\n        {\n            options.resource = DOMAdapter.get().createCanvas();\n        }\n\n        if (!options.width)\n        {\n            options.width = options.resource.width;\n\n            if (!options.autoDensity)\n            {\n                options.width /= options.resolution;\n            }\n        }\n\n        if (!options.height)\n        {\n            options.height = options.resource.height;\n\n            if (!options.autoDensity)\n            {\n                options.height /= options.resolution;\n            }\n        }\n\n        super(options);\n\n        this.autoDensity = options.autoDensity;\n\n        const canvas = options.resource;\n\n        if (this.pixelWidth !== canvas.width || this.pixelWidth !== canvas.height)\n        {\n            this.resizeCanvas();\n        }\n\n        this.transparent = !!options.transparent;\n    }\n\n    public resizeCanvas()\n    {\n        if (this.autoDensity)\n        {\n            this.resource.style.width = `${this.width}px`;\n            this.resource.style.height = `${this.height}px`;\n        }\n\n        // only resize if wee need to, as this clears the canvas (even if values are set to the same)\n        if (this.resource.width !== this.pixelWidth || this.resource.height !== this.pixelHeight)\n        {\n            this.resource.width = this.pixelWidth;\n            this.resource.height = this.pixelHeight;\n        }\n    }\n\n    public resize(width = this.width, height = this.height, resolution = this._resolution): boolean\n    {\n        const didResize = super.resize(width, height, resolution);\n\n        if (didResize)\n        {\n            this.resizeCanvas();\n        }\n\n        return didResize;\n    }\n\n    public static test(resource: any): resource is ICanvas\n    {\n        return (globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement)\n        || (globalThis.OffscreenCanvas && resource instanceof OffscreenCanvas);\n    }\n}\n",null,"import { DOMAdapter } from '../../../../../environment/adapter';\nimport { ExtensionType } from '../../../../../extensions/Extensions';\nimport { warn } from '../../../../../utils/logging/warn';\nimport { TextureSource } from './TextureSource';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { ExtensionMetadata } from '../../../../../extensions/Extensions';\nimport type { TextureSourceOptions } from './TextureSource';\n\nexport type ImageResource =\nImageBitmap\n| HTMLCanvasElement\n| OffscreenCanvas\n| ICanvas\n| VideoFrame\n| HTMLImageElement\n| HTMLVideoElement;\n\nexport class ImageSource extends TextureSource<ImageResource>\n{\n    public static extension: ExtensionMetadata = ExtensionType.TextureSource;\n    public uploadMethodId = 'image';\n\n    constructor(options: TextureSourceOptions<ImageResource>)\n    {\n        if (options.resource && (globalThis.HTMLImageElement && options.resource instanceof HTMLImageElement))\n        {\n            const canvas = DOMAdapter.get().createCanvas(options.resource.width, options.resource.height);\n            const context = canvas.getContext('2d');\n\n            context.drawImage(options.resource, 0, 0);\n            options.resource = canvas;\n\n            // #if _DEBUG\n            warn('ImageSource: Image element passed, converting to canvas. Use CanvasSource instead.');\n            // #endif\n        }\n\n        super(options);\n\n        this.autoGarbageCollect = true;\n    }\n\n    public static test(resource: any): resource is ImageResource\n    {\n        return (globalThis.HTMLImageElement && resource instanceof HTMLImageElement)\n        || (typeof ImageBitmap !== 'undefined' && resource instanceof ImageBitmap);\n    }\n}\n",null,"// VideoSource.ts\n\nimport { ExtensionType } from '../../../../../extensions/Extensions';\nimport { Ticker } from '../../../../../ticker/Ticker';\nimport { detectVideoAlphaMode } from '../../../../../utils/browser/detectVideoAlphaMode';\nimport { TextureSource } from './TextureSource';\n\nimport type { ExtensionMetadata } from '../../../../../extensions/Extensions';\nimport type { Dict } from '../../../../../utils/types';\nimport type { ALPHA_MODES } from '../const';\nimport type { TextureSourceOptions } from './TextureSource';\n\ntype VideoResource = HTMLVideoElement;\n\n/**\n * Options for video sources.\n * @memberof rendering\n */\nexport interface VideoSourceOptions extends TextureSourceOptions<VideoResource>\n{\n    /** If true, the video will start loading immediately. */\n    autoLoad?: boolean;\n    /** If true, the video will start playing as soon as it is loaded. */\n    autoPlay?: boolean;\n    /** The number of times a second to update the texture from the video. Leave at 0 to update at every render. */\n    updateFPS?: number;\n    /** If true, the video will be loaded with the `crossorigin` attribute. */\n    crossorigin?: boolean | string;\n    /** If true, the video will loop when it ends. */\n    loop?: boolean;\n    /** If true, the video will be muted. */\n    muted?: boolean;\n    /** If true, the video will play inline. */\n    playsinline?: boolean;\n    /** If true, the video will be preloaded. */\n    preload?: boolean;\n    /** The time in milliseconds to wait for the video to preload before timing out. */\n    preloadTimeoutMs?: number;\n    /** The alpha mode of the video. */\n    alphaMode?: ALPHA_MODES;\n}\n\nexport interface VideoResourceOptionsElement\n{\n    src: string;\n    mime: string;\n}\n\n/**\n * A source for video-based textures.\n * @memberof rendering\n */\nexport class VideoSource extends TextureSource<VideoResource>\n{\n    public static extension: ExtensionMetadata = ExtensionType.TextureSource;\n\n    /** The default options for video sources. */\n    public static defaultOptions: VideoSourceOptions = {\n        ...TextureSource.defaultOptions,\n        /** If true, the video will start loading immediately. */\n        autoLoad: true,\n        /** If true, the video will start playing as soon as it is loaded. */\n        autoPlay: true,\n        /** The number of times a second to update the texture from the video. Leave at 0 to update at every render. */\n        updateFPS: 0,\n        /** If true, the video will be loaded with the `crossorigin` attribute. */\n        crossorigin: true,\n        /** If true, the video will loop when it ends. */\n        loop: false,\n        /** If true, the video will be muted. */\n        muted: true,\n        /** If true, the video will play inline. */\n        playsinline: true,\n        /** If true, the video will be preloaded. */\n        preload: false,\n    };\n\n    // Public\n    /** Whether or not the video is ready to play. */\n    public isReady = false;\n    /** The upload method for this texture. */\n    public uploadMethodId = 'video';\n\n    // Protected\n    /**\n     * When set to true will automatically play videos used by this texture once\n     * they are loaded. If false, it will not modify the playing state.\n     * @default true\n     */\n    protected autoPlay: boolean;\n\n    // Private\n    /**\n     * `true` to use Ticker.shared to auto update the base texture.\n     * @default true\n     */\n    private _autoUpdate: boolean;\n\n    /**\n     * `true` if the instance is currently connected to Ticker.shared to auto update the base texture.\n     * @default false\n     */\n    private _isConnectedToTicker: boolean;\n\n    /**\n     * Promise when loading.\n     * @default null\n     */\n    private _load: Promise<this>;\n\n    private _msToNextUpdate: number;\n    private _preloadTimeout: number;\n\n    /** Callback when completed with load. */\n    private _resolve: (value?: this | PromiseLike<this>) => void;\n    private _reject: (error: ErrorEvent) => void;\n\n    private _updateFPS: number;\n    private _videoFrameRequestCallbackHandle: number | null;\n\n    constructor(\n        options: VideoSourceOptions\n    )\n    {\n        super(options);\n\n        // Merge provided options with default ones\n        options = {\n            ...VideoSource.defaultOptions,\n            ...options\n        };\n\n        this._autoUpdate = true;\n        this._isConnectedToTicker = false;\n        this._updateFPS = options.updateFPS || 0;\n        this._msToNextUpdate = 0;\n        this.autoPlay = options.autoPlay !== false;\n        this.alphaMode = options.alphaMode ?? 'premultiply-alpha-on-upload';\n\n        // Binding for frame updates\n        this._videoFrameRequestCallback = this._videoFrameRequestCallback.bind(this);\n        this._videoFrameRequestCallbackHandle = null;\n\n        this._load = null;\n        this._resolve = null;\n        this._reject = null;\n\n        // Bind for listeners\n        this._onCanPlay = this._onCanPlay.bind(this);\n        this._onCanPlayThrough = this._onCanPlayThrough.bind(this);\n        this._onError = this._onError.bind(this);\n        this._onPlayStart = this._onPlayStart.bind(this);\n        this._onPlayStop = this._onPlayStop.bind(this);\n        this._onSeeked = this._onSeeked.bind(this);\n\n        if (options.autoLoad !== false)\n        {\n            void this.load();\n        }\n    }\n\n    /** Update the video frame if the source is not destroyed and meets certain conditions. */\n    protected updateFrame(): void\n    {\n        if (this.destroyed)\n        {\n            return;\n        }\n\n        if (this._updateFPS)\n        {\n            // Account for if video has had its playbackRate changed\n            const elapsedMS = Ticker.shared.elapsedMS * this.resource.playbackRate;\n\n            this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);\n        }\n\n        if (!this._updateFPS || this._msToNextUpdate <= 0)\n        {\n            this._msToNextUpdate = this._updateFPS ? Math.floor(1000 / this._updateFPS) : 0;\n        }\n\n        if (this.isValid)\n        {\n            this.update();\n        }\n    }\n\n    /** Callback to update the video frame and potentially request the next frame update. */\n    private _videoFrameRequestCallback(): void\n    {\n        this.updateFrame();\n\n        if (this.destroyed)\n        {\n            this._videoFrameRequestCallbackHandle = null;\n        }\n        else\n        {\n            this._videoFrameRequestCallbackHandle = (this.source as any).requestVideoFrameCallback(\n                this._videoFrameRequestCallback\n            );\n        }\n    }\n\n    /**\n     * Checks if the resource has valid dimensions.\n     * @returns {boolean} True if width and height are set, otherwise false.\n     */\n    public get isValid(): boolean\n    {\n        return !!this.resource.videoWidth && !!this.resource.videoHeight;\n    }\n\n    /**\n     * Start preloading the video resource.\n     * @returns {Promise<this>} Handle the validate event\n     */\n    public async load(): Promise<this>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        const source = this.resource;\n        const options = this.options as VideoSourceOptions;\n\n        // Check if source data is enough and set it to complete if needed\n        if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA)\n            && source.width && source.height)\n        {\n            (source as any).complete = true;\n        }\n\n        // Add event listeners related to playback and seeking\n        source.addEventListener('play', this._onPlayStart);\n        source.addEventListener('pause', this._onPlayStop);\n        source.addEventListener('seeked', this._onSeeked);\n\n        // Add or handle source readiness event listeners\n        if (!this._isSourceReady())\n        {\n            if (!options.preload)\n            {\n                // since this event fires early, only bind if not waiting for a preload event\n                source.addEventListener('canplay', this._onCanPlay);\n            }\n            source.addEventListener('canplaythrough', this._onCanPlayThrough);\n            source.addEventListener('error', this._onError, true);\n        }\n        else\n        {\n            // Source is already ready, so handle it immediately\n            this._mediaReady();\n        }\n\n        this.alphaMode = await detectVideoAlphaMode();\n\n        // Create and return the loading promise\n        this._load = new Promise((resolve, reject): void =>\n        {\n            if (this.isValid)\n            {\n                resolve(this);\n            }\n            else\n            {\n                this._resolve = resolve;\n                this._reject = reject;\n\n                if (options.preloadTimeoutMs !== undefined)\n                {\n                    this._preloadTimeout = setTimeout(() =>\n                    {\n                        this._onError(new ErrorEvent(`Preload exceeded timeout of ${options.preloadTimeoutMs}ms`));\n                    }) as unknown as number;\n                }\n                source.load();\n            }\n        });\n\n        return this._load;\n    }\n\n    /**\n     * Handle video error events.\n     * @param event - The error event\n     */\n    private _onError(event: ErrorEvent): void\n    {\n        this.resource.removeEventListener('error', this._onError, true);\n        this.emit('error', event);\n\n        if (this._reject)\n        {\n            this._reject(event);\n            this._reject = null;\n            this._resolve = null;\n        }\n    }\n\n    /**\n     * Checks if the underlying source is playing.\n     * @returns True if playing.\n     */\n    private _isSourcePlaying(): boolean\n    {\n        const source = this.resource;\n\n        return (!source.paused && !source.ended);\n    }\n\n    /**\n     * Checks if the underlying source is ready for playing.\n     * @returns True if ready.\n     */\n    private _isSourceReady(): boolean\n    {\n        const source = this.resource;\n\n        return source.readyState > 2;\n    }\n\n    /** Runs the update loop when the video is ready to play. */\n    private _onPlayStart(): void\n    {\n        // Handle edge case where video might not have received its \"can play\" event yet\n        if (!this.isValid)\n        {\n            this._mediaReady();\n        }\n\n        this._configureAutoUpdate();\n    }\n\n    /** Stops the update loop when a pause event is triggered. */\n    private _onPlayStop(): void\n    {\n        this._configureAutoUpdate();\n    }\n\n    /** Handles behavior when the video completes seeking to the current playback position. */\n    private _onSeeked(): void\n    {\n        if (this._autoUpdate && !this._isSourcePlaying())\n        {\n            this._msToNextUpdate = 0;\n            this.updateFrame();\n            this._msToNextUpdate = 0;\n        }\n    }\n\n    private _onCanPlay(): void\n    {\n        const source = this.resource;\n\n        // Remove event listeners\n        source.removeEventListener('canplay', this._onCanPlay);\n\n        this._mediaReady();\n    }\n\n    private _onCanPlayThrough(): void\n    {\n        const source = this.resource;\n\n        // Remove event listeners\n        source.removeEventListener('canplaythrough', this._onCanPlay);\n\n        if (this._preloadTimeout)\n        {\n            clearTimeout(this._preloadTimeout);\n            this._preloadTimeout = undefined;\n        }\n\n        this._mediaReady();\n    }\n\n    /** Fired when the video is loaded and ready to play. */\n    private _mediaReady(): void\n    {\n        const source = this.resource;\n\n        if (this.isValid)\n        {\n            this.isReady = true;\n            this.resize(source.videoWidth, source.videoHeight);\n        }\n\n        // Reset update timers and perform a frame update\n        this._msToNextUpdate = 0;\n        this.updateFrame();\n        this._msToNextUpdate = 0;\n\n        // Resolve the loading promise if it exists\n        if (this._resolve)\n        {\n            this._resolve(this);\n            this._resolve = null;\n            this._reject = null;\n        }\n\n        // Handle play behavior based on current source status\n        if (this._isSourcePlaying())\n        {\n            this._onPlayStart();\n        }\n        else if (this.autoPlay)\n        {\n            void this.resource.play();\n        }\n    }\n\n    /** Cleans up resources and event listeners associated with this texture. */\n    public destroy()\n    {\n        this._configureAutoUpdate();\n\n        const source = this.resource;\n\n        if (source)\n        {\n            // Remove event listeners\n            source.removeEventListener('play', this._onPlayStart);\n            source.removeEventListener('pause', this._onPlayStop);\n            source.removeEventListener('seeked', this._onSeeked);\n            source.removeEventListener('canplay', this._onCanPlay);\n            source.removeEventListener('canplaythrough', this._onCanPlayThrough);\n            source.removeEventListener('error', this._onError, true);\n\n            // Clear the video source and pause\n            source.pause();\n            source.src = '';\n            source.load();\n        }\n\n        super.destroy();\n    }\n\n    /** Should the base texture automatically update itself, set to true by default. */\n    get autoUpdate(): boolean\n    {\n        return this._autoUpdate;\n    }\n\n    set autoUpdate(value: boolean)\n    {\n        if (value !== this._autoUpdate)\n        {\n            this._autoUpdate = value;\n            this._configureAutoUpdate();\n        }\n    }\n\n    /**\n     * How many times a second to update the texture from the video.\n     * Leave at 0 to update at every render.\n     * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n     */\n    get updateFPS(): number\n    {\n        return this._updateFPS;\n    }\n\n    set updateFPS(value: number)\n    {\n        if (value !== this._updateFPS)\n        {\n            this._updateFPS = value;\n            this._configureAutoUpdate();\n        }\n    }\n\n    /**\n     * Configures the updating mechanism based on the current state and settings.\n     *\n     * This method decides between using the browser's native video frame callback or a custom ticker\n     * for updating the video frame. It ensures optimal performance and responsiveness\n     * based on the video's state, playback status, and the desired frames-per-second setting.\n     *\n     * - If `_autoUpdate` is enabled and the video source is playing:\n     *   - It will prefer the native video frame callback if available and no specific FPS is set.\n     *   - Otherwise, it will use a custom ticker for manual updates.\n     * - If `_autoUpdate` is disabled or the video isn't playing, any active update mechanisms are halted.\n     */\n    private _configureAutoUpdate(): void\n    {\n        // Check if automatic updating is enabled and if the source is currently playing\n        if (this._autoUpdate && this._isSourcePlaying())\n        {\n            // Determine if we should use the browser's native video frame callback (generally for better performance)\n            if (!this._updateFPS && (this.source as any).requestVideoFrameCallback)\n            {\n                // If connected to a custom ticker, remove the update frame function from it\n                if (this._isConnectedToTicker)\n                {\n                    Ticker.shared.remove(this.updateFrame, this);\n                    this._isConnectedToTicker = false;\n                    // Reset the time until the next update\n                    this._msToNextUpdate = 0;\n                }\n\n                // Check if we haven't already requested a video frame callback, and if not, request one\n                if (this._videoFrameRequestCallbackHandle === null)\n                {\n                    this._videoFrameRequestCallbackHandle = (this.source as any).requestVideoFrameCallback(\n                        this._videoFrameRequestCallback\n                    );\n                }\n            }\n            else\n            {\n                // If a video frame request callback exists, cancel it, as we are switching to manual ticker-based updates\n                if (this._videoFrameRequestCallbackHandle !== null)\n                {\n                    (this.source as any).cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle);\n                    this._videoFrameRequestCallbackHandle = null;\n                }\n\n                // If not connected to the custom ticker, add the update frame function to it\n                if (!this._isConnectedToTicker)\n                {\n                    Ticker.shared.add(this.updateFrame, this);\n                    this._isConnectedToTicker = true;\n                    // Reset the time until the next update\n                    this._msToNextUpdate = 0;\n                }\n            }\n        }\n        else\n        {\n            // If automatic updating is disabled or the source isn't playing, perform cleanup\n\n            // Cancel any existing video frame callback request\n            if (this._videoFrameRequestCallbackHandle !== null)\n            {\n                (this.source as any).cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle);\n                this._videoFrameRequestCallbackHandle = null;\n            }\n\n            // Remove the update frame function from the custom ticker\n            if (this._isConnectedToTicker)\n            {\n                Ticker.shared.remove(this.updateFrame, this);\n                this._isConnectedToTicker = false;\n                // Reset the time until the next update\n                this._msToNextUpdate = 0;\n            }\n        }\n    }\n\n    /**\n     * Map of video MIME types that can't be directly derived from file extensions.\n     * @readonly\n     */\n    public static MIME_TYPES: Dict<string>\n        = {\n            ogv: 'video/ogg',\n            mov: 'video/quicktime',\n            m4v: 'video/mp4',\n        };\n\n    public static test(resource: any): resource is VideoResource\n    {\n        return (globalThis.HTMLVideoElement && resource instanceof HTMLVideoElement)\n            || (globalThis.VideoFrame && resource instanceof VideoFrame);\n    }\n}\n",null,"import type { ALPHA_MODES } from '../../rendering/renderers/shared/texture/const';\n\nlet promise: Promise<ALPHA_MODES> | undefined;\n\n/**\n * Helper for detecting the correct alpha mode for video textures.\n * For some reason, some browsers/devices/WebGL implementations premultiply the alpha\n * of a video before and then a second time if `UNPACK_PREMULTIPLY_ALPHA_WEBGL`\n * is true. So the video is premultiplied twice if the alpha mode is `UNPACK`.\n * In this case we need the alpha mode to be `PMA`. This function detects\n * the upload behavior by uploading a white 2x2 webm with 50% alpha\n * without `UNPACK_PREMULTIPLY_ALPHA_WEBGL` and then checking whether\n * the uploaded pixels are premultiplied.\n * @memberof utils\n * @function detectVideoAlphaMode\n * @returns {Promise<ALPHA_MODES>} The correct alpha mode for video textures.\n */\nexport async function detectVideoAlphaMode(): Promise<ALPHA_MODES>\n{\n    promise ??= (async () =>\n    {\n        const canvas = document.createElement('canvas');\n        const gl = canvas.getContext('webgl');\n\n        if (!gl)\n        {\n            return 'premultiply-alpha-on-upload';\n        }\n\n        const video = await new Promise<HTMLVideoElement | null>((resolve) =>\n        {\n            const video = document.createElement('video');\n\n            video.onloadeddata = () => resolve(video);\n            video.onerror = () => resolve(null);\n            video.autoplay = false;\n            video.crossOrigin = 'anonymous';\n            video.preload = 'auto';\n            // eslint-disable-next-line max-len\n            video.src = 'data:video/webm;base64,GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQJChYECGFOAZwEAAAAAAAHTEU2bdLpNu4tTq4QVSalmU6yBoU27i1OrhBZUrmtTrIHGTbuMU6uEElTDZ1OsggEXTbuMU6uEHFO7a1OsggG97AEAAAAAAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmoCrXsYMPQkBNgIRMYXZmV0GETGF2ZkSJiEBEAAAAAAAAFlSua8yuAQAAAAAAAEPXgQFzxYgAAAAAAAAAAZyBACK1nIN1bmSIgQCGhVZfVlA5g4EBI+ODhAJiWgDglLCBArqBApqBAlPAgQFVsIRVuYEBElTDZ9Vzc9JjwItjxYgAAAAAAAAAAWfInEWjh0VOQ09ERVJEh49MYXZjIGxpYnZweC12cDlnyKJFo4hEVVJBVElPTkSHlDAwOjAwOjAwLjA0MDAwMDAwMAAAH0O2dcfngQCgwqGggQAAAIJJg0IAABAAFgA4JBwYSgAAICAAEb///4r+AAB1oZ2mm+6BAaWWgkmDQgAAEAAWADgkHBhKAAAgIABIQBxTu2uRu4+zgQC3iveBAfGCAXHwgQM=';\n            video.load();\n        });\n\n        if (!video)\n        {\n            return 'premultiply-alpha-on-upload';\n        }\n\n        const texture = gl.createTexture();\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        const framebuffer = gl.createFramebuffer();\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,\n            gl.COLOR_ATTACHMENT0,\n            gl.TEXTURE_2D,\n            texture,\n            0\n        );\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);\n\n        const pixel = new Uint8Array(4);\n\n        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n\n        gl.deleteFramebuffer(framebuffer);\n        gl.deleteTexture(texture);\n        gl.getExtension('WEBGL_lose_context')?.loseContext();\n\n        return pixel[0] <= pixel[3] ? 'premultiplied-alpha' : 'premultiply-alpha-on-upload';\n    })();\n\n    return promise;\n}\n",null,"import { Cache } from '../../../../../assets/cache/Cache';\nimport { extensions, ExtensionType } from '../../../../../extensions/Extensions';\nimport { TextureSource } from '../sources/TextureSource';\nimport { Texture } from '../Texture';\n\nimport type { TypedArray } from '../../buffer/Buffer';\nimport type { BufferSourceOptions } from '../sources/BufferSource';\nimport type { ImageResource } from '../sources/ImageSource';\nimport type { TextureSourceOptions } from '../sources/TextureSource';\nimport type { TextureSourceLike } from '../Texture';\n\ninterface TextureSourceConstructor<T extends TextureSource = TextureSource>\n{\n    new (options: TextureSourceOptions): T;\n    test(options: ImageResource | TypedArray | ArrayBuffer): boolean;\n}\n\nconst sources: TextureSourceConstructor[] = [];\n\nextensions.handleByList(ExtensionType.TextureSource, sources);\n\nexport type TextureResourceOrOptions =\n  ImageResource\n  | TextureSourceOptions<ImageResource>\n  | BufferSourceOptions;\n\nexport function autoDetectSource(options: TextureResourceOrOptions = {}): TextureSource\n{\n    const hasResource = options && (options as TextureSourceOptions).resource;\n    const res = hasResource ? (options as TextureSourceOptions).resource : options;\n    const opts = hasResource ? options as TextureSourceOptions : { resource: options } as TextureSourceOptions;\n\n    for (let i = 0; i < sources.length; i++)\n    {\n        const Source = sources[i];\n\n        if (Source.test(res))\n        {\n            return new Source(opts);\n        }\n    }\n\n    throw new Error(`Could not find a source type for resource: ${opts.resource}`);\n}\n\nexport function resourceToTexture(\n    options: TextureResourceOrOptions = {},\n    skipCache = false\n): Texture\n{\n    const hasResource = options && (options as TextureSourceOptions).resource;\n    const resource = hasResource ? (options as TextureSourceOptions).resource : options;\n    const opts = hasResource ? options as TextureSourceOptions : { resource: options } as TextureSourceOptions;\n\n    if (!skipCache && Cache.has(resource))\n    {\n        return Cache.get(resource);\n    }\n\n    const texture = new Texture({ source: autoDetectSource(opts) });\n\n    texture.on('destroy', () =>\n    {\n        if (Cache.has(resource))\n        {\n            Cache.remove(resource);\n        }\n    });\n\n    if (!skipCache)\n    {\n        Cache.set(resource, texture);\n    }\n\n    return texture;\n}\n\n/**\n * Helper function that creates a returns Texture based on the source you provide.\n * The source should be loaded and ready to go. If not its best to grab the asset using Assets.\n * @param id - String or Source to create texture from\n * @param skipCache - Skip adding the texture to the cache\n * @returns The texture based on the Id provided\n */\nexport function textureFrom(id: TextureSourceLike, skipCache = false): Texture\n{\n    if (typeof id === 'string')\n    {\n        return Cache.get(id);\n    }\n    else if (id instanceof TextureSource)\n    {\n        return new Texture({ source: id });\n    }\n\n    // return a auto generated texture from resource\n    return resourceToTexture(id, skipCache);\n}\n\nTexture.from = textureFrom;\n",null,"import { warn } from '../../utils/logging/warn';\nimport { convertToList } from '../utils/convertToList';\n\nimport type { CacheParser } from './CacheParser';\n\n/**\n * A single Cache for all assets.\n *\n * When assets are added to the cache via set they normally are added to the cache as key-value pairs.\n *\n * With this cache, you can add parsers that will take the object and convert it to a list of assets that can be cached.\n * for example a cacheSpritesheet parser will add all of the textures found within its sprite sheet directly to the cache.\n *\n * This gives devs the flexibility to cache any type of object however we want.\n *\n * It is not intended that this class is created by developers - it is part of the Asset package.\n * This is the first major system of PixiJS' main Assets class.\n * @example\n * import { Cache } from 'pixi.js';\n *\n * Cache.set('bunny', bunnyTexture);\n * @class Cache\n * @memberof assets\n */\nclass CacheClass\n{\n    private readonly _parsers: CacheParser[] = [];\n\n    private readonly _cache: Map<any, any> = new Map();\n    private readonly _cacheMap: Map<string, {\n        keys: string[],\n        cacheKeys: string[],\n    }> = new Map();\n\n    /** Clear all entries. */\n    public reset(): void\n    {\n        this._cacheMap.clear();\n        this._cache.clear();\n    }\n\n    /**\n     * Check if the key exists\n     * @param key - The key to check\n     */\n    public has(key: any): boolean\n    {\n        return this._cache.has(key);\n    }\n\n    /**\n     * Fetch entry by key\n     * @param key - The key of the entry to get\n     */\n    public get<T = any>(key: any): T\n    {\n        const result = this._cache.get(key);\n\n        if (!result)\n        {\n            // #if _DEBUG\n            warn(`[Assets] Asset id ${key} was not found in the Cache`);\n            // #endif\n        }\n\n        return result as T;\n    }\n\n    /**\n     * Set a value by key or keys name\n     * @param key - The key or keys to set\n     * @param value - The value to store in the cache or from which cacheable assets will be derived.\n     */\n    public set(key: any | any[], value: unknown): void\n    {\n        const keys = convertToList<string>(key);\n\n        let cacheableAssets: Record<string, any>;\n\n        for (let i = 0; i < this.parsers.length; i++)\n        {\n            const parser = this.parsers[i];\n\n            if (parser.test(value))\n            {\n                cacheableAssets = parser.getCacheableAssets(keys, value);\n\n                break;\n            }\n        }\n\n        // convert cacheable assets to a map of key-value pairs\n        const cacheableMap = new Map(Object.entries(cacheableAssets || {}));\n\n        if (!cacheableAssets)\n        {\n            keys.forEach((key) =>\n            {\n                cacheableMap.set(key, value);\n            });\n        }\n\n        const cacheKeys = [...cacheableMap.keys()];\n\n        const cachedAssets = {\n            cacheKeys,\n            keys\n        };\n\n        // this is so we can remove them later..\n        keys.forEach((key) =>\n        {\n            this._cacheMap.set(key, cachedAssets as any);\n        });\n\n        cacheKeys.forEach((key) =>\n        {\n            const val = cacheableAssets ? cacheableAssets[key] : value;\n\n            if (this._cache.has(key) && this._cache.get(key) !== val)\n            {\n                // #if _DEBUG\n                warn('[Cache] already has key:', key);\n                // #endif\n            }\n\n            this._cache.set(key, cacheableMap.get(key));\n        });\n    }\n\n    /**\n     * Remove entry by key\n     *\n     * This function will also remove any associated alias from the cache also.\n     * @param key - The key of the entry to remove\n     */\n    public remove(key: any): void\n    {\n        if (!this._cacheMap.has(key))\n        {\n            // #if _DEBUG\n            warn(`[Assets] Asset id ${key} was not found in the Cache`);\n            // #endif\n\n            return;\n        }\n\n        const cacheMap = this._cacheMap.get(key);\n\n        const cacheKeys = cacheMap.cacheKeys;\n\n        cacheKeys.forEach((key) =>\n        {\n            this._cache.delete(key);\n        });\n\n        cacheMap.keys.forEach((key: string) =>\n        {\n            this._cacheMap.delete(key);\n        });\n    }\n\n    /** All loader parsers registered */\n    public get parsers(): CacheParser[]\n    {\n        return this._parsers;\n    }\n}\n\nexport const Cache = new CacheClass();\n",null,"import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n",null,"import { ExtensionType } from '../../../extensions/Extensions';\nimport { BatchGeometry } from '../../../rendering/batcher/gpu/BatchGeometry';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup';\nimport { Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { buildContextBatches } from './utils/buildContextBatches';\n\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { BatchableGraphics } from './BatchableGraphics';\nimport type { GraphicsContext } from './GraphicsContext';\n\ninterface GeometryData\n{\n    vertices: number[];\n    uvs: number[];\n    indices: number[];\n}\n\n/**\n * A class that holds batchable graphics data for a GraphicsContext.\n * @memberof rendering\n * @ignore\n */\nexport class GpuGraphicsContext\n{\n    public isBatchable: boolean;\n    public batches: BatchableGraphics[] = [];\n    public geometryData: GeometryData = {\n        vertices: [],\n        uvs: [],\n        indices: [],\n    };\n    public graphicsData: GraphicsContextRenderData;\n}\n\n/**\n * A class that holds the render data for a GraphicsContext.\n * @memberof rendering\n * @ignore\n */\nexport class GraphicsContextRenderData\n{\n    public geometry = new BatchGeometry();\n    public instructions = new InstructionSet();\n\n    public init()\n    {\n        this.instructions.reset();\n    }\n}\n\n/**\n * Options for the GraphicsContextSystem.\n * @memberof rendering\n */\nexport interface GraphicsContextSystemOptions\n{\n    /** A value from 0 to 1 that controls the smoothness of bezier curves (the higher the smoother) */\n    bezierSmoothness?: number;\n}\n\n/**\n * A system that manages the rendering of GraphicsContexts.\n * @memberof rendering\n */\nexport class GraphicsContextSystem implements System<GraphicsContextSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'graphicsContext'\n    } as const;\n\n    /** The default options for the GraphicsContextSystem. */\n    public static readonly defaultOptions: GraphicsContextSystemOptions = {\n        /**\n         * A value from 0 to 1 that controls the smoothness of bezier curves (the higher the smoother)\n         * @default 0.5\n         */\n        bezierSmoothness: 0.5,\n    };\n\n    // the root context batches, used to either make a batch or geometry\n    // all graphics use this as a base\n    private readonly _activeBatchers: Batcher[] = [];\n    private _gpuContextHash: Record<number, GpuGraphicsContext> = {};\n    // used for non-batchable graphics\n    private _graphicsDataContextHash: Record<number, GraphicsContextRenderData> = Object.create(null);\n    private readonly _needsContextNeedsRebuild: GraphicsContext[] = [];\n\n    /**\n     * Runner init called, update the default options\n     * @ignore\n     */\n    public init(options?: GraphicsContextSystemOptions)\n    {\n        GraphicsContextSystem.defaultOptions.bezierSmoothness = options?.bezierSmoothness\n            ?? GraphicsContextSystem.defaultOptions.bezierSmoothness;\n    }\n\n    protected prerender()\n    {\n        this._returnActiveBatchers();\n    }\n\n    public getContextRenderData(context: GraphicsContext): GraphicsContextRenderData\n    {\n        return this._graphicsDataContextHash[context.uid] || this._initContextRenderData(context);\n    }\n\n    // Context management functions\n    public updateGpuContext(context: GraphicsContext)\n    {\n        let gpuContext: GpuGraphicsContext = this._gpuContextHash[context.uid]\n\n            || this._initContext(context);\n\n        if (context.dirty)\n        {\n            if (gpuContext)\n            {\n                this._cleanGraphicsContextData(context);\n            }\n            else\n            {\n                gpuContext = this._initContext(context);\n            }\n\n            buildContextBatches(context, gpuContext);\n\n            const batchMode = context.batchMode;\n\n            if (context.customShader || batchMode === 'no-batch')\n            {\n                gpuContext.isBatchable = false;\n            }\n            else if (batchMode === 'auto')\n            {\n                gpuContext.isBatchable = (gpuContext.geometryData.vertices.length < 400);\n            }\n\n            context.dirty = false;\n        }\n\n        return gpuContext;\n    }\n\n    public getGpuContext(context: GraphicsContext): GpuGraphicsContext\n    {\n        return this._gpuContextHash[context.uid] || this._initContext(context);\n    }\n\n    private _returnActiveBatchers()\n    {\n        for (let i = 0; i < this._activeBatchers.length; i++)\n        {\n            BigPool.return(this._activeBatchers[i] as PoolItem);\n        }\n\n        this._activeBatchers.length = 0;\n    }\n\n    private _initContextRenderData(context: GraphicsContext): GraphicsContextRenderData\n    {\n        const graphicsData: GraphicsContextRenderData = BigPool.get(GraphicsContextRenderData);// ();\n\n        const { batches, geometryData } = this._gpuContextHash[context.uid];\n\n        const vertexSize = geometryData.vertices.length;\n        const indexSize = geometryData.indices.length;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            batches[i].applyTransform = false;\n        }\n\n        const batcher = BigPool.get(Batcher);\n\n        this._activeBatchers.push(batcher);\n\n        batcher.ensureAttributeBuffer(vertexSize);\n        batcher.ensureIndexBuffer(indexSize);\n\n        batcher.begin();\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batcher.add(batch);\n        }\n\n        batcher.finish(graphicsData.instructions);\n\n        const geometry = graphicsData.geometry;\n\n        // not to self - this works as we are assigning the batchers array buffer\n        // once its up loaded - this buffer is then put back in the pool to be reused.\n        // this mean we don't have to creating new Batchers for each graphics items\n        geometry.indexBuffer.setDataWithSize(batcher.indexBuffer, batcher.indexSize, true);\n        geometry.buffers[0].setDataWithSize(batcher.attributeBuffer.float32View, batcher.attributeSize, true);\n\n        const drawBatches = batcher.batches;\n\n        for (let i = 0; i < drawBatches.length; i++)\n        {\n            const batch = drawBatches[i];\n\n            batch.bindGroup = getTextureBatchBindGroup(batch.textures.textures, batch.textures.count);\n        }\n\n        this._graphicsDataContextHash[context.uid] = graphicsData;\n\n        return graphicsData;\n    }\n\n    private _initContext(context: GraphicsContext): GpuGraphicsContext\n    {\n        const gpuContext = new GpuGraphicsContext();\n\n        this._gpuContextHash[context.uid] = gpuContext;\n\n        context.on('update', this.onGraphicsContextUpdate, this);\n        context.on('destroy', this.onGraphicsContextDestroy, this);\n\n        return this._gpuContextHash[context.uid];\n    }\n\n    protected onGraphicsContextUpdate(context: GraphicsContext)\n    {\n        this._needsContextNeedsRebuild.push(context);\n    }\n\n    protected onGraphicsContextDestroy(context: GraphicsContext)\n    {\n        this._cleanGraphicsContextData(context);\n\n        context.off('update', this.onGraphicsContextUpdate, this);\n        context.off('destroy', this.onGraphicsContextDestroy, this);\n\n        this._gpuContextHash[context.uid] = null;\n    }\n\n    private _cleanGraphicsContextData(context: GraphicsContext)\n    {\n        const gpuContext: GpuGraphicsContext = this._gpuContextHash[context.uid];\n\n        if (!gpuContext.isBatchable)\n        {\n            if (this._graphicsDataContextHash[context.uid])\n            {\n                BigPool.return(this.getContextRenderData(context) as PoolItem);\n\n                // we will rebuild this...\n                this._graphicsDataContextHash[context.uid] = null;\n            }\n        }\n\n        if (gpuContext.batches)\n        {\n            gpuContext.batches.forEach((batch) =>\n            {\n                BigPool.return(batch as PoolItem);\n            });\n        }\n    }\n\n    public destroy()\n    {\n        // Clean up all graphics contexts\n        for (const context of this._needsContextNeedsRebuild)\n        {\n            // only clean if it exists\n            if (this._gpuContextHash[context.uid])\n            {\n                this.onGraphicsContextDestroy(context);\n            }\n        }\n\n        this._needsContextNeedsRebuild.length = 0;\n    }\n}\n",null,"import { Buffer } from '../../renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../renderers/shared/buffer/const';\nimport { Geometry } from '../../renderers/shared/geometry/Geometry';\n\nconst placeHolderBufferData = new Float32Array(1);\nconst placeHolderIndexData = new Uint32Array(1);\n\nexport class BatchGeometry extends Geometry\n{\n    constructor()\n    {\n        const vertexSize = 6;\n\n        const attributeBuffer = new Buffer({\n            data: placeHolderBufferData,\n            label: 'attribute-batch-buffer',\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n            shrinkToFit: false,\n        });\n\n        const indexBuffer = new Buffer({\n            data: placeHolderIndexData,\n            label: 'index-batch-buffer',\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST, // | BufferUsage.STATIC,\n            shrinkToFit: false,\n        });\n\n        const stride = vertexSize * 4;\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: attributeBuffer,\n                    format: 'float32x2',\n                    stride,\n                    offset: 0,\n                    location: 1,\n                },\n                aUV: {\n                    buffer: attributeBuffer,\n                    format: 'float32x2',\n                    stride,\n                    offset: 2 * 4,\n                    location: 3,\n                },\n                aColor: {\n                    buffer: attributeBuffer,\n                    format: 'unorm8x4',\n                    stride,\n                    offset: 4 * 4,\n                    location: 0,\n                },\n                aTextureIdAndRound: {\n                    buffer: attributeBuffer,\n                    format: 'uint16x2',\n                    stride,\n                    offset: 5 * 4,\n                    location: 2,\n                },\n            },\n            indexBuffer\n        });\n    }\n}\n\n",null,"import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid';\nimport { BufferUsage } from './const';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\n\n/** All the various typed arrays that exist in js */\n// eslint-disable-next-line max-len\nexport type TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array;\n\n/** Options for creating a buffer */\nexport interface BufferOptions\n{\n    /**\n     * the data to initialize the buffer with, this can be a typed array,\n     * or a regular number array. If it is a number array, it will be converted to a Float32Array\n     */\n    data?: TypedArray | number[];\n    /** the size of the buffer in bytes, if not supplied, it will be inferred from the data */\n    size?: number;\n    /** the usage of the buffer, see {@link rendering.BufferUsage} */\n    usage: number;\n    /** a label for the buffer, this is useful for debugging */\n    label?: string;\n    /**\n     * should the GPU buffer be shrunk when the data becomes smaller?\n     * changing this will cause the buffer to be destroyed and a new one created on the GPU\n     * this can be expensive, especially if the buffer is already big enough!\n     * setting this to false will prevent the buffer from being shrunk. This will yield better performance\n     * if you are constantly setting data that is changing size often.\n     * @default true\n     */\n    shrinkToFit?: boolean;\n}\n\nexport interface BufferDescriptor\n{\n    label?: string;\n    size: GPUSize64;\n    usage: BufferUsage;\n    mappedAtCreation?: boolean;\n}\n\n/**\n * A wrapper for a WebGPU/WebGL Buffer.\n * In PixiJS, the Buffer class is used to manage the data that is sent to the GPU rendering pipeline.\n * It abstracts away the underlying GPU buffer and provides an interface for uploading typed arrays or other data to the GPU,\n * They are used in the following places:\n * <br><br>\n * .1. {@link Geometry} as attribute data or index data for geometry\n * <br>\n * .2. {@link UniformGroup} as an underlying buffer for uniform data\n * <br>\n * .3. {@link BufferResource} as an underlying part of a buffer used directly by the GPU program\n * <br>\n *\n * It is important to note that you must provide a usage type when creating a buffer. This is because\n * the underlying GPU buffer needs to know how it will be used. For example, if you are creating a buffer\n * to hold vertex data, you would use `BufferUsage.VERTEX`. This will tell the GPU that this buffer will be\n * used as a vertex buffer. This is important because it will affect how you can use the buffer.\n *\n * Buffers are updated by calling the {@link Buffer.update} method. This immediately updates the buffer on the GPU.\n * Be mindful of calling this more often than you need to. It is recommended to update buffers only when needed.\n *\n * In WebGPU, a GPU buffer cannot resized. This limitation is abstracted away, but know that resizing a buffer means\n * creating a brand new one and destroying the old, so it is best to limit this if possible.\n * @example\n *\n * const buffer = new Buffer({\n *     data: new Float32Array([1, 2, 3, 4]),\n *     usage: BufferUsage.VERTEX,\n * });\n * @memberof rendering\n */\nexport class Buffer extends EventEmitter<{\n    change: BindResource,\n    update: Buffer,\n    destroy: Buffer,\n}> implements BindResource\n{\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n\n    /**\n     * emits when the underlying buffer data has been updated. letting the renderer know\n     * that it needs to update the buffer on the GPU\n     * @event update\n     */\n\n    /**\n     * emits when the buffer is destroyed. letting the renderer know that it needs to destroy the buffer on the GPU\n     * @event destroy\n     */\n\n    /**\n     * a unique id for this uniform group used through the renderer\n     * @internal\n     * @ignore\n     */\n    public readonly uid = uid('buffer');\n\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    public readonly _resourceType = 'buffer';\n\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    public _resourceId = uid('resource');\n\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    public _touched = 0;\n\n    /**\n     * a description of the buffer and how it should be set up on the GPU\n     * @internal\n     * @ignore\n     */\n    public readonly descriptor: BufferDescriptor;\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public _updateID = 1;\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public _updateSize: number;\n\n    private _data: TypedArray;\n\n    /**\n     * should the GPU buffer be shrunk when the data becomes smaller?\n     * changing this will cause the buffer to be destroyed and a new one created on the GPU\n     * this can be expensive, especially if the buffer is already big enough!\n     * setting this to false will prevent the buffer from being shrunk. This will yield better performance\n     * if you are constantly setting data that is changing size often.\n     * @default true\n     */\n    public shrinkToFit = true;\n\n    /**\n     * Creates a new Buffer with the given options\n     * @param options - the options for the buffer\n     */\n    constructor(options: BufferOptions)\n    {\n        let { data, size } = options;\n        const { usage, label, shrinkToFit } = options;\n\n        super();\n\n        if (data instanceof Array)\n        {\n            data = new Float32Array(data as number[]);\n        }\n\n        this._data = data as TypedArray;\n\n        size = size ?? (data as TypedArray)?.byteLength;\n\n        const mappedAtCreation = !!data;\n\n        this.descriptor = {\n            size,\n            usage,\n            mappedAtCreation,\n            label,\n        };\n\n        this.shrinkToFit = shrinkToFit ?? true;\n    }\n\n    /** the data in the buffer */\n    get data()\n    {\n        return this._data;\n    }\n\n    set data(value: TypedArray)\n    {\n        this.setDataWithSize(value, value.length, true);\n    }\n\n    /** whether the buffer is static or not */\n    get static()\n    {\n        return !!(this.descriptor.usage & BufferUsage.STATIC);\n    }\n\n    set static(value: boolean)\n    {\n        if (value)\n        {\n            this.descriptor.usage |= BufferUsage.STATIC;\n        }\n        else\n        {\n            this.descriptor.usage &= ~BufferUsage.STATIC;\n        }\n    }\n\n    /**\n     * Sets the data in the buffer to the given value. This will immediately update the buffer on the GPU.\n     * If you only want to update a subset of the buffer, you can pass in the size of the data.\n     * @param value - the data to set\n     * @param size - the size of the data in bytes\n     * @param syncGPU - should the buffer be updated on the GPU immediately?\n     */\n    public setDataWithSize(value: TypedArray, size: number, syncGPU: boolean)\n    {\n        // Increment update ID\n        this._updateID++;\n\n        this._updateSize = (size * value.BYTES_PER_ELEMENT);\n\n        // If the data hasn't changed, early return after emitting 'update'\n        if (this._data === value)\n        {\n            if (syncGPU) this.emit('update', this);\n\n            return;\n        }\n\n        // Cache old data and update to new value\n        const oldData = this._data;\n\n        this._data = value;\n\n        // Event handling\n        if (oldData.length !== value.length)\n        {\n            if (!this.shrinkToFit && value.byteLength < oldData.byteLength)\n            {\n                if (syncGPU) this.emit('update', this);\n            }\n            else\n            {\n                this.descriptor.size = value.byteLength;\n                this._resourceId = uid('resource');\n                this.emit('change', this);\n            }\n\n            return;\n        }\n\n        if (syncGPU) this.emit('update', this);\n    }\n\n    /**\n     * updates the buffer on the GPU to reflect the data in the buffer.\n     * By default it will update the entire buffer. If you only want to update a subset of the buffer,\n     * you can pass in the size of the buffer to update.\n     * @param sizeInBytes - the new size of the buffer in bytes\n     */\n    public update(sizeInBytes?: number): void\n    {\n        this._updateSize = sizeInBytes ?? this._updateSize;\n\n        this._updateID++;\n\n        this.emit('update', this);\n    }\n\n    /** Destroys the buffer */\n    public destroy()\n    {\n        this.emit('destroy', this);\n\n        this._data = null;\n        (this.descriptor as null) = null;\n\n        this.removeAllListeners();\n    }\n}\n\n",null,"/**\n * Buffer usage flags. they can be combined using the bitwise OR operator\n * eg : BufferUsage.VERTEX | BufferUsage.INDEX\n * @memberof rendering\n */\nexport enum BufferUsage\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * The buffer can be mapped for reading. (Example: calling mapAsync() with GPUMapMode.READ)\n     * May only be combined with COPY_DST.\n     */\n    MAP_READ = 0x0001,\n    /**\n     * The buffer can be mapped for writing. (Example: calling mapAsync() with GPUMapMode.WRITE)\n     * May only be combined with COPY_SRC.\n     */\n    MAP_WRITE = 0x0002,\n    /**\n     * The buffer can be used as the source of a copy operation.\n     * (Examples: as the source argument of a copyBufferToBuffer() or copyBufferToTexture() call.)\n     */\n    COPY_SRC = 0x0004,\n    /**\n     * The buffer can be used as the destination of a copy or write operation.\n     * (Examples: as the destination argument of a copyBufferToBuffer() or\n     * copyTextureToBuffer() call, or as the target of a writeBuffer() call.)\n     */\n    COPY_DST = 0x0008,\n    /** The buffer can be used as an index buffer. (Example: passed to setIndexBuffer().) */\n    INDEX = 0x0010,\n    /** The buffer can be used as a vertex buffer. (Example: passed to setVertexBuffer().) */\n    VERTEX = 0x0020,\n    /**\n     * The buffer can be used as a uniform buffer.\n     * (Example: as a bind group entry for a GPUBufferBindingLayout with a buffer.type of \"uniform\".)\n     */\n    UNIFORM = 0x0040,\n    /**\n     * The buffer can be used as a storage buffer.\n     * (Example: as a bind group entry for a GPUBufferBindingLayout with a buffer.type of \"storage\" or \"read-only-storage\".)\n     */\n    STORAGE = 0x0080,\n    /**\n     * The buffer can be used as to store indirect command arguments.\n     * (Examples: as the indirectBuffer argument of a drawIndirect() or dispatchWorkgroupsIndirect() call.)\n     */\n    INDIRECT = 0x0100,\n    /**\n     * The buffer can be used to capture query results.\n     * (Example: as the destination argument of a resolveQuerySet() call.)\n     */\n    QUERY_RESOLVE = 0x0200,\n    /** the buffer will not be updated frequently */\n    STATIC = 0x0400\n}\n",null,"import EventEmitter from 'eventemitter3';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds';\nimport { uid } from '../../../../utils/data/uid';\nimport { Buffer } from '../buffer/Buffer';\nimport { ensureIsBuffer } from './utils/ensureIsBuffer';\nimport { getGeometryBounds } from './utils/getGeometryBounds';\n\nimport type { TypedArray } from '../buffer/Buffer';\nimport type { Topology, VertexFormat } from './const';\n\nexport type IndexBufferArray = Uint16Array | Uint32Array;\n\n/**\n * The attribute data for a geometries attributes\n * @memberof rendering\n */\nexport interface Attribute\n{\n    /** the buffer that this attributes data belongs to */\n    buffer: Buffer;\n    /** the format of the attribute */\n    format?: VertexFormat;\n    /** set where the shader location is for this attribute */\n    location?: number;\n    /** the stride of the data in the buffer*/\n    stride?: number;\n    /** the offset of the attribute from the buffer, defaults to 0 */\n    offset?: number;\n    /** is this an instanced buffer? (defaults to false) */\n    instance?: boolean;\n    /**  The number of elements to be rendered. If not specified, all vertices after the starting vertex will be drawn. */\n    size?: number;\n    /** the type of attribute  */\n    type?: number;\n    /**\n     * The starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     */\n    start?: number;\n}\n\n/**\n * The attribute options used by the constructor for adding geometries attributes\n * extends {@link rendering.Attribute} but allows for the buffer to be a typed or number array\n * @memberof rendering\n */\ntype AttributesOption = Omit<Attribute, 'buffer'> & { buffer: Buffer | TypedArray | number[]}\n| Buffer | TypedArray | number[];\n\n/**\n * the interface that describes the structure of the geometry\n * @memberof rendering\n */\nexport interface GeometryDescriptor\n{\n    /** an optional label to easily identify the geometry */\n    label?: string;\n    /** the attributes that make up the geometry */\n    attributes: Record<string, AttributesOption>;\n    /** optional index buffer for this geometry */\n    indexBuffer?: Buffer | TypedArray | number[];\n    /** the topology of the geometry, defaults to 'triangle-list' */\n    topology?: Topology;\n\n    instanceCount?: number;\n}\nfunction ensureIsAttribute(attribute: AttributesOption): Attribute\n{\n    if (attribute instanceof Buffer || Array.isArray(attribute) || (attribute as TypedArray).BYTES_PER_ELEMENT)\n    {\n        attribute = {\n            buffer: attribute as Buffer | TypedArray | number[],\n        };\n    }\n\n    (attribute as Attribute).buffer = ensureIsBuffer(attribute.buffer as Buffer | TypedArray | number[], false);\n\n    return attribute as Attribute;\n}\n\n/**\n * A Geometry is a low-level object that represents the structure of 2D shapes in terms of vertices and attributes.\n * It's a crucial component for rendering as it describes the shape and format of the data that will go through the shaders.\n * Essentially, a Geometry object holds the data you'd send to a GPU buffer.\n *\n * A geometry is basically made of two components:\n * <br>\n * <b>Attributes</b>: These are essentially arrays that define properties of the vertices like position, color,\n * texture coordinates, etc. They map directly to attributes in your vertex shaders.\n * <br>\n * <b>Indices</b>: An optional array that describes how the vertices are connected.\n * If not provided, vertices will be interpreted in the sequence they're given.\n * @example\n *\n * const geometry = new Geometry({\n *   attributes: {\n *     aPosition: [ // add some positions\n *       0, 0,\n *       0, 100,\n *       100, 100,\n *       100,   0,\n *     ],\n *     aUv: [ // add some uvs\n *       0, 0,\n *       0, 1,\n *       1, 1,\n *       1, 0,\n *     ]\n *   }\n * });\n * @memberof rendering\n * @class\n */\nexport class Geometry extends EventEmitter<{\n    update: Geometry,\n    destroy: Geometry,\n}>\n{\n    /** The topology of the geometry. */\n    public topology: Topology;\n    /** The unique id of the geometry. */\n    public readonly uid: number = uid('geometry');\n    /** A record of the attributes of the geometry. */\n    public readonly attributes: Record<string, Attribute>;\n    /** The buffers that the attributes use */\n    public readonly buffers: Buffer[];\n    /** The index buffer of the geometry */\n    public readonly indexBuffer: Buffer;\n\n    /**\n     * the layout key will be generated by WebGPU all geometries that have the same structure\n     * will have the same layout key. This is used to cache the pipeline layout\n     * @internal\n     * @ignore\n     */\n    public _layoutKey = 0;\n\n    /** the instance count of the geometry to draw */\n    public instanceCount = 1;\n\n    private readonly _bounds: Bounds = new Bounds();\n    private _boundsDirty = true;\n\n    /**\n     * Create a new instance of a geometry\n     * @param options - The options for the geometry.\n     */\n    constructor(options: GeometryDescriptor)\n    {\n        const { attributes, indexBuffer, topology } = options;\n\n        super();\n\n        this.attributes = attributes as Record<string, Attribute>;\n        this.buffers = [];\n\n        this.instanceCount = options.instanceCount || 1;\n\n        for (const i in attributes)\n        {\n            const attribute = attributes[i] = ensureIsAttribute(attributes[i]);\n\n            const bufferIndex = this.buffers.indexOf(attribute.buffer);\n\n            if (bufferIndex === -1)\n            {\n                this.buffers.push(attribute.buffer);\n\n                // two events here - one for a resize (new buffer change)\n                // and one for an update (existing buffer change)\n                attribute.buffer.on('update', this.onBufferUpdate, this);\n                attribute.buffer.on('change', this.onBufferUpdate, this);\n            }\n        }\n\n        if (indexBuffer)\n        {\n            this.indexBuffer = ensureIsBuffer(indexBuffer, true);\n            this.buffers.push(this.indexBuffer);\n        }\n\n        this.topology = topology || 'triangle-list';\n    }\n\n    protected onBufferUpdate(): void\n    {\n        this._boundsDirty = true;\n        this.emit('update', this);\n    }\n\n    /**\n     * Returns the requested attribute.\n     * @param id - The name of the attribute required\n     * @returns - The attribute requested.\n     */\n    public getAttribute(id: string): Attribute\n    {\n        return this.attributes[id];\n    }\n\n    /**\n     * Returns the index buffer\n     * @returns - The index buffer.\n     */\n    public getIndex(): Buffer\n    {\n        return this.indexBuffer;\n    }\n\n    /**\n     * Returns the requested buffer.\n     * @param id - The name of the buffer required.\n     * @returns - The buffer requested.\n     */\n    public getBuffer(id: string): Buffer\n    {\n        return this.getAttribute(id).buffer;\n    }\n\n    /**\n     * Used to figure out how many vertices there are in this geometry\n     * @returns the number of vertices in the geometry\n     */\n    public getSize(): number\n    {\n        for (const i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n            const buffer = attribute.buffer;\n\n            // TODO use SIZE again like v7..\n            return (buffer.data as any).length / ((attribute.stride / 4) || attribute.size);\n        }\n\n        return 0;\n    }\n\n    /** Returns the bounds of the geometry. */\n    get bounds(): Bounds\n    {\n        if (!this._boundsDirty) return this._bounds;\n\n        this._boundsDirty = false;\n\n        return getGeometryBounds(this, 'aPosition', this._bounds);\n    }\n\n    /**\n     * destroys the geometry.\n     * @param destroyBuffers - destroy the buffers associated with this geometry\n     */\n    public destroy(destroyBuffers = false): void\n    {\n        this.emit('destroy', this);\n\n        this.removeAllListeners();\n\n        if (destroyBuffers)\n        {\n            this.buffers.forEach((buffer) => buffer.destroy());\n        }\n\n        (this.attributes as null) = null;\n        (this.buffers as null) = null;\n        (this.indexBuffer as null) = null;\n        (this._bounds as null) = null;\n    }\n}\n\n",null,"import { Buffer } from '../../buffer/Buffer';\nimport { BufferUsage } from '../../buffer/const';\n\nimport type { TypedArray } from '../../buffer/Buffer';\n\n/**\n * Converts something into a buffer. If it is already a buffer it will pass it through\n * if it is a number array it will convert it to a float32 array before being passed into a buffer\n * the buffer will be created with the correct usage flags for geometry attributes\n * @param buffer - number array\n * @param index - is this an index buffer?\n * @returns a buffer\n * @memberof rendering\n */\nexport function ensureIsBuffer(buffer: Buffer | TypedArray | number[], index: boolean): Buffer\n{\n    if (!(buffer instanceof Buffer))\n    {\n        let usage: number = index ? BufferUsage.INDEX : BufferUsage.VERTEX;\n\n        // its an array!\n        if (buffer instanceof Array)\n        {\n            if (index)\n            {\n                buffer = new Uint32Array(buffer);\n                usage = BufferUsage.INDEX | BufferUsage.COPY_DST;\n            }\n\n            else\n            {\n                buffer = new Float32Array(buffer);\n                usage = BufferUsage.VERTEX | BufferUsage.COPY_DST;\n            }\n        }\n\n        buffer = new Buffer({\n            data: buffer,\n            label: index ? 'index-mesh-buffer' : 'vertex-mesh-buffer',\n            usage\n        });\n    }\n\n    return buffer;\n}\n",null,"import type { Bounds } from '../../../../../scene/container/bounds/Bounds';\nimport type { Geometry } from '../Geometry';\n\n/**\n * Gets the 2D bounds of a geometry, based on a specific attribute.\n * @param geometry - Geometry to to measure\n * @param attributeId - AttributeId that contains the x,y data\n * @param bounds - Bounds to store the result in\n * @returns the bounds\n */\nexport function getGeometryBounds(geometry: Geometry, attributeId: string, bounds: Bounds): Bounds\n{\n    const attribute = geometry.getAttribute(attributeId);\n\n    if (!attribute)\n    {\n        bounds.minX = 0;\n        bounds.minY = 0;\n        bounds.maxX = 0;\n        bounds.maxY = 0;\n\n        return bounds;\n    }\n\n    const data = attribute.buffer.data as Float32Array;\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    const byteSize = data.BYTES_PER_ELEMENT;\n\n    // stride and offset MAY have not been calculated yet.. so go with assumed defaults\n    const offset = (attribute.offset || 0) / byteSize;\n    const stride = (attribute.stride || (2 * 4)) / byteSize;\n\n    for (let i = offset; i < data.length; i += stride)\n    {\n        const x = data[i];\n        const y = data[i + 1];\n\n        if (x > maxX)maxX = x;\n        if (y > maxY)maxY = y;\n        if (x < minX)minX = x;\n        if (y < minY)minY = y;\n    }\n\n    bounds.minX = minX;\n    bounds.minY = minY;\n    bounds.maxX = maxX;\n    bounds.maxY = maxY;\n\n    return bounds;\n}\n",null,"import { BindGroup } from '../../renderers/gpu/shader/BindGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { MAX_TEXTURES } from '../shared/const';\n\nimport type { TextureSource } from '../../renderers/shared/texture/sources/TextureSource';\n\nconst cachedGroups: Record<number, BindGroup> = {};\n\nexport function getTextureBatchBindGroup(textures: TextureSource[], size: number)\n{\n    let uid = 0;\n\n    for (let i = 0; i < size; i++)\n    {\n        uid = ((uid * 31) + textures[i].uid) >>> 0;\n    }\n\n    return cachedGroups[uid] || generateTextureBatchBindGroup(textures, uid);\n}\n\nfunction generateTextureBatchBindGroup(textures: TextureSource[], key: number): BindGroup\n{\n    const bindGroupResources: Record<string, any> = {};\n\n    let bindIndex = 0;\n\n    for (let i = 0; i < MAX_TEXTURES; i++)\n    {\n        const texture = i < textures.length ? textures[i] : Texture.EMPTY.source;\n\n        bindGroupResources[bindIndex++] = texture.source;\n        bindGroupResources[bindIndex++] = texture.style;\n    }\n\n    // pad out with empty textures\n    const bindGroup = new BindGroup(bindGroupResources);\n\n    cachedGroups[key] = bindGroup;\n\n    return bindGroup;\n}\n\n",null,"import type { BindResource } from './BindResource';\n\n/**\n * A bind group is a collection of resources that are bound together for use by a shader.\n * They are essentially a wrapper for the WebGPU BindGroup class. But with the added bonus\n * that WebGL can also work with them.\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpubindgroupdescriptor\n * @example\n * // Create a bind group with a single texture and sampler\n * const bindGroup = new BindGroup({\n *    uTexture: texture.source,\n *    uTexture: texture.style,\n * });\n *\n * Bind groups resources must implement the {@link BindResource} interface.\n * The following resources are supported:\n * - {@link TextureSource}\n * - {@link TextureStyle}\n * - {@link Buffer}\n * - {@link BufferResource}\n * - {@link UniformGroup}\n *\n * The keys in the bind group must correspond to the names of the resources in the GPU program.\n *\n * This bind group class will also watch for changes in its resources ensuring that the changes\n * are reflected in the WebGPU BindGroup.\n * @memberof rendering\n */\nexport class BindGroup\n{\n    /** The resources that are bound together for use by a shader. */\n    public resources: Record<string, BindResource> = Object.create(null);\n    /**\n     * a key used internally to match it up to a WebGPU Bindgroup\n     * @internal\n     * @ignore\n     */\n    public _key: string;\n    private _dirty = true;\n\n    /**\n     * Create a new instance eof the Bind Group.\n     * @param resources - The resources that are bound together for use by a shader.\n     */\n    constructor(resources?: Record<string, BindResource>)\n    {\n        let index = 0;\n\n        for (const i in resources)\n        {\n            const resource: BindResource = resources[i];\n\n            this.setResource(resource, index++);\n        }\n\n        this._updateKey();\n    }\n\n    /**\n     * Updates the key if its flagged as dirty. This is used internally to\n     * match this bind group to a WebGPU BindGroup.\n     * @internal\n     * @ignore\n     */\n    public _updateKey(): void\n    {\n        if (!this._dirty) return;\n\n        this._dirty = false;\n\n        const keyParts = [];\n        let index = 0;\n\n        // TODO - lets use big ints instead of strings...\n        for (const i in this.resources)\n        {\n            // TODO make this consistent...\n            keyParts[index++] = this.resources[i]._resourceId;\n        }\n\n        this._key = keyParts.join('|');\n    }\n\n    /**\n     * Set a resource at a given index. this function will\n     * ensure that listeners will be removed from the current resource\n     * and added to the new resource.\n     * @param resource - The resource to set.\n     * @param index - The index to set the resource at.\n     */\n    public setResource(resource: BindResource, index: number): void\n    {\n        const currentResource = this.resources[index];\n\n        if (resource === currentResource) return;\n\n        if (currentResource)\n        {\n            resource.off?.('change', this.onResourceChange, this);\n        }\n\n        resource.on?.('change', this.onResourceChange, this);\n\n        this.resources[index] = resource;\n        this._dirty = true;\n    }\n\n    /**\n     * Returns the resource at the current specified index.\n     * @param index - The index of the resource to get.\n     * @returns - The resource at the specified index.\n     */\n    public getResource(index: number): BindResource\n    {\n        return this.resources[index];\n    }\n\n    /**\n     * Used internally to 'touch' each resource, to ensure that the GC\n     * knows that all resources in this bind group are still being used.\n     * @param tick - The current tick.\n     * @internal\n     * @ignore\n     */\n    public _touch(tick: number)\n    {\n        const resources = this.resources;\n\n        for (const i in resources)\n        {\n            resources[i]._touched = tick;\n        }\n    }\n\n    /** Destroys this bind group and removes all listeners. */\n    public destroy()\n    {\n        const resources = this.resources;\n\n        for (const i in resources)\n        {\n            const resource = resources[i];\n\n            resource.off?.('change', this.onResourceChange, this);\n        }\n\n        this.resources = null;\n    }\n\n    protected onResourceChange()\n    {\n        this._dirty = true;\n        this._updateKey();\n    }\n}\n",null,"export const MAX_TEXTURES = 16;\n",null,"import { uid } from '../../../utils/data/uid';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { fastCopy } from '../../renderers/shared/buffer/utils/fastCopy';\nimport { type BLEND_MODES } from '../../renderers/shared/state/const';\nimport { getAdjustedBlendModeBlend } from '../../renderers/shared/state/getAdjustedBlendModeBlend';\nimport { BatchTextureArray } from './BatchTextureArray';\nimport { MAX_TEXTURES } from './const';\n\nimport type { BindGroup } from '../../renderers/gpu/shader/BindGroup';\nimport type { IndexBufferArray } from '../../renderers/shared/geometry/Geometry';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { Texture } from '../../renderers/shared/texture/Texture';\n\nexport type BatchAction = 'startBatch' | 'renderBatch';\n\n/**\n * A batch pool is used to store batches when they are not currently in use.\n * @memberof rendering\n */\nexport class Batch implements Instruction\n{\n    public renderPipeId = 'batch';\n    public action: BatchAction = 'startBatch';\n\n    // TODO - eventually this could be useful for flagging batches as dirty and then only rebuilding those ones\n    // public elementStart = 0;\n    // public elementSize = 0;\n\n    // for drawing..\n    public start = 0;\n    public size = 0;\n    public textures: BatchTextureArray;\n\n    public blendMode: BLEND_MODES = 'normal';\n\n    public canBundle = true;\n\n    /**\n     * breaking rules slightly here in the name of performance..\n     * storing references to these bindgroups here is just faster for access!\n     * keeps a reference to the GPU bind group to set when rendering this batch for WebGPU. Will be null is using WebGL.\n     */\n    public gpuBindGroup: GPUBindGroup;\n    /**\n     * breaking rules slightly here in the name of performance..\n     * storing references to these bindgroups here is just faster for access!\n     * keeps a reference to the bind group to set when rendering this batch for WebGPU. Will be null if using WebGl.\n     */\n    public bindGroup: BindGroup;\n\n    public batcher: Batcher;\n\n    public destroy()\n    {\n        this.textures = null;\n        this.gpuBindGroup = null;\n        this.bindGroup = null;\n        this.batcher = null;\n    }\n}\n\nexport interface BatchableObject\n{\n    indexStart: number;\n\n    packAttributes: (\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number,\n    ) => void;\n    packIndex: (indexBuffer: IndexBufferArray, index: number, indicesOffset: number) => void;\n\n    texture: Texture;\n    blendMode: BLEND_MODES;\n    vertexSize: number;\n    indexSize: number;\n\n    // stored for efficient updating..\n    textureId: number;\n    location: number; // location in the buffer\n    batcher: Batcher;\n    batch: Batch;\n\n    roundPixels: 0 | 1;\n}\n\nlet BATCH_TICK = 0;\n\n/**\n * The options for the batcher.\n * @ignore\n */\nexport interface BatcherOptions\n{\n    /** The size of the vertex buffer. */\n    vertexSize?: number;\n    /** The size of the index buffer. */\n    indexSize?: number;\n}\n\n/**\n * A batcher is used to batch together objects with the same texture.\n * @ignore\n */\nexport class Batcher\n{\n    public static defaultOptions: BatcherOptions = {\n        vertexSize: 4,\n        indexSize: 6,\n    };\n\n    public uid = uid('batcher');\n    public attributeBuffer: ViewableBuffer;\n    public indexBuffer: IndexBufferArray;\n\n    public attributeSize: number;\n    public indexSize: number;\n    public elementSize: number;\n    public elementStart: number;\n\n    public dirty = true;\n\n    public batchIndex = 0;\n    public batches: Batch[] = [];\n\n    // specifics.\n    private readonly _vertexSize: number = 6;\n\n    private _elements: BatchableObject[] = [];\n\n    private readonly _batchPool: Batch[] = [];\n    private _batchPoolIndex = 0;\n    private readonly _textureBatchPool: BatchTextureArray[] = [];\n    private _textureBatchPoolIndex = 0;\n    private _batchIndexStart: number;\n    private _batchIndexSize: number;\n\n    constructor(options: BatcherOptions = {})\n    {\n        options = { ...Batcher.defaultOptions, ...options };\n\n        const { vertexSize, indexSize } = options;\n\n        this.attributeBuffer = new ViewableBuffer(vertexSize * this._vertexSize * 4);\n\n        this.indexBuffer = new Uint16Array(indexSize);\n    }\n\n    public begin()\n    {\n        this.batchIndex = 0;\n        this.elementSize = 0;\n        this.elementStart = 0;\n        this.indexSize = 0;\n        this.attributeSize = 0;\n        this._batchPoolIndex = 0;\n        this._textureBatchPoolIndex = 0;\n        this._batchIndexStart = 0;\n        this._batchIndexSize = 0;\n\n        this.dirty = true;\n    }\n\n    public add(batchableObject: BatchableObject)\n    {\n        this._elements[this.elementSize++] = batchableObject;\n\n        batchableObject.indexStart = this.indexSize;\n        batchableObject.location = this.attributeSize;\n        batchableObject.batcher = this;\n\n        this.indexSize += batchableObject.indexSize;\n        this.attributeSize += ((batchableObject.vertexSize) * this._vertexSize);\n    }\n\n    public checkAndUpdateTexture(batchableObject: BatchableObject, texture: Texture): boolean\n    {\n        const textureId = batchableObject.batch.textures.ids[texture._source.uid];\n\n        // TODO could try to be a bit smarter if there are spare textures..\n        // but need to figure out how to alter the bind groups too..\n        if (!textureId && textureId !== 0) return false;\n\n        batchableObject.textureId = textureId;\n        batchableObject.texture = texture;\n\n        return true;\n    }\n\n    public updateElement(batchableObject: BatchableObject)\n    {\n        this.dirty = true;\n\n        batchableObject.packAttributes(\n            this.attributeBuffer.float32View,\n            this.attributeBuffer.uint32View,\n            batchableObject.location, batchableObject.textureId);\n    }\n\n    /**\n     * breaks the batcher. This happens when a batch gets too big,\n     * or we need to switch to a different type of rendering (a filter for example)\n     * @param instructionSet\n     */\n    public break(instructionSet: InstructionSet)\n    {\n        // ++BATCH_TICK;\n        const elements = this._elements;\n\n        let textureBatch = this._textureBatchPool[this._textureBatchPoolIndex++] || new BatchTextureArray();\n\n        textureBatch.clear();\n\n        // length 0??!! (we broke without ading anything)\n        if (!elements[this.elementStart]) return;\n\n        const firstElement = elements[this.elementStart];\n        let blendMode = getAdjustedBlendModeBlend(firstElement.blendMode, firstElement.texture._source);\n\n        if (this.attributeSize * 4 > this.attributeBuffer.size)\n        {\n            this._resizeAttributeBuffer(this.attributeSize * 4);\n        }\n\n        if (this.indexSize > this.indexBuffer.length)\n        {\n            this._resizeIndexBuffer(this.indexSize);\n        }\n\n        const f32 = this.attributeBuffer.float32View;\n        const u32 = this.attributeBuffer.uint32View;\n        const iBuffer = this.indexBuffer;\n\n        let size = this._batchIndexSize;\n        let start = this._batchIndexStart;\n\n        let action: BatchAction = 'startBatch';\n        let batch = this._batchPool[this._batchPoolIndex++] || new Batch();\n\n        for (let i = this.elementStart; i < this.elementSize; ++i)\n        {\n            const element = elements[i];\n\n            elements[i] = null;\n\n            const texture = element.texture;\n            const source = texture._source;\n\n            const adjustedBlendMode = getAdjustedBlendModeBlend(element.blendMode, source);\n\n            const blendModeChange = blendMode !== adjustedBlendMode;\n\n            if (source._batchTick === BATCH_TICK && !blendModeChange)\n            {\n                element.textureId = source._textureBindLocation;\n\n                size += element.indexSize;\n                element.packAttributes(f32, u32, element.location, element.textureId);\n                element.packIndex(iBuffer, element.indexStart, element.location / this._vertexSize);\n\n                element.batch = batch;\n\n                continue;\n            }\n\n            source._batchTick = BATCH_TICK;\n\n            if (textureBatch.count >= MAX_TEXTURES || blendModeChange)\n            {\n                this._finishBatch(\n                    batch,\n                    start,\n                    size - start,\n                    textureBatch,\n                    blendMode,\n                    instructionSet,\n                    action\n                );\n\n                action = 'renderBatch';\n                start = size;\n                // create a batch...\n                blendMode = adjustedBlendMode;\n\n                textureBatch = this._textureBatchPool[this._textureBatchPoolIndex++] || new BatchTextureArray();\n                textureBatch.clear();\n\n                batch = this._batchPool[this._batchPoolIndex++] || new Batch();\n                ++BATCH_TICK;\n            }\n\n            element.textureId = source._textureBindLocation = textureBatch.count;\n            textureBatch.ids[source.uid] = textureBatch.count;\n            textureBatch.textures[textureBatch.count++] = source;\n            element.batch = batch;\n\n            size += element.indexSize;\n            element.packAttributes(f32, u32, element.location, element.textureId);\n            element.packIndex(iBuffer, element.indexStart, element.location / this._vertexSize);\n        }\n\n        if (textureBatch.count > 0)\n        {\n            this._finishBatch(\n                batch,\n                start,\n                size - start,\n                textureBatch,\n                blendMode,\n                instructionSet,\n                action\n            );\n\n            start = size;\n            ++BATCH_TICK;\n        }\n\n        this.elementStart = this.elementSize;\n        this._batchIndexStart = start;\n        this._batchIndexSize = size;\n    }\n\n    private _finishBatch(\n        batch: Batch,\n        indexStart: number,\n        indexSize: number,\n        textureBatch: BatchTextureArray,\n        blendMode: BLEND_MODES,\n        instructionSet: InstructionSet,\n        action: BatchAction\n    )\n    {\n        batch.gpuBindGroup = null;\n        batch.action = action;\n\n        batch.batcher = this;\n        batch.textures = textureBatch;\n        batch.blendMode = blendMode;\n\n        batch.start = indexStart;\n        batch.size = indexSize;\n\n        ++BATCH_TICK;\n\n        instructionSet.add(batch);\n    }\n\n    public finish(instructionSet: InstructionSet)\n    {\n        this.break(instructionSet);\n    }\n\n    /**\n     * Resizes the attribute buffer to the given size (1 = 1 float32)\n     * @param size - the size in vertices to ensure (not bytes!)\n     */\n    public ensureAttributeBuffer(size: number)\n    {\n        if (size * 4 <= this.attributeBuffer.size) return;\n\n        this._resizeAttributeBuffer(size * 4);\n    }\n\n    /**\n     * Resizes the index buffer to the given size (1 = 1 float32)\n     * @param size - the size in vertices to ensure (not bytes!)\n     */\n    public ensureIndexBuffer(size: number)\n    {\n        if (size <= this.indexBuffer.length) return;\n\n        this._resizeIndexBuffer(size);\n    }\n\n    private _resizeAttributeBuffer(size: number)\n    {\n        const newSize = Math.max(size, this.attributeBuffer.size * 2);\n\n        const newArrayBuffer = new ViewableBuffer(newSize);\n\n        fastCopy(this.attributeBuffer.rawBinaryData, newArrayBuffer.rawBinaryData);\n\n        this.attributeBuffer = newArrayBuffer;\n    }\n\n    private _resizeIndexBuffer(size: number)\n    {\n        const indexBuffer = this.indexBuffer;\n\n        let newSize = Math.max(size, indexBuffer.length * 1.5);\n\n        newSize += newSize % 2;\n\n        // this, is technically not 100% accurate, as really we should\n        // be checking the maximum value in the buffer. This approximation\n        // does the trick though...\n\n        // make sure buffer is always an even number..\n        const newIndexBuffer = (newSize > 65535) ? new Uint32Array(newSize) : new Uint16Array(newSize);\n\n        if (newIndexBuffer.BYTES_PER_ELEMENT !== indexBuffer.BYTES_PER_ELEMENT)\n        {\n            for (let i = 0; i < indexBuffer.length; i++)\n            {\n                newIndexBuffer[i] = indexBuffer[i];\n            }\n        }\n        else\n        {\n            fastCopy(indexBuffer.buffer, newIndexBuffer.buffer);\n        }\n\n        this.indexBuffer = newIndexBuffer;\n    }\n\n    public destroy()\n    {\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            this.batches[i].destroy();\n        }\n\n        this.batches = null;\n\n        for (let i = 0; i < this._elements.length; i++)\n        {\n            this._elements[i].batch = null;\n        }\n\n        this._elements = null;\n\n        this.indexBuffer = null;\n\n        this.attributeBuffer.destroy();\n        this.attributeBuffer = null;\n    }\n}\n\n",null,"type TypedArray = Float32Array | Uint32Array | Int32Array | Uint8Array;\n\n/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n * @memberof utils\n */\nexport class ViewableBuffer\n{\n    /** The size of the buffer in bytes. */\n    public size: number;\n\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\n    public rawBinaryData: ArrayBuffer;\n\n    /** View on the raw binary data as a `Uint32Array`. */\n    public uint32View: Uint32Array;\n\n    /** View on the raw binary data as a `Float32Array`. */\n    public float32View: Float32Array;\n    public uint16View: Uint16Array;\n\n    private _int8View: Int8Array;\n    private _uint8View: Uint8Array;\n    private _int16View: Int16Array;\n    private _int32View: Int32Array;\n    private _float64Array: Float64Array;\n    private _bigUint64Array: BigUint64Array;\n\n    /**\n     * @param length - The size of the buffer in bytes.\n     */\n    constructor(length: number);\n\n    /**\n     * @param arrayBuffer - The source array buffer.\n     */\n    constructor(arrayBuffer: ArrayBuffer);\n\n    constructor(sizeOrBuffer: number | ArrayBuffer | Uint8Array)\n    {\n        if (typeof sizeOrBuffer === 'number')\n        {\n            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n        }\n        else if (sizeOrBuffer instanceof Uint8Array)\n        {\n            this.rawBinaryData = sizeOrBuffer.buffer;\n        }\n        else\n        {\n            this.rawBinaryData = sizeOrBuffer;\n        }\n\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n        this.float32View = new Float32Array(this.rawBinaryData);\n\n        this.size = this.rawBinaryData.byteLength;\n    }\n\n    /** View on the raw binary data as a `Int8Array`. */\n    get int8View(): Int8Array\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /** View on the raw binary data as a `Uint8Array`. */\n    get uint8View(): Uint8Array\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**  View on the raw binary data as a `Int16Array`. */\n    get int16View(): Int16Array\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /** View on the raw binary data as a `Int32Array`. */\n    get int32View(): Int32Array\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /** View on the raw binary data as a `Float64Array`. */\n    get float64View(): Float64Array\n    {\n        if (!this._float64Array)\n        {\n            this._float64Array = new Float64Array(this.rawBinaryData);\n        }\n\n        return this._float64Array;\n    }\n\n    /** View on the raw binary data as a `BigUint64Array`. */\n    get bigUint64View(): BigUint64Array\n    {\n        if (!this._bigUint64Array)\n        {\n            this._bigUint64Array = new BigUint64Array(this.rawBinaryData);\n        }\n\n        return this._bigUint64Array;\n    }\n\n    /**\n     * Returns the view of the given type.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - typed array of given type\n     */\n    public view(type: string): TypedArray\n    {\n        return (this as any)[`${type}View`];\n    }\n\n    /** Destroys all buffer references. Do not use after calling this. */\n    public destroy(): void\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this.uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    /**\n     * Returns the size of the given type in bytes.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *   `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - size of the type in bytes\n     */\n    public static sizeOf(type: string): number\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n",null,"/**\n * Copies from one buffer to another.\n * This is an optimised function that will use `Float64Array` window.\n * This means it can copy twice as fast!\n * @param sourceBuffer - the array buffer to copy from\n * @param destinationBuffer - the array buffer to copy to\n * @private\n */\nexport function fastCopy(sourceBuffer: ArrayBuffer, destinationBuffer: ArrayBuffer): void\n{\n    const lengthDouble = (sourceBuffer.byteLength / 8) | 0;\n\n    const sourceFloat64View = new Float64Array(sourceBuffer, 0, lengthDouble);\n    const destinationFloat64View = new Float64Array(destinationBuffer, 0, lengthDouble);\n\n    // Use set for faster copying\n    destinationFloat64View.set(sourceFloat64View);\n\n    // copying over the remaining bytes\n    const remainingBytes = sourceBuffer.byteLength - (lengthDouble * 8);\n\n    if (remainingBytes > 0)\n    {\n        const sourceUint8View = new Uint8Array(sourceBuffer, lengthDouble * 8, remainingBytes);\n        const destinationUint8View = new Uint8Array(destinationBuffer, lengthDouble * 8, remainingBytes);\n\n        // Direct copy for remaining bytes\n        destinationUint8View.set(sourceUint8View);\n    }\n}\n",null,"import { type BLEND_MODES, BLEND_TO_NPM } from './const';\n\nimport type { TextureSource } from '../texture/sources/TextureSource';\n\n/**\n * Adjusts a blend mode for the current alpha mode. Returns the blend mode that works with that format.\n * eg 'normal' blend mode will return 'normal-npm' when rendering with premultiplied alpha.\n * and 'normal' if the texture is already premultiplied (the default)\n * @param blendMode - The blend mode to get the adjusted blend mode for.\n * @param textureSource - The texture to test the format of.\n * @returns - the blend mode that should be used to render this texture correctly based on its alphaMode\n */\nexport function getAdjustedBlendModeBlend(blendMode: BLEND_MODES, textureSource: TextureSource): BLEND_MODES\n{\n    if (textureSource.alphaMode === 'no-premultiply-alpha')\n    {\n        return (BLEND_TO_NPM[blendMode as keyof typeof BLEND_TO_NPM] || blendMode) as BLEND_MODES;\n    }\n\n    return blendMode;\n}\n",null,"/* eslint-disable @typescript-eslint/indent */\n/**\n * Various blend modes supported by Pixi\n * @memberof filters\n */\nexport type BLEND_MODES = 'inherit'\n| 'normal'\n| 'add'\n| 'multiply'\n| 'screen'\n| 'darken'\n| 'lighten'\n| 'erase'\n| 'color-dodge'\n| 'color-burn'\n| 'linear-burn'\n| 'linear-dodge'\n| 'linear-light'\n| 'hard-light'\n| 'soft-light'\n| 'pin-light'\n| 'difference'\n| 'exclusion'\n| 'overlay'\n// | 'hue'\n| 'saturation'\n| 'color'\n| 'luminosity'\n| 'normal-npm'\n| 'add-npm'\n| 'screen-npm'\n| 'none'\n| 'subtract'\n| 'divide'\n| 'vivid-light'\n| 'hard-mix'\n| 'negation';\n\n/**\n * The map of blend modes supported by Pixi\n * @memberof rendering\n */\nexport const BLEND_TO_NPM = {\n    normal: 'normal-npm',\n    add: 'add-npm',\n    screen: 'screen-npm',\n};\n\n/**\n * The stencil operation to perform when using the stencil buffer\n * @memberof rendering\n */\nexport enum STENCIL_MODES\n{\n    DISABLED = 0,\n    RENDERING_MASK_ADD = 1,\n    MASK_ACTIVE = 2,\n    RENDERING_MASK_REMOVE = 3,\n    NONE = 4,\n}\n\n/**\n * The culling mode to use. It can be either `none`, `front` or `back`.\n * @memberof rendering\n */\nexport type CULL_MODES = 'none' | 'back' | 'front';\n\n",null,"import type { TextureSource } from '../../renderers/shared/texture/sources/TextureSource';\n\n/**\n * Used by the batcher to build texture batches. Holds list of textures and their respective locations.\n * @memberof rendering\n */\nexport class BatchTextureArray\n{\n    /** Inside textures array. */\n    public textures: TextureSource[];\n\n    /** Respective locations for textures. */\n    public ids: Record<number, number> = Object.create(null);\n\n    /** Number of filled elements. */\n    public count: number;\n\n    constructor()\n    {\n        this.textures = [];\n        this.count = 0;\n    }\n\n    /** Clear the textures and their locations. */\n    public clear(): void\n    {\n        for (let i = 0; i < this.count; i++)\n        {\n            const t = this.textures[i];\n\n            this.textures[i] = null;\n            this.ids[t.uid] = null;\n        }\n\n        this.count = 0;\n    }\n}\n",null,"import { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { buildSimpleUvs, buildUvs } from '../../../../rendering/renderers/shared/geometry/utils/buildUvs';\nimport { transformVertices } from '../../../../rendering/renderers/shared/geometry/utils/transformVertices';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { BigPool } from '../../../../utils/pool/PoolGroup';\nimport { BatchableGraphics } from '../BatchableGraphics';\nimport { buildCircle } from '../buildCommands/buildCircle';\nimport { buildLine } from '../buildCommands/buildLine';\nimport { buildPolygon } from '../buildCommands/buildPolygon';\nimport { buildRectangle } from '../buildCommands/buildRectangle';\nimport { buildTriangle } from '../buildCommands/buildTriangle';\nimport { triangulateWithHoles } from './triangulateWithHoles';\n\nimport type { Polygon } from '../../../../maths/shapes/Polygon';\nimport type { ShapeBuildCommand } from '../buildCommands/ShapeBuildCommand';\nimport type { ConvertedFillStyle, GraphicsContext, TextureInstruction } from '../GraphicsContext';\nimport type { GpuGraphicsContext } from '../GraphicsContextSystem';\nimport type { GraphicsPath } from '../path/GraphicsPath';\nimport type { ShapePath } from '../path/ShapePath';\n\nconst buildMap: Record<string, ShapeBuildCommand> = {\n    rectangle: buildRectangle,\n    polygon: buildPolygon,\n    triangle: buildTriangle,\n    circle: buildCircle,\n    ellipse: buildCircle,\n    roundedRectangle: buildCircle,\n};\n\nconst tempRect = new Rectangle();\n\nexport function buildContextBatches(context: GraphicsContext, gpuContext: GpuGraphicsContext)\n{\n    const { geometryData, batches } = gpuContext;\n\n    // reset them..\n    batches.length = 0;\n    geometryData.indices.length = 0;\n    geometryData.vertices.length = 0;\n    geometryData.uvs.length = 0;\n\n    for (let i = 0; i < context.instructions.length; i++)\n    {\n        const instruction = context.instructions[i];\n\n        if (instruction.action === 'texture')\n        {\n            // add a quad!\n            addTextureToGeometryData(instruction.data, batches, geometryData);\n        }\n        else if (instruction.action === 'fill' || instruction.action === 'stroke')\n        {\n            const isStroke = instruction.action === 'stroke';\n\n            // build path collection of polys and shapes points..\n            const shapePath = instruction.data.path.shapePath;\n\n            const style = instruction.data.style;\n\n            const hole = instruction.data.hole;\n\n            if (isStroke && hole)\n            {\n                addShapePathToGeometryData(hole.shapePath, style, null, true, batches, geometryData);\n            }\n\n            addShapePathToGeometryData(shapePath, style, hole, isStroke, batches, geometryData);\n        }\n    }\n}\n\nfunction addTextureToGeometryData(\n    data: TextureInstruction['data'],\n    batches: BatchableGraphics[],\n    geometryData: {\n        vertices: number[];\n        uvs: number[];\n        indices: number[];\n    }\n)\n{\n    const { vertices, uvs, indices } = geometryData;\n\n    const indexOffset = indices.length;\n    const vertOffset = vertices.length / 2;\n\n    const points: number[] = [];\n\n    const build = buildMap.rectangle;\n\n    const rect = tempRect;\n\n    const texture = data.image;\n\n    rect.x = data.dx;\n    rect.y = data.dy;\n    rect.width = data.dw;\n    rect.height = data.dh;\n\n    const matrix = data.transform;\n\n    // TODO - this can be cached...\n    build.build(rect, points);\n\n    if (matrix)\n    {\n        transformVertices(points, matrix);\n    }\n\n    build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n\n    const textureUvs = texture.uvs;\n\n    uvs.push(\n        textureUvs.x0, textureUvs.y0,\n        textureUvs.x1, textureUvs.y1,\n        textureUvs.x3, textureUvs.y3,\n        textureUvs.x2, textureUvs.y2,\n    );\n\n    const graphicsBatch = BigPool.get(BatchableGraphics);\n\n    graphicsBatch.indexOffset = indexOffset;\n    graphicsBatch.indexSize = indices.length - indexOffset;\n\n    graphicsBatch.vertexOffset = vertOffset;\n    graphicsBatch.vertexSize = (vertices.length / 2) - vertOffset;\n\n    graphicsBatch.color = data.style;\n    graphicsBatch.alpha = data.alpha;\n\n    graphicsBatch.texture = texture;\n    graphicsBatch.geometryData = geometryData;\n\n    batches.push(graphicsBatch);\n}\n\nfunction addShapePathToGeometryData(\n    shapePath: ShapePath,\n    style: ConvertedFillStyle,\n    hole: GraphicsPath,\n    isStroke: boolean,\n    batches: BatchableGraphics[],\n    geometryData: {\n        vertices: number[];\n        uvs: number[];\n        indices: number[];\n    }\n)\n{\n    const { vertices, uvs, indices } = geometryData;\n    const lastIndex = shapePath.shapePrimitives.length - 1;\n\n    shapePath.shapePrimitives.forEach(({ shape, transform: matrix }, i) =>\n    {\n        const indexOffset = indices.length;\n        const vertOffset = vertices.length / 2;\n\n        const points: number[] = [];\n\n        const build = buildMap[shape.type];\n\n        // TODO - this can be cached...\n        // TODO - THIS IS DONE TWICE!!!!!!\n        // ONCE FOR STROKE AND ONCE FOR FILL\n        // move to the ShapePath2D class itself?\n        build.build(shape, points);\n\n        if (matrix)\n        {\n            transformVertices(points, matrix);\n        }\n\n        if (!isStroke)\n        {\n            if (hole && lastIndex === i)\n            {\n                if (lastIndex !== 0)\n                {\n                    console.warn('[Pixi Graphics] only the last shape have be cut out');\n                }\n\n                const holeIndices: number[] = [];\n\n                const otherPoints = points.slice();\n\n                const holeArrays = getHoleArrays(hole.shapePath);\n\n                holeArrays.forEach((holePoints) =>\n                {\n                    holeIndices.push(otherPoints.length / 2);\n                    otherPoints.push(...holePoints);\n                });\n\n                triangulateWithHoles(otherPoints, holeIndices, vertices, 2, vertOffset, indices, indexOffset);\n            }\n            else\n            {\n                build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n            }\n        }\n        else\n        {\n            const close = (shape as Polygon).closePath ?? true;\n            const lineStyle = style;\n\n            buildLine(points, lineStyle, false, close, vertices, 2, vertOffset, indices, indexOffset);\n        }\n\n        const uvsOffset = uvs.length / 2;\n\n        const texture = style.texture;\n\n        if (texture !== Texture.WHITE)\n        {\n            const textureMatrix = style.matrix;\n\n            if (matrix)\n            {\n                // todo can prolly do this before calculating uvs..\n                textureMatrix.append(matrix.clone().invert());\n            }\n\n            buildUvs(vertices, 2, vertOffset, uvs, uvsOffset, 2, (vertices.length / 2) - vertOffset, textureMatrix);\n        }\n        else\n        {\n            buildSimpleUvs(uvs, uvsOffset, 2, (vertices.length / 2) - vertOffset);\n        }\n\n        const graphicsBatch = BigPool.get(BatchableGraphics);\n\n        graphicsBatch.indexOffset = indexOffset;\n        graphicsBatch.indexSize = indices.length - indexOffset;\n\n        graphicsBatch.vertexOffset = vertOffset;\n        graphicsBatch.vertexSize = (vertices.length / 2) - vertOffset;\n\n        graphicsBatch.color = style.color as number;\n        graphicsBatch.alpha = style.alpha;\n\n        graphicsBatch.texture = texture;\n        graphicsBatch.geometryData = geometryData;\n\n        batches.push(graphicsBatch);\n    });\n}\n\nfunction getHoleArrays(shape: ShapePath)\n{\n    if (!shape) return [];\n\n    const holePrimitives = shape.shapePrimitives;\n\n    const holeArrays = [];\n\n    for (let k = 0; k < holePrimitives.length; k++)\n    {\n        const holePrimitive = holePrimitives[k].shape;\n\n        // TODO - need to transform the points via there transform here..\n        const holePoints: number[] = [];\n\n        const holeBuilder = buildMap[holePrimitive.type] as ShapeBuildCommand;\n\n        holeBuilder.build(holePrimitive, holePoints);\n\n        holeArrays.push(holePoints);\n    }\n\n    return holeArrays;\n}\n",null,"import type { Matrix } from '../../../../../maths/matrix/Matrix';\n\n/**\n * Takes a vertices array and a matrix and transforms the vertices based on the matrix.\n * this out put is written to the uvs array\n * @param vertices - the vertices to calculate uvs from\n * @param verticesStride - the stride of the vertice\n * @param verticesOffset - the offset of the vertices\n * @param uvs - the uvs to fill\n * @param uvsOffset - the offset of the uvs\n * @param uvsStride - the stride of the uvs\n * @param size - the size of the vertices\n * @param matrix - the matrix to apply to the uvs\n * @memberof rendering\n */\nexport function buildUvs(\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    uvs: number[],\n    uvsOffset: number,\n    uvsStride: number,\n\n    size: number,\n    matrix: Matrix = null\n): void\n{\n    let index = 0;\n\n    verticesOffset *= verticesStride;\n    uvsOffset *= uvsStride;\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    while (index < size)\n    {\n        const x = vertices[verticesOffset];\n        const y = vertices[verticesOffset + 1];\n\n        uvs[uvsOffset] = (a * x) + (c * y) + tx;\n        uvs[uvsOffset + 1] = (b * x) + (d * y) + ty;\n\n        uvsOffset += uvsStride;\n\n        verticesOffset += verticesStride;\n\n        index++;\n    }\n}\n\nexport function buildSimpleUvs(\n    uvs: number[],\n    uvsOffset: number,\n    uvsStride: number,\n    size: number,\n)\n{\n    let index = 0;\n\n    uvsOffset *= uvsStride;\n\n    while (index < size)\n    {\n        uvs[uvsOffset] = 0;\n        uvs[uvsOffset + 1] = 0;\n\n        uvsOffset += uvsStride;\n\n        index++;\n    }\n}\n",null,"import type { Matrix } from '../../../../../maths/matrix/Matrix';\n\n/**\n * Transforms the vertices in an array with the given matrix.\n * @param vertices - the vertices to transform\n * @param m - the matrix to apply to the vertices\n * @param offset - the offset of the vertices (defaults to 0)\n * @param stride - the stride of the vertices (defaults to 2)\n * @param size - the size of the vertices (defaults to vertices.length / stride - offset)\n * @memberof rendering\n */\nexport function transformVertices(vertices: number[], m: Matrix, offset?: number, stride?: number, size?: number)\n{\n    const a = m.a;\n    const b = m.b;\n    const c = m.c;\n    const d = m.d;\n    const tx = m.tx;\n    const ty = m.ty;\n\n    offset = offset || 0;\n    stride = stride || 2;\n    size = size || (vertices.length / stride) - offset;\n\n    let index = offset * stride;\n\n    for (let i = 0; i < size; i++)\n    {\n        const x = vertices[index];\n        const y = vertices[index + 1];\n\n        vertices[index] = (a * x) + (c * y) + tx;\n        vertices[index + 1] = (b * x) + (d * y) + ty;\n\n        index += stride;\n    }\n}\n",null,"import { mixColors } from '../../container/utils/mixColors';\n\nimport type { Batch, BatchableObject, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Graphics } from './Graphics';\n\n/**\n * A batchable graphics object.\n * @ignore\n */\nexport class BatchableGraphics implements BatchableObject\n{\n    public indexStart: number;\n    public textureId: number;\n    public texture: Texture;\n    public location: number;\n    public batcher: Batcher = null;\n    public batch: Batch = null;\n    public renderable: Graphics;\n    public indexOffset: number;\n    public indexSize: number;\n    public vertexOffset: number;\n    public vertexSize: number;\n    public color: number;\n    public alpha: number;\n    public applyTransform = true;\n    public roundPixels: 0 | 1 = 0;\n\n    public geometryData: { vertices: number[]; uvs: number[]; indices: number[]; };\n\n    get blendMode()\n    {\n        if (this.applyTransform)\n        {\n            return this.renderable.groupBlendMode;\n        }\n\n        return 'normal';\n    }\n\n    public packIndex(indexBuffer: IndexBufferArray, index: number, indicesOffset: number)\n    {\n        const indices = this.geometryData.indices;\n\n        for (let i = 0; i < this.indexSize; i++)\n        {\n            indexBuffer[index++] = indices[i + this.indexOffset] + indicesOffset - this.vertexOffset;\n        }\n    }\n\n    public packAttributes(\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const geometry = this.geometryData;\n        const graphics = this.renderable;\n\n        const positions = geometry.vertices;\n        const uvs = geometry.uvs;\n\n        const offset = this.vertexOffset * 2;\n        const vertSize = (this.vertexOffset + this.vertexSize) * 2;\n\n        const rgb = this.color;\n        const bgr = (rgb >> 16) | (rgb & 0xff00) | ((rgb & 0xff) << 16);\n\n        if (this.applyTransform)\n        {\n            const argb = mixColors(bgr, graphics.groupColor)\n            + ((this.alpha * graphics.groupAlpha * 255) << 24);\n\n            const wt = graphics.groupTransform;\n            const textureIdAndRound = (textureId << 16) | (this.roundPixels & 0xFFFF);\n\n            const a = wt.a;\n            const b = wt.b;\n            const c = wt.c;\n            const d = wt.d;\n            const tx = wt.tx;\n            const ty = wt.ty;\n\n            for (let i = offset; i < vertSize; i += 2)\n            {\n                const x = positions[i];\n                const y = positions[i + 1];\n\n                float32View[index] = (a * x) + (c * y) + tx;\n                float32View[index + 1] = (b * x) + (d * y) + ty;\n\n                float32View[index + 2] = uvs[i];\n                float32View[index + 3] = uvs[i + 1];\n\n                uint32View[index + 4] = argb;\n                uint32View[index + 5] = textureIdAndRound;\n\n                index += 6;\n            }\n        }\n        else\n        {\n            const argb = bgr + ((this.alpha * 255) << 24);\n\n            for (let i = offset; i < vertSize; i += 2)\n            {\n                float32View[index] = positions[i];\n                float32View[index + 1] = positions[i + 1];\n\n                float32View[index + 2] = uvs[i];\n                float32View[index + 3] = uvs[i + 1];\n\n                uint32View[index + 4] = argb;\n                uint32View[index + 5] = textureId << 16;\n\n                index += 6;\n            }\n        }\n    }\n\n    // TODO rename to vertexSize\n    get vertSize()\n    {\n        return this.vertexSize;\n    }\n\n    public copyTo(gpuBuffer: BatchableGraphics)\n    {\n        gpuBuffer.indexOffset = this.indexOffset;\n        gpuBuffer.indexSize = this.indexSize;\n\n        gpuBuffer.vertexOffset = this.vertexOffset;\n        gpuBuffer.vertexSize = this.vertexSize;\n\n        gpuBuffer.color = this.color;\n        gpuBuffer.alpha = this.alpha;\n\n        gpuBuffer.texture = this.texture;\n        gpuBuffer.geometryData = this.geometryData;\n    }\n\n    public reset()\n    {\n        this.applyTransform = true;\n    }\n}\n",null,"import { mixHexColors } from './mixHexColors';\n\nconst WHITE_BGR = 0xFFFFFF;\n\nexport function mixColors(localBGRColor: number, parentBGRColor: number)\n{\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        return localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n\n    return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\n\nexport function mixStandardAnd32BitColors(localColorRGB: number, localAlpha: number, parentColor: number)\n{\n    const parentAlpha = ((parentColor >> 24) & 0xFF) / 255;\n\n    const globalAlpha = ((localAlpha * parentAlpha) * 255);\n\n    // flip rgb to bgr\n    const localBGRColor = ((localColorRGB & 0xFF) << 16) + (localColorRGB & 0xFF00) + ((localColorRGB >> 16) & 0xFF);\n\n    const parentBGRColor = parentColor & 0x00FFFFFF;\n\n    let sharedBGRColor: number;\n\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n    else\n    {\n        sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n    }\n\n    return sharedBGRColor + (globalAlpha << 24);\n}\n\n",null,"export function mixHexColors(color1: number, color2: number, ratio: number): number\n{\n    const r1 = (color1 >> 16) & 0xFF;\n    const g1 = (color1 >> 8) & 0xFF;\n    const b1 = color1 & 0xFF;\n\n    const r2 = (color2 >> 16) & 0xFF;\n    const g2 = (color2 >> 8) & 0xFF;\n    const b2 = color2 & 0xFF;\n\n    const r = r1 + ((r2 - r1) * ratio);\n    const g = g1 + ((g2 - g1) * ratio);\n    const b = b1 + ((b2 - b1) * ratio);\n\n    return (r << 16) + (g << 8) + b;\n}\n\n",null,"import type { Circle } from '../../../../maths/shapes/Circle';\nimport type { Ellipse } from '../../../../maths/shapes/Ellipse';\nimport type { RoundedRectangle } from '../../../../maths/shapes/RoundedRectangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\ntype RoundedShape = Circle | Ellipse | RoundedRectangle;\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildCircle: ShapeBuildCommand<RoundedShape> = {\n\n    build(shape: RoundedShape, points: number[])\n    {\n        let x;\n        let y;\n        let dx;\n        let dy;\n\n        let rx;\n        let ry;\n\n        if (shape.type === 'circle')\n        {\n            const circle = shape as Circle;\n\n            x = circle.x;\n            y = circle.y;\n            rx = ry = circle.radius;\n            dx = dy = 0;\n        }\n\n        else if (shape.type === 'ellipse')\n        {\n            const ellipse = shape as Ellipse;\n\n            x = ellipse.x;\n            y = ellipse.y;\n            rx = ellipse.halfWidth;\n            ry = ellipse.halfHeight;\n            dx = dy = 0;\n        }\n        else\n        {\n            const roundedRect = shape as RoundedRectangle;\n            const halfWidth = roundedRect.width / 2;\n            const halfHeight = roundedRect.height / 2;\n\n            x = roundedRect.x + halfWidth;\n            y = roundedRect.y + halfHeight;\n            rx = ry = Math.max(0, Math.min(roundedRect.radius, Math.min(halfWidth, halfHeight)));\n            dx = halfWidth - rx;\n            dy = halfHeight - ry;\n        }\n\n        if (!(rx >= 0 && ry >= 0 && dx >= 0 && dy >= 0))\n        {\n            return points;\n        }\n\n        // Choose a number of segments such that the maximum absolute deviation from the circle is approximately 0.029\n        const n = Math.ceil(2.3 * Math.sqrt(rx + ry));\n        const m = (n * 8) + (dx ? 4 : 0) + (dy ? 4 : 0);\n\n        if (m === 0)\n        {\n            return points;\n        }\n\n        if (n === 0)\n        {\n            points[0] = points[6] = x + dx;\n            points[1] = points[3] = y + dy;\n            points[2] = points[4] = x - dx;\n            points[5] = points[7] = y - dy;\n\n            return points;\n        }\n\n        let j1 = 0;\n        let j2 = (n * 4) + (dx ? 2 : 0) + 2;\n        let j3 = j2;\n        let j4 = m;\n\n        let x0 = dx + rx;\n        let y0 = dy;\n        let x1 = x + x0;\n        let x2 = x - x0;\n        let y1 = y + y0;\n\n        points[j1++] = x1;\n        points[j1++] = y1;\n        points[--j2] = y1;\n        points[--j2] = x2;\n\n        if (dy)\n        {\n            const y2 = y - y0;\n\n            points[j3++] = x2;\n            points[j3++] = y2;\n            points[--j4] = y2;\n            points[--j4] = x1;\n        }\n\n        for (let i = 1; i < n; i++)\n        {\n            const a = Math.PI / 2 * (i / n);\n            const x0 = dx + (Math.cos(a) * rx);\n            const y0 = dy + (Math.sin(a) * ry);\n            const x1 = x + x0;\n            const x2 = x - x0;\n            const y1 = y + y0;\n            const y2 = y - y0;\n\n            points[j1++] = x1;\n            points[j1++] = y1;\n            points[--j2] = y1;\n            points[--j2] = x2;\n            points[j3++] = x2;\n            points[j3++] = y2;\n            points[--j4] = y2;\n            points[--j4] = x1;\n        }\n\n        x0 = dx;\n        y0 = dy + ry;\n        x1 = x + x0;\n        x2 = x - x0;\n        y1 = y + y0;\n        const y2 = y - y0;\n\n        points[j1++] = x1;\n        points[j1++] = y1;\n        points[--j4] = y2;\n        points[--j4] = x1;\n\n        if (dx)\n        {\n            points[j1++] = x2;\n            points[j1++] = y1;\n            points[--j4] = y2;\n            points[--j4] = x2;\n        }\n\n        return points;\n    },\n\n    triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset)\n    {\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        // Compute center (average of all points)\n        let centerX = 0; let\n            centerY = 0;\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            centerX += points[i];\n            centerY += points[i + 1];\n        }\n        centerX /= (points.length / 2);\n        centerY /= (points.length / 2);\n\n        // Set center vertex\n        let count = verticesOffset;\n\n        vertices[count * verticesStride] = centerX;\n        vertices[(count * verticesStride) + 1] = centerY;\n        const centerIndex = count++;\n\n        // Set edge vertices and indices\n        for (let i = 0; i < points.length; i += 2)\n        {\n            vertices[count * verticesStride] = points[i];\n            vertices[(count * verticesStride) + 1] = points[i + 1];\n\n            if (i > 0)\n            { // Skip first point for indices\n                indices[indicesOffset++] = count;\n                indices[indicesOffset++] = centerIndex;\n                indices[indicesOffset++] = count - 1;\n            }\n            count++;\n        }\n\n        // Connect last point to the first edge point\n        indices[indicesOffset++] = centerIndex + 1;\n        indices[indicesOffset++] = centerIndex;\n        indices[indicesOffset++] = count - 1;\n    }\n\n};\n",null,"import { Point } from '../../../../maths/point/Point';\nimport { closePointEps, curveEps } from '../const';\nimport { getOrientationOfPoints } from '../utils/getOrientationOfPoints';\n\nimport type { StrokeStyle } from '../GraphicsContext';\n\n/**\n * Buffers vertices to draw a square cap.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {number} x - X-coord of end point\n * @param {number} y - Y-coord of end point\n * @param {number} nx - X-coord of line normal pointing inside\n * @param {number} ny - Y-coord of line normal pointing inside\n * @param {number} innerWeight - Weight of inner points\n * @param {number} outerWeight - Weight of outer points\n * @param {boolean} clockwise - Whether the cap is drawn clockwise\n * @param {Array<number>} verts - vertex buffer\n * @returns {number} - no. of vertices pushed\n */\nfunction square(\n    x: number,\n    y: number,\n    nx: number,\n    ny: number,\n    innerWeight: number,\n    outerWeight: number,\n    clockwise: boolean, /* rotation for square (true at left end, false at right end) */\n    verts: Array<number>\n): number\n{\n    const ix = x - (nx * innerWeight);\n    const iy = y - (ny * innerWeight);\n    const ox = x + (nx * outerWeight);\n    const oy = y + (ny * outerWeight);\n\n    /* Rotate nx,ny for extension vector */\n    let exx; let\n        eyy;\n\n    if (clockwise)\n    {\n        exx = ny;\n        eyy = -nx;\n    }\n    else\n    {\n        exx = -ny;\n        eyy = nx;\n    }\n\n    /* [i|0]x,y extended at cap */\n    const eix = ix + exx;\n    const eiy = iy + eyy;\n    const eox = ox + exx;\n    const eoy = oy + eyy;\n\n    /* Square itself must be inserted clockwise*/\n    verts.push(eix, eiy);\n    verts.push(eox, eoy);\n\n    return 2;\n}\n\n/**\n * Buffers vertices to draw an arc at the line joint or cap.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {number} cx - X-coord of center\n * @param {number} cy - Y-coord of center\n * @param {number} sx - X-coord of arc start\n * @param {number} sy - Y-coord of arc start\n * @param {number} ex - X-coord of arc end\n * @param {number} ey - Y-coord of arc end\n * @param {Array[]} verts - buffer of vertices\n * @param {boolean} clockwise - orientation of vertices\n * @returns {number} - no. of vertices pushed\n */\nfunction round(\n    cx: number,\n    cy: number,\n    sx: number,\n    sy: number,\n    ex: number,\n    ey: number,\n    verts: number[],\n    clockwise: boolean, /* if not cap, then clockwise is turn of joint, otherwise rotation from angle0 to angle1 */\n): number\n{\n    const cx2p0x = sx - cx;\n    const cy2p0y = sy - cy;\n\n    let angle0 = Math.atan2(cx2p0x, cy2p0y);\n    let angle1 = Math.atan2(ex - cx, ey - cy);\n\n    if (clockwise && angle0 < angle1)\n    {\n        angle0 += Math.PI * 2;\n    }\n    else if (!clockwise && angle0 > angle1)\n    {\n        angle1 += Math.PI * 2;\n    }\n\n    let startAngle = angle0;\n    const angleDiff = angle1 - angle0;\n    const absAngleDiff = Math.abs(angleDiff);\n\n    const radius = Math.sqrt((cx2p0x * cx2p0x) + (cy2p0y * cy2p0y));\n    const segCount = ((15 * absAngleDiff * Math.sqrt(radius) / Math.PI) >> 0) + 1;\n    const angleInc = angleDiff / segCount;\n\n    startAngle += angleInc;\n\n    if (clockwise)\n    {\n        verts.push(cx, cy);\n        verts.push(sx, sy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(cx, cy);\n            verts.push(cx + ((Math.sin(angle) * radius)),\n                cy + ((Math.cos(angle) * radius)));\n        }\n\n        verts.push(cx, cy);\n        verts.push(ex, ey);\n    }\n    else\n    {\n        verts.push(sx, sy);\n        verts.push(cx, cy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(cx + ((Math.sin(angle) * radius)),\n                cy + ((Math.cos(angle) * radius)));\n            verts.push(cx, cy);\n        }\n\n        verts.push(ex, ey);\n        verts.push(cx, cy);\n    }\n\n    return segCount * 2;\n}\n\n/**\n * Builds a line to draw using the polygon method.\n * @param points\n * @param lineStyle\n * @param flipAlignment\n * @param closed\n * @param vertices\n * @param _verticesStride\n * @param _verticesOffset\n * @param indices\n * @param _indicesOffset\n */\nexport function buildLine(\n    points: number[],\n    lineStyle: StrokeStyle,\n    flipAlignment: boolean,\n    closed: boolean,\n    // alignment:number,\n\n    vertices: number[],\n    _verticesStride: number,\n    _verticesOffset: number,\n\n    indices: number[],\n    _indicesOffset: number,\n\n): void\n{\n    // const shape = graphicsData.shape as Polygon;\n    //   let points = graphicsData.points || shape.points.slice();\n    const eps = closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n\n    const style = lineStyle;\n\n    let alignment = style.alignment;\n\n    if (lineStyle.alignment !== 0.5)\n    {\n        // rotate the points!\n        let orientation = getOrientationOfPoints(points);\n\n        if (flipAlignment)orientation *= -1;\n\n        alignment = ((alignment - 0.5) * orientation) + 0.5;\n    }\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n    const closedShape = closed;\n    const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n        && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n    // if the first point is the last point - gonna have issues :)\n    if (closedShape)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        if (closedPath)\n        {\n            points.pop();\n            points.pop();\n            lastPoint.set(points[points.length - 2], points[points.length - 1]);\n        }\n\n        const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n        const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = vertices;\n\n    const length = points.length / 2;\n    let indexCount = points.length;\n    const indexStart = verts.length / 2;\n\n    // Max. inner and outer width\n    const width = style.width / 2;\n    const widthSquared = width * width;\n    const miterLimitSquared = style.miterLimit * style.miterLimit;\n\n    /* Line segments of interest where (x1,y1) forms the corner. */\n    let x0 = points[0];\n    let y0 = points[1];\n    let x1 = points[2];\n    let y1 = points[3];\n    let x2 = 0;\n    let y2 = 0;\n\n    /* perp[?](x|y) = the line normal with magnitude lineWidth. */\n    let perpX = -(y0 - y1);\n    let perpY = x0 - x1;\n    let perp1x = 0;\n    let perp1y = 0;\n\n    let dist = Math.sqrt((perpX * perpX) + (perpY * perpY));\n\n    perpX /= dist;\n    perpY /= dist;\n    perpX *= width;\n    perpY *= width;\n\n    const ratio = alignment;// 0.5;\n    const innerWeight = (1 - ratio) * 2;\n    const outerWeight = ratio * 2;\n\n    if (!closedShape)\n    {\n        if (style.cap === 'round')\n        {\n            indexCount += round(\n                x0 - (perpX * (innerWeight - outerWeight) * 0.5),\n                y0 - (perpY * (innerWeight - outerWeight) * 0.5),\n                x0 - (perpX * innerWeight),\n                y0 - (perpY * innerWeight),\n                x0 + (perpX * outerWeight),\n                y0 + (perpY * outerWeight),\n                verts,\n                true,\n            ) + 2;\n        }\n        else if (style.cap === 'square')\n        {\n            indexCount += square(x0, y0, perpX, perpY, innerWeight, outerWeight, true, verts);\n        }\n    }\n\n    // Push first point (below & above vertices)\n    verts.push(\n        x0 - (perpX * innerWeight),\n        y0 - (perpY * innerWeight));\n    verts.push(\n        x0 + (perpX * outerWeight),\n        y0 + (perpY * outerWeight));\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        x0 = points[(i - 1) * 2];\n        y0 = points[((i - 1) * 2) + 1];\n\n        x1 = points[i * 2];\n        y1 = points[(i * 2) + 1];\n\n        x2 = points[(i + 1) * 2];\n        y2 = points[((i + 1) * 2) + 1];\n\n        perpX = -(y0 - y1);\n        perpY = x0 - x1;\n\n        dist = Math.sqrt((perpX * perpX) + (perpY * perpY));\n        perpX /= dist;\n        perpY /= dist;\n        perpX *= width;\n        perpY *= width;\n\n        perp1x = -(y1 - y2);\n        perp1y = x1 - x2;\n\n        dist = Math.sqrt((perp1x * perp1x) + (perp1y * perp1y));\n        perp1x /= dist;\n        perp1y /= dist;\n        perp1x *= width;\n        perp1y *= width;\n\n        /* d[x|y](0|1) = the component displacement between points p(0,1|1,2) */\n        const dx0 = x1 - x0;\n        const dy0 = y0 - y1;\n        const dx1 = x1 - x2;\n        const dy1 = y2 - y1;\n\n        /* +ve if internal angle < 90 degree, -ve if internal angle > 90 degree. */\n        const dot = (dx0 * dx1) + (dy0 * dy1);\n        /* +ve if internal angle counterclockwise, -ve if internal angle clockwise. */\n        const cross = (dy0 * dx1) - (dy1 * dx0);\n        const clockwise = (cross < 0);\n\n        /* Going nearly parallel? */\n        /* atan(0.001) ~= 0.001 rad ~= 0.057 degree */\n        if (Math.abs(cross) < 0.001 * Math.abs(dot))\n        {\n            verts.push(\n                x1 - (perpX * innerWeight),\n                y1 - (perpY * innerWeight));\n            verts.push(\n                x1 + (perpX * outerWeight),\n                y1 + (perpY * outerWeight));\n\n            /* 180 degree corner? */\n            if (dot >= 0)\n            {\n                if (style.join === 'round')\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpX * innerWeight), y1 - (perpY * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false) + 4;\n                }\n                else\n                {\n                    indexCount += 2;\n                }\n\n                verts.push(\n                    x1 - (perp1x * outerWeight),\n                    y1 - (perp1y * outerWeight));\n                verts.push(\n                    x1 + (perp1x * innerWeight),\n                    y1 + (perp1y * innerWeight));\n            }\n\n            continue;\n        }\n\n        /* p[x|y] is the miter point. pDist is the distance between miter point and p1. */\n        const c1 = ((-perpX + x0) * (-perpY + y1)) - ((-perpX + x1) * (-perpY + y0));\n        const c2 = ((-perp1x + x2) * (-perp1y + y1)) - ((-perp1x + x1) * (-perp1y + y2));\n        const px = ((dx0 * c2) - (dx1 * c1)) / cross;\n        const py = ((dy1 * c1) - (dy0 * c2)) / cross;\n        const pDist = ((px - x1) * (px - x1)) + ((py - y1) * (py - y1));\n\n        /* Inner miter point */\n        const imx = x1 + ((px - x1) * innerWeight);\n        const imy = y1 + ((py - y1) * innerWeight);\n        /* Outer miter point */\n        const omx = x1 - ((px - x1) * outerWeight);\n        const omy = y1 - ((py - y1) * outerWeight);\n\n        /* Is the inside miter point too far away, creating a spike? */\n        const smallerInsideSegmentSq = Math.min((dx0 * dx0) + (dy0 * dy0), (dx1 * dx1) + (dy1 * dy1));\n        const insideWeight = clockwise ? innerWeight : outerWeight;\n        const smallerInsideDiagonalSq = smallerInsideSegmentSq + (insideWeight * insideWeight * widthSquared);\n        const insideMiterOk = pDist <= smallerInsideDiagonalSq;\n\n        if (insideMiterOk)\n        {\n            if (style.join === 'bevel' || pDist / widthSquared > miterLimitSquared)\n            {\n                if (clockwise) /* rotating at inner angle */\n                {\n                    verts.push(imx, imy); // inner miter point\n                    verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight)); // first segment's outer vertex\n                    verts.push(imx, imy); // inner miter point\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n                }\n                else /* rotating at outer angle */\n                {\n                    verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight)); // first segment's inner vertex\n                    verts.push(omx, omy); // outer miter point\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's outer vertex\n                    verts.push(omx, omy); // outer miter point\n                }\n\n                indexCount += 2;\n            }\n            else if (style.join === 'round')\n            {\n                if (clockwise) /* arc is outside */\n                {\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight));\n\n                    indexCount += round(\n                        x1, y1,\n                        x1 + (perpX * outerWeight), y1 + (perpY * outerWeight),\n                        x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                        verts, true\n                    ) + 4;\n\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));\n                }\n                else /* arc is inside */\n                {\n                    verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight));\n                    verts.push(omx, omy);\n\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpX * innerWeight), y1 - (perpY * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false\n                    ) + 4;\n\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight));\n                    verts.push(omx, omy);\n                }\n            }\n            else\n            {\n                verts.push(imx, imy);\n                verts.push(omx, omy);\n            }\n        }\n        else // inside miter is NOT ok\n        {\n            verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight)); // first segment's inner vertex\n            verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight)); // first segment's outer vertex\n            if (style.join === 'round')\n            {\n                if (clockwise) /* arc is outside */\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 + (perpX * outerWeight), y1 + (perpY * outerWeight),\n                        x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                        verts, true\n                    ) + 2;\n                }\n                else /* arc is inside */\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpX * innerWeight), y1 - (perpY * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false\n                    ) + 2;\n                }\n            }\n            else if (style.join === 'miter' && pDist / widthSquared <= miterLimitSquared)\n            {\n                if (clockwise)\n                {\n                    verts.push(omx, omy); // inner miter point\n                    verts.push(omx, omy); // inner miter point\n                }\n                else\n                {\n                    verts.push(imx, imy); // outer miter point\n                    verts.push(imx, imy); // outer miter point\n                }\n                indexCount += 2;\n            }\n            verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's inner vertex\n            verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n            indexCount += 2;\n        }\n    }\n\n    x0 = points[(length - 2) * 2];\n    y0 = points[((length - 2) * 2) + 1];\n\n    x1 = points[(length - 1) * 2];\n    y1 = points[((length - 1) * 2) + 1];\n\n    perpX = -(y0 - y1);\n    perpY = x0 - x1;\n\n    dist = Math.sqrt((perpX * perpX) + (perpY * perpY));\n    perpX /= dist;\n    perpY /= dist;\n    perpX *= width;\n    perpY *= width;\n\n    verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight));\n    verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight));\n\n    if (!closedShape)\n    {\n        if (style.cap === 'round')\n        {\n            indexCount += round(\n                x1 - (perpX * (innerWeight - outerWeight) * 0.5),\n                y1 - (perpY * (innerWeight - outerWeight) * 0.5),\n                x1 - (perpX * innerWeight),\n                y1 - (perpY * innerWeight),\n                x1 + (perpX * outerWeight),\n                y1 + (perpY * outerWeight),\n                verts,\n                false\n            ) + 2;\n        }\n        else if (style.cap === 'square')\n        {\n            indexCount += square(x1, y1, perpX, perpY, innerWeight, outerWeight, false, verts);\n        }\n    }\n\n    // const indices = graphicsGeometry.indices;\n    const eps2 = curveEps * curveEps;\n\n    // indices.push(indexStart);\n    for (let i = indexStart; i < indexCount + indexStart - 2; ++i)\n    {\n        x0 = verts[(i * 2)];\n        y0 = verts[(i * 2) + 1];\n\n        x1 = verts[(i + 1) * 2];\n        y1 = verts[((i + 1) * 2) + 1];\n\n        x2 = verts[(i + 2) * 2];\n        y2 = verts[((i + 2) * 2) + 1];\n\n        /* Skip zero area triangles */\n        if (Math.abs((x0 * (y1 - y2)) + (x1 * (y2 - y0)) + (x2 * (y0 - y1))) < eps2)\n        {\n            continue;\n        }\n\n        indices.push(i, i + 1, i + 2);\n    }\n}\n\n",null,"export type LineCap = 'butt' | 'round' | 'square';\nexport type LineJoin = 'round' | 'bevel' | 'miter';\n\nexport const closePointEps = 1e-4;\nexport const curveEps = 0.0001;\n",null,"export function getOrientationOfPoints(points: number[]): number\n{\n    const m = points.length;\n\n    if (m < 6)\n    {\n        return 1;\n    }\n\n    let area = 0;\n\n    for (let i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2)\n    {\n        const x2 = points[i];\n        const y2 = points[i + 1];\n\n        area += (x2 - x1) * (y2 + y1);\n\n        x1 = x2;\n        y1 = y2;\n    }\n\n    if (area < 0)\n    {\n        return -1;\n    }\n\n    return 1;\n}\n",null,"import { triangulateWithHoles } from '../utils/triangulateWithHoles';\n\nimport type { Polygon } from '../../../../maths/shapes/Polygon';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\nconst emptyArray: number[] = [];\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildPolygon: ShapeBuildCommand<Polygon> = {\n\n    build(shape: Polygon, points: number[]): number[]\n    {\n        for (let i = 0; i < shape.points.length; i++)\n        {\n            points[i] = shape.points[i];\n        }\n\n        return points;\n    },\n\n    triangulate(\n        points: number[],\n        //  holes: number[],\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        triangulateWithHoles(points, emptyArray, vertices, verticesStride, verticesOffset, indices, indicesOffset);\n    },\n\n};\n",null,"import { default as earcut } from 'earcut';\n\nexport function triangulateWithHoles(\n    points: number[],\n    holes: number[],\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    indices: number[],\n    indicesOffset: number\n)\n{\n    const triangles = earcut(points, holes, 2);\n\n    if (!triangles)\n    {\n        return;\n    }\n\n    for (let i = 0; i < triangles.length; i += 3)\n    {\n        indices[indicesOffset++] = (triangles[i] + verticesOffset);\n        indices[indicesOffset++] = (triangles[i + 1] + verticesOffset);\n        indices[indicesOffset++] = (triangles[i + 2] + verticesOffset);\n    }\n\n    let index = verticesOffset * verticesStride;\n\n    for (let i = 0; i < points.length; i += 2)\n    {\n        vertices[index] = points[i];\n        vertices[index + 1] = points[i + 1];\n\n        index += verticesStride;\n    }\n}\n\n","'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n",null,"import type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildRectangle: ShapeBuildCommand<Rectangle> = {\n\n    build(shape: Rectangle, points: number[]): number[]\n    {\n        const rectData = shape;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        if (!(width >= 0 && height >= 0))\n        {\n            return points;\n        }\n\n        points[0] = x;\n        points[1] = y;\n        points[2] = x + width;\n        points[3] = y;\n        points[4] = x + width;\n        points[5] = y + height;\n        points[6] = x;\n        points[7] = y + height;\n\n        return points;\n    },\n\n    triangulate(\n        points: number[],\n\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        let count = 0;\n\n        verticesOffset *= verticesStride;\n\n        vertices[verticesOffset + count] = points[0];\n        vertices[verticesOffset + count + 1] = points[1];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[2];\n        vertices[verticesOffset + count + 1] = points[3];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[6];\n        vertices[verticesOffset + count + 1] = points[7];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[4];\n        vertices[verticesOffset + count + 1] = points[5];\n\n        count += verticesStride;\n\n        const verticesIndex = verticesOffset / verticesStride;\n\n        // triangle 1\n        indices[indicesOffset++] = verticesIndex;\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 2;\n\n        // triangle 2\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 3;\n        indices[indicesOffset++] = verticesIndex + 2;\n    },\n};\n",null,"import type { Triangle } from '../../../../maths/shapes/Triangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\n/**\n * Builds a triangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildTriangle: ShapeBuildCommand<Triangle> = {\n\n    build(shape: Triangle, points: number[]): number[]\n    {\n        points[0] = shape.x;\n        points[1] = shape.y;\n        points[2] = shape.x2;\n        points[3] = shape.y2;\n        points[4] = shape.x3;\n        points[5] = shape.y3;\n\n        return points;\n    },\n\n    triangulate(\n        points: number[],\n\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        let count = 0;\n\n        verticesOffset *= verticesStride;\n\n        vertices[verticesOffset + count] = points[0];\n        vertices[verticesOffset + count + 1] = points[1];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[2];\n        vertices[verticesOffset + count + 1] = points[3];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[4];\n        vertices[verticesOffset + count + 1] = points[5];\n\n        const verticesIndex = verticesOffset / verticesStride;\n\n        // triangle 1\n        indices[indicesOffset++] = verticesIndex;\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 2;\n    },\n};\n",null,"import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext, GraphicsContextSystem } from './GraphicsContextSystem';\n\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    init(): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\nexport interface GraphicsSystem\n{\n    graphicsContext: GraphicsContextSystem;\n    renderPipes: {\n        batch: BatchPipe\n    }\n    _roundPixels: 0 | 1;\n}\n\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: GraphicsSystem;\n    public state: State = State.for2d();\n\n    // batchable graphics list, used to render batches\n    private _graphicsBatchesHash: Record<number, BatchableGraphics[]> = Object.create(null);\n    private _adaptor: GraphicsAdaptor;\n\n    constructor(renderer: GraphicsSystem, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n        this._adaptor.init();\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n\n        const context = graphics.context;\n\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n\n        if (graphics._didGraphicsUpdate)\n        {\n            graphics._didGraphicsUpdate = false;\n\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const batches = this._graphicsBatchesHash[graphics.uid];\n\n        if (batches)\n        {\n            for (let i = 0; i < batches.length; i++)\n            {\n                const batch = batches[i];\n\n                batch.batcher.updateElement(batch);\n            }\n        }\n    }\n\n    public destroyRenderable(graphics: Graphics)\n    {\n        if (this._graphicsBatchesHash[graphics.uid])\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // TODO POOL the old batches!\n\n        if (wasBatched)\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._initBatchesForRenderable(graphics);\n        }\n\n        graphics.batched = gpuContext.isBatchable;\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getBatchesForRenderable(graphics);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n    }\n\n    private _initBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        const batches = gpuContext.batches.map((batch) =>\n        {\n            // TODO pool this!!\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n\n        this._graphicsBatchesHash[graphics.uid] = batches;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        graphics.on('destroyed', () =>\n        {\n            this.destroyRenderable(graphics);\n        });\n\n        return batches;\n    }\n\n    private _removeBatchForRenderable(graphicsUid: number)\n    {\n        this._graphicsBatchesHash[graphicsUid].forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this._graphicsBatchesHash[graphicsUid] = null;\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n\n        for (const i in this._graphicsBatchesHash)\n        {\n            this._removeBatchForRenderable(i as unknown as number);\n        }\n\n        this._graphicsBatchesHash = null;\n    }\n}\n",null,"/* eslint-disable max-len */\nimport type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof rendering\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n",null,"export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n",null,"import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n",null,"import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { Instruction } from '../../../rendering/renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\ninterface MeshData\n{\n    batched: boolean;\n    indexSize: number;\n    vertexSize: number;\n}\n\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\nexport interface MeshInstruction extends Instruction\n{\n    renderPipeId: 'mesh';\n    mesh: Mesh;\n}\n\n// eslint-disable-next-line max-len\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<MeshInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _meshDataHash: Record<number, MeshData> = Object.create(null);\n    private _gpuBatchableMeshHash: Record<number, BatchableMesh> = Object.create(null);\n    private _adaptor: MeshAdaptor;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            const texture = mesh.texture;\n\n            if (batchableMesh.texture._source !== texture._source)\n            {\n                if (batchableMesh.texture._source !== texture._source)\n                {\n                    return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, texture);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this._getMeshData(mesh);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add({\n                renderPipeId: 'mesh',\n                mesh\n            } as MeshInstruction);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh.batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public destroyRenderable(mesh: Mesh)\n    {\n        this._meshDataHash[mesh.uid] = null;\n\n        const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n        if (gpuMesh)\n        {\n            BigPool.return(gpuMesh as PoolItem);\n            this._gpuBatchableMeshHash[mesh.uid] = null;\n        }\n    }\n\n    public execute({ mesh }: MeshInstruction)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = mesh.groupBlendMode;\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        this._meshDataHash[mesh.uid] = {\n            batched: mesh.batched,\n            indexSize: mesh._geometry.indices?.length,\n            vertexSize: mesh._geometry.positions?.length,\n        };\n\n        mesh.on('destroyed', () =>\n        {\n            this.destroyRenderable(mesh);\n        });\n\n        return this._meshDataHash[mesh.uid];\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = BigPool.get(BatchableMesh);\n\n        gpuMesh.mesh = mesh;\n        gpuMesh.texture = mesh._texture;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n\n        gpuMesh.mesh = mesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuBatchableMeshHash)\n        {\n            if (this._gpuBatchableMeshHash[i])\n            {\n                BigPool.return(this._gpuBatchableMeshHash[i] as PoolItem);\n            }\n        }\n\n        this._gpuBatchableMeshHash = null;\n        this._meshDataHash = null;\n\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n",null,"import { uid } from '../../../../utils/data/uid';\nimport { createIdFromString } from '../utils/createIdFromString';\nimport { getDefaultUniformValue } from './utils/getDefaultUniformValue';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { Buffer } from '../buffer/Buffer';\nimport type { UniformData } from './types';\n\ntype FLOPS<T = UniformData> = T extends { value: infer V } ? V : never;\n\n// TODO replace..T['value']\ntype ExtractUniformObject<T = Record<string, UniformData>> = {\n    [K in keyof T]: FLOPS<T[K]>;\n};\n\n/**\n * Uniform group options\n * @memberof rendering\n */\nexport type UniformGroupOptions = {\n    /**\n     * if true the UniformGroup is handled as an Uniform buffer object.\n     * This is the only way WebGPU can work with uniforms. WebGL2 can also use this.\n     * So don't set to true if you want to use WebGPU :D\n     */\n    ubo?: boolean;\n    /** if true, then you are responsible for when the data is uploaded to the GPU by calling `update()` */\n    isStatic?: boolean;\n};\n\n/**\n * Uniform group holds uniform map and some ID's for work\n *\n * `UniformGroup` has two modes:\n *\n * 1: Normal mode\n * Normal mode will upload the uniforms with individual function calls as required. This is the default mode\n * for WebGL rendering.\n *\n * 2: Uniform buffer mode\n * This mode will treat the uniforms as a uniform buffer. You can pass in either a buffer that you manually handle, or\n * or a generic object that PixiJS will automatically map to a buffer for you.\n * For maximum benefits, make Ubo UniformGroups static, and only update them each frame.\n * This is the only way uniforms can be used with WebGPU.\n *\n * Rules of UBOs:\n * - UBOs only work with WebGL2, so make sure you have a fallback!\n * - Only floats are supported (including vec[2,3,4], mat[2,3,4])\n * - Samplers cannot be used in ubo's (a GPU limitation)\n * - You must ensure that the object you pass in exactly matches in the shader ubo structure.\n * Otherwise, weirdness will ensue!\n * - The name of the ubo object added to the group must match exactly the name of the ubo in the shader.\n *\n * When declaring your uniform options, you ust parse in the value and the type of the uniform.\n * The types correspond to the WebGPU types {@link UNIFORM_TYPES}\n *\n Uniforms can be modified via the classes 'uniforms' property. It will contain all the uniforms declared in the constructor.\n *\n * ```glsl\n * // UBO in shader:\n * uniform myCoolData { // Declaring a UBO...\n *     mat4 uCoolMatrix;\n *     float uFloatyMcFloatFace;\n * };\n * ```\n *\n * ```js\n * // A new Uniform Buffer Object...\n * const myCoolData = new UniformGroup({\n *     uCoolMatrix: {value:new Matrix(), type: 'mat4<f32>'},\n *     uFloatyMcFloatFace: {value:23, type: 'f32'},\n * }}\n *\n * // modify the data\n * myCoolData.uniforms.uFloatyMcFloatFace = 42;\n * // Build a shader...\n * const shader = Shader.from(srcVert, srcFrag, {\n *     myCoolData // Name matches the UBO name in the shader. Will be processed accordingly.\n * })\n *\n *\n *  ```\n * @memberof rendering\n */\nexport class UniformGroup<UNIFORMS extends { [key: string]: UniformData } = any> implements BindResource\n{\n    /** The default options used by the uniform group. */\n    public static defaultOptions: UniformGroupOptions = {\n        /** if true the UniformGroup is handled as an Uniform buffer object. */\n        ubo: false,\n        /** if true, then you are responsible for when the data is uploaded to the GPU by calling `update()` */\n        isStatic: false,\n    };\n\n    /** used internally to know if a uniform group was used in the last render pass */\n    public _touched = 0;\n\n    /** a unique id for this uniform group used through the renderer */\n    public readonly uid = uid('uniform');\n    /** a resource type, used to identify how to handle it when its in a bind group / shader resource */\n    public _resourceType = 'uniformGroup';\n    /** the resource id used internally by the renderer to build bind group keys */\n    public _resourceId = uid('resource');\n    /** the structures of the uniform group */\n    public uniformStructures: UNIFORMS;\n    /** the uniforms as an easily accessible map of properties */\n    public uniforms: ExtractUniformObject<UNIFORMS>;\n    /** true if it should be used as a uniform buffer object */\n    public ubo: boolean;\n    /** an underlying buffer that will be uploaded to the GPU when using this UniformGroup */\n    public buffer?: Buffer;\n    /**\n     * if true, then you are responsible for when the data is uploaded to the GPU.\n     * otherwise, the data is reuploaded each frame.\n     */\n    public isStatic: boolean;\n    /** used ito identify if this is a uniform group */\n    public readonly isUniformGroup = true;\n    /**\n     * used to flag if this Uniform groups data is different from what it has stored in its buffer / on the GPU\n     * @internal\n     * @ignore\n     */\n    public _dirtyId = 0;\n    /**\n     * a signature string generated for internal use\n     * @internal\n     * @ignore\n     */\n    public readonly _signature: number;\n\n    /**\n     * Create a new Uniform group\n     * @param uniformStructures - The structures of the uniform group\n     * @param options - The optional parameters of this uniform group\n     */\n    constructor(uniformStructures: UNIFORMS, options?: UniformGroupOptions)\n    {\n        options = { ...UniformGroup.defaultOptions, ...options };\n\n        this.uniformStructures = uniformStructures;\n\n        const uniforms = {} as ExtractUniformObject<UNIFORMS>;\n\n        for (const i in uniformStructures)\n        {\n            const uniformData = uniformStructures[i] as UniformData;\n\n            uniformData.name = i;\n            uniformData.size = uniformData.size ?? 1;\n            uniformData.value ??= getDefaultUniformValue(uniformData.type, uniformData.size);\n\n            uniforms[i] = uniformData.value as ExtractUniformObject<UNIFORMS>[keyof UNIFORMS];\n        }\n\n        this.uniforms = uniforms;\n\n        this._dirtyId = 1;\n        this.ubo = options.ubo;\n        this.isStatic = options.isStatic;\n\n        this._signature = createIdFromString(Object.keys(uniforms).map(\n            (i) => `${i}-${(uniformStructures[i as keyof typeof uniformStructures] as UniformData).type}`\n        ).join('-'), 'uniform-group');\n    }\n\n    /** Call this if you want the uniform groups data to be uploaded to the GPU only useful if `isStatic` is true. */\n    public update(): void\n    {\n        this._dirtyId++;\n        // dispatch...\n    }\n}\n",null,"const idCounts: Record<string, number> = Object.create(null);\nconst idHash: Record<string, number> = Object.create(null);\n\nexport function createIdFromString(value: string, groupId: string): number\n{\n    let id = idHash[value];\n\n    if (id === undefined)\n    {\n        if (idCounts[groupId] === undefined)\n        {\n            idCounts[groupId] = 1;\n        }\n\n        idHash[value] = id = idCounts[groupId]++;\n    }\n\n    return id;\n}\n",null,"/**\n * @method defaultValue\n * @param {string} type - Type of value\n * @param {number} size\n * @private\n */\nexport function getDefaultUniformValue(\n    type: string,\n    size: number\n): number | Float32Array | Int32Array | Uint32Array | boolean | boolean[]\n{\n    switch (type)\n    {\n        case 'f32':\n            return 0;\n\n        case 'vec2<f32>':\n            return new Float32Array(2 * size);\n\n        case 'vec3<f32>':\n            return new Float32Array(3 * size);\n\n        case 'vec4<f32>':\n            return new Float32Array(4 * size);\n        case 'mat2x2<f32>':\n            return new Float32Array([1, 0,\n                0, 1]);\n\n        case 'mat3x3<f32>':\n            return new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1]);\n\n        case 'mat4x4<f32>':\n            return new Float32Array([1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1]);\n    }\n\n    return null;\n}\n",null,"import type { Batch, BatchableObject, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Container } from '../../container/Container';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements BatchableObject\n{\n    public indexStart: number;\n    public textureId: number;\n    public texture: Texture;\n    public location: number;\n    public batcher: Batcher = null;\n    public batch: Batch = null;\n    public mesh: Container;\n    public geometry: MeshGeometry;\n\n    public roundPixels: 0 | 1 = 0;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n    private _textureMatrixUpdateId: number = -1;\n\n    get blendMode() { return this.mesh.groupBlendMode; }\n\n    public reset()\n    {\n        this.mesh = null;\n        this.texture = null;\n        this.batcher = null;\n        this.batch = null;\n    }\n\n    public packIndex(indexBuffer: IndexBufferArray, index: number, indicesOffset: number)\n    {\n        const indices = this.geometry.indices;\n\n        for (let i = 0; i < indices.length; i++)\n        {\n            indexBuffer[index++] = indices[i] + indicesOffset;\n        }\n    }\n\n    public packAttributes(\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const mesh = this.mesh;\n\n        const geometry = this.geometry;\n        const wt = mesh.groupTransform;\n\n        const textureIdAndRound = (textureId << 16) | (this.roundPixels & 0xFFFF);\n\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        // const trim = texture.trim;\n        const positions = geometry.positions;\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        const abgr = mesh.groupColorAlpha;\n\n        for (let i = 0; i < positions.length; i += 2)\n        {\n            const x = positions[i];\n            const y = positions[i + 1];\n\n            float32View[index] = (a * x) + (c * y) + tx;\n            float32View[index + 1] = (b * x) + (d * y) + ty;\n\n            // TODO implement texture matrix?\n            float32View[index + 2] = transformedUvs[i];\n            float32View[index + 3] = transformedUvs[i + 1];\n\n            uint32View[index + 4] = abgr;\n            uint32View[index + 5] = textureIdAndRound;\n\n            index += 6;\n        }\n    }\n\n    get vertexSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n",null,"import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n",null,"import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            const resolution = text.resolution ?? this._renderer.resolution;\n\n            const { width, height } = this._renderer.canvasText.getTextureSize(\n                text.text,\n                resolution,\n                text._style,\n            );\n\n            if (\n                // is only being used by this text:\n                this._renderer.canvasText.getReferenceCount(gpuText.currentKey) === 1\n                // check the size of the text is the same po2\n                && width === gpuText.texture._source.width\n                && height === gpuText.texture._source.height\n            )\n            {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, _instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite.batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        const padding = text._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        const resolution = text.resolution ?? this._renderer.resolution;\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getTexture(\n            text.text,\n            resolution,\n            text._style,\n            text._getKey()\n        );\n\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', () =>\n        {\n            this.destroyRenderable(text);\n        });\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n",null,"import type { Batch, BatchableObject, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { IndexBufferArray } from '../../rendering/renderers/shared/geometry/Geometry';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements BatchableObject\n{\n    public indexStart: number;\n    public renderable: Container;\n\n    // batch specific..\n    public vertexSize = 4;\n    public indexSize = 6;\n    public texture: Texture;\n\n    public textureId: number;\n    public location = 0; // location in the buffer\n    public batcher: Batcher = null;\n    public batch: Batch = null;\n    public bounds: BoundsData;\n    public roundPixels: 0 | 1 = 0;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    public packAttributes(\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number,\n    )\n    {\n        const sprite = this.renderable;\n        const texture = this.texture;\n\n        const wt = sprite.groupTransform;\n\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const bounds = this.bounds;\n\n        const w0 = bounds.maxX;\n        const w1 = bounds.minX;\n        const h0 = bounds.maxY;\n        const h1 = bounds.minY;\n\n        const uvs = texture.uvs;\n\n        // _ _ _ _\n        // a b g r\n        const argb = sprite.groupColorAlpha;\n\n        const textureIdAndRound = (textureId << 16) | (this.roundPixels & 0xFFFF);\n\n        float32View[index + 0] = (a * w1) + (c * h1) + tx;\n        float32View[index + 1] = (d * h1) + (b * w1) + ty;\n\n        float32View[index + 2] = uvs.x0;\n        float32View[index + 3] = uvs.y0;\n\n        uint32View[index + 4] = argb;\n        uint32View[index + 5] = textureIdAndRound;\n\n        // xy\n        float32View[index + 6] = (a * w0) + (c * h1) + tx;\n        float32View[index + 7] = (d * h1) + (b * w0) + ty;\n\n        float32View[index + 8] = uvs.x1;\n        float32View[index + 9] = uvs.y1;\n\n        uint32View[index + 10] = argb;\n        uint32View[index + 11] = textureIdAndRound;\n\n        // xy\n        float32View[index + 12] = (a * w0) + (c * h0) + tx;\n        float32View[index + 13] = (d * h0) + (b * w0) + ty;\n\n        float32View[index + 14] = uvs.x2;\n        float32View[index + 15] = uvs.y2;\n\n        uint32View[index + 16] = argb;\n        uint32View[index + 17] = textureIdAndRound;\n\n        // xy\n        float32View[index + 18] = (a * w1) + (c * h0) + tx;\n        float32View[index + 19] = (d * h0) + (b * w1) + ty;\n\n        float32View[index + 20] = uvs.x3;\n        float32View[index + 21] = uvs.y3;\n\n        uint32View[index + 22] = argb;\n        uint32View[index + 23] = textureIdAndRound;\n    }\n\n    public packIndex(indexBuffer: IndexBufferArray, index: number, indicesOffset: number)\n    {\n        indexBuffer[index] = indicesOffset + 0;\n        indexBuffer[index + 1] = indicesOffset + 1;\n        indexBuffer[index + 2] = indicesOffset + 2;\n\n        indexBuffer[index + 3] = indicesOffset + 0;\n        indexBuffer[index + 4] = indicesOffset + 2;\n        indexBuffer[index + 5] = indicesOffset + 3;\n    }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this.batcher = null;\n        this.batch = null;\n        this.bounds = null;\n    }\n}\n",null,"import { Color } from '../../../color/Color';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { nextPow2 } from '../../../maths/misc/pow2';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { TextStyle } from '../TextStyle';\n\ninterface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @memberof rendering\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private _activeTextures: Record<string, {\n        canvasAndContext: CanvasAndContext,\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    public getTextureSize(text: string, resolution: number, style: TextStyle): { width: number, height: number }\n    {\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        let width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        let height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        width = Math.ceil((width) - 1e-6);\n        height = Math.ceil((height) - 1e-6);\n        width = nextPow2(width);\n        height = nextPow2(height);\n\n        return { width, height };\n    }\n\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string)\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        // create a texture from the canvas\n        const { canvas } = canvasAndContext;\n\n        this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n\n        const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n\n        if (style.trim)\n        {\n            const trimmed = getCanvasBoundingBox(canvas, resolution);\n\n            texture.frame.copyFrom(trimmed);\n\n            texture.updateUvs();\n        }\n\n        this._activeTextures[textKey] = {\n            canvasAndContext,\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n            TexturePool.returnTexture(activeTexture.texture);\n\n            const source = activeTexture.texture.source;\n\n            source.resource = null;\n            source.uploadMethodId = 'unknown';\n            source.alphaMode = 'no-premultiply-alpha';\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param text\n     * @param style\n     * @param resolution\n     * @param canvasAndContext\n     */\n    public renderTextToCanvas(text: string, style: TextStyle, resolution: number, canvasAndContext: CanvasAndContext): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n\n        context.scale(resolution, resolution);\n\n        context.clearRect(0, 0, measured.width + 4, measured.height + 4);\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.globalAlpha = style._fill?.alpha ?? 1;\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n\n                if (style._stroke?.width)\n                {\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param style\n     * @param canvasAndContext\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n",null,"import { DOMAdapter } from '../../../../environment/adapter';\nimport { nextPow2 } from '../../../../maths/misc/pow2';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @name CanvasPool\n * @memberof rendering\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    private _canvasPool: {[x in string | number]: CanvasAndContext[]};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this._canvasPool = Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    private _createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    public getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this._canvasPool[key])\n        {\n            this._canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this._canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const { width, height } = canvasAndContext.canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        this._canvasPool[key].push(canvasAndContext);\n    }\n\n    public clear(): void\n    {\n        this._canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n",null,"import { nextPow2 } from '../../../../maths/misc/pow2';\nimport { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\nlet count = 0;\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in default pool\n * @memberof rendering\n * @name TexturePool\n */\nexport class TexturePoolClass\n{\n    /** The default options for texture pool */\n    public textureOptions: TextureSourceOptions;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n\n    private _texturePool: {[x in string | number]: Texture[]};\n    private _poolKeyHash: Record<number, number> = Object.create(null);\n\n    /**\n     * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n     * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n     */\n    constructor(textureOptions?: TextureSourceOptions)\n    {\n        this._texturePool = {};\n        this.textureOptions = textureOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     * @param antialias\n     */\n    public createTexture(pixelWidth: number, pixelHeight: number, antialias: boolean): Texture\n    {\n        const textureSource = new TextureSource({\n            ...this.textureOptions,\n\n            width: pixelWidth,\n            height: pixelHeight,\n            resolution: 1,\n            antialias,\n            autoGarbageCollect: true,\n        });\n\n        return new Texture({\n            source: textureSource,\n            label: `texturePool_${count++}`,\n        });\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param frameWidth - The minimum width of the render texture.\n     * @param frameHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @param antialias\n     * @returns The new render texture.\n     */\n    public getOptimalTexture(frameWidth: number, frameHeight: number, resolution = 1, antialias: boolean): Texture\n    {\n        let po2Width = Math.ceil((frameWidth * resolution) - 1e-6);\n        let po2Height = Math.ceil((frameHeight * resolution) - 1e-6);\n\n        po2Width = nextPow2(po2Width);\n        po2Height = nextPow2(po2Height);\n\n        const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n\n        if (!this._texturePool[key])\n        {\n            this._texturePool[key] = [];\n        }\n\n        let texture = this._texturePool[key].pop();\n\n        if (!texture)\n        {\n            texture = this.createTexture(po2Width, po2Height, antialias);\n        }\n\n        texture.source._resolution = resolution;\n        texture.source.width = po2Width / resolution;\n        texture.source.height = po2Height / resolution;\n        texture.source.pixelWidth = po2Width;\n        texture.source.pixelHeight = po2Height;\n\n        // fit the layout to the requested original size\n        texture.frame.x = 0;\n        texture.frame.y = 0;\n        texture.frame.width = frameWidth;\n        texture.frame.height = frameHeight;\n\n        texture.updateUvs();\n\n        this._poolKeyHash[texture.uid] = key;\n\n        return texture;\n    }\n\n    /**\n     * Gets extra texture of the same size as input renderTexture\n     * @param texture - The texture to check what size it is.\n     * @param antialias - Whether to use antialias.\n     * @returns A texture that is a power of two\n     */\n    public getSameSizeTexture(texture: Texture, antialias = false)\n    {\n        const source = texture.source;\n\n        return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param renderTexture - The renderTexture to free\n     */\n    public returnTexture(renderTexture: Texture): void\n    {\n        const key = this._poolKeyHash[renderTexture.uid];\n\n        this._texturePool[key].push(renderTexture);\n    }\n\n    /**\n     * Clears the pool.\n     * @param destroyTextures - Destroy all stored textures.\n     */\n    public clear(destroyTextures?: boolean): void\n    {\n        destroyTextures = destroyTextures !== false;\n        if (destroyTextures)\n        {\n            for (const i in this._texturePool)\n            {\n                const textures = this._texturePool[i];\n\n                if (textures)\n                {\n                    for (let j = 0; j < textures.length; j++)\n                    {\n                        textures[j].destroy(true);\n                    }\n                }\n            }\n        }\n\n        this._texturePool = {};\n    }\n}\n\nexport const TexturePool = new TexturePoolClass();\n",null,"import { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Measuring the bounds of a canvas' visible (non-transparent) pixels.\n * @param canvas - The canvas to measure.\n * @param resolution - The resolution of the canvas.\n * @returns The bounding box of the canvas' visible pixels.\n * @since 7.1.0\n * @memberof utils\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution = 1): Rectangle\n{\n    // https://gist.github.com/timdown/021d9c8f2aabc7092df564996f5afbbf\n\n    const { width, height } = canvas;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n\n    if (context === null)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n",null,"import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n",null,"import { DOMAdapter } from '../../../environment/adapter';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { TextStyle, TextStyleWhiteSpace } from '../TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * A number, or a string containing a number.\n * @memberof text\n * @typedef {object} FontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\nexport interface FontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof text\n */\nexport class CanvasTextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: FontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = CanvasTextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n\n            result\n                = CanvasTextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, FontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static readonly _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static readonly _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __canvas: ICanvas;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __context: ICanvasRenderingContext2D;\n\n    private static readonly _measurementCache: Record<string, CanvasTextMetrics> = {};\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: FontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @param wordWrap\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text = ' ',\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas,\n        wordWrap: boolean = style.wordWrap,\n    ): CanvasTextMetrics\n    {\n        const textKey = `${text}:${style.styleKey}`;\n\n        // TODO - if we find this starts to go nuts with memory, we can remove the cache\n        // or instead just stick a usage tick that we increment each time we return it.\n        // if some are not used, we can just tidy them up!\n        if (CanvasTextMetrics._measurementCache[textKey]) return CanvasTextMetrics._measurementCache[textKey];\n\n        const font = fontStringFromTextStyle(style);\n        const fontProperties = CanvasTextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = CanvasTextMetrics.__context; // canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        const strokeWidth = style._stroke?.width || 0;\n\n        let width = maxLineWidth + strokeWidth;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadow.distance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + strokeWidth;\n\n        let height = Math.max(lineHeight, fontProperties.fontSize + (strokeWidth * 2))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadow.distance;\n        }\n\n        const measurements = new CanvasTextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n\n        // CanvasTextMetrics._measurementCache[textKey] = measurements;\n\n        return measurements;\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        let width = context.measureText(text).width;\n\n        if (width > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                width -= letterSpacing;\n            }\n            else\n            {\n                width += (CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n            }\n        }\n\n        return width;\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static _wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = CanvasTextMetrics._collapseSpaces(whiteSpace);\n        const collapseNewlines = CanvasTextMetrics._collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = CanvasTextMetrics._tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (CanvasTextMetrics._isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += CanvasTextMetrics._addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += CanvasTextMetrics._addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (CanvasTextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = CanvasTextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += CanvasTextMetrics._addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += CanvasTextMetrics._addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += CanvasTextMetrics._addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += CanvasTextMetrics._addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += CanvasTextMetrics._addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static _addLine(line: string, newLine = true): string\n    {\n        line = CanvasTextMetrics._trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static _getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static _collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static _collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static _trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!CanvasTextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static _isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    public static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static _tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (CanvasTextMetrics.isBreakingSpace(char, nextChar) || CanvasTextMetrics._isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    public static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    public static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see CanvasTextMetrics.graphemeSegmenter\n     */\n    public static wordWrapSplit(token: string): string[]\n    {\n        return CanvasTextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): FontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (CanvasTextMetrics._fonts[font])\n        {\n            return CanvasTextMetrics._fonts[font];\n        }\n\n        const context = CanvasTextMetrics._context;\n\n        context.font = font;\n        const metrics = context.measureText(CanvasTextMetrics.METRICS_STRING + CanvasTextMetrics.BASELINE_SYMBOL);\n\n        const properties = {\n            ascent: metrics.actualBoundingBoxAscent,\n            descent: metrics.actualBoundingBoxDescent,\n            fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n        };\n\n        CanvasTextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete CanvasTextMetrics._fonts[font];\n        }\n        else\n        {\n            CanvasTextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!CanvasTextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    CanvasTextMetrics.__canvas = c as ICanvas;\n\n                    return c as ICanvas;\n                }\n\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            catch (ex)\n            {\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            CanvasTextMetrics.__canvas = canvas;\n        }\n\n        return CanvasTextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!CanvasTextMetrics.__context)\n        {\n            CanvasTextMetrics.__context = CanvasTextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return CanvasTextMetrics.__context;\n    }\n}\n",null,"import type { TextStyle } from '../../TextStyle';\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * Generates a font style string to use for `TextMetrics.measureFont()`.\n * @param style\n * @returns Font style string, for passing to `TextMetrics.measureFont()`\n */\nexport function fontStringFromTextStyle(style: TextStyle): string\n{\n    // build canvas api font setting from individual components. Convert a numeric style.fontSize to px\n    const fontSizeString = (typeof style.fontSize === 'number') ? `${style.fontSize}px` : style.fontSize;\n\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    let fontFamilies: string | string[] = style.fontFamily;\n\n    if (!Array.isArray(style.fontFamily))\n    {\n        fontFamilies = style.fontFamily.split(',');\n    }\n\n    for (let i = fontFamilies.length - 1; i >= 0; i--)\n    {\n        // Trim any extra white-space\n        let fontFamily = fontFamilies[i].trim();\n\n        // Check if font already contains strings\n        if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && !genericFontFamilies.includes(fontFamily))\n        {\n            fontFamily = `\"${fontFamily}\"`;\n        }\n        (fontFamilies as string[])[i] = fontFamily;\n    }\n\n    // eslint-disable-next-line max-len\n    return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n}\n",null,"import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../../utils/logging/warn';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern';\n\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { ConvertedFillStyle } from '../../../graphics/shared/GraphicsContext';\n\nexport function getCanvasFillStyle(\n    fillStyle: ConvertedFillStyle,\n    context: ICanvasRenderingContext2D): string | CanvasGradient | CanvasPattern\n{\n    if (fillStyle.texture === Texture.WHITE && !fillStyle.fill)\n    {\n        return Color.shared.setValue(fillStyle.color).toHex();\n    }\n    else if (!fillStyle.fill)\n    {\n        // fancy set up...\n        const pattern = context.createPattern(fillStyle.texture.source.resource, 'repeat');\n\n        // create an inverted scale matrix..\n        const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n\n        tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    else if (fillStyle.fill instanceof FillPattern)\n    {\n        const fillPattern = fillStyle.fill as FillPattern;\n\n        const pattern = context.createPattern(fillPattern.texture.source.resource, 'repeat');\n\n        const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n\n        tempMatrix.scale(\n            fillPattern.texture.frame.width,\n            fillPattern.texture.frame.height\n        );\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    else if (fillStyle.fill instanceof FillGradient)\n    {\n        const fillGradient = fillStyle.fill as FillGradient;\n\n        if (fillGradient.type === 'linear')\n        {\n            const gradient = context.createLinearGradient(\n                fillGradient.x0,\n                fillGradient.y0,\n                fillGradient.x1,\n                fillGradient.y1\n            );\n\n            fillGradient.gradientStops.forEach((stop) =>\n            {\n                gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n            });\n\n            return gradient;\n        }\n    }\n\n    // #if _DEBUG\n    warn('FillStyle not recognised', fillStyle);\n    // #endif\n\n    return 'red';\n}\n",null,"import { Color } from '../../../../color/Color';\nimport { DOMAdapter } from '../../../../environment/adapter';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { ImageSource } from '../../../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { ColorSource } from '../../../../color/Color';\n\nexport type GradientType = 'linear' | 'radial';\n\n// export type GradientSource =\n//     string // CSS gradient string: 'linear-gradient(...)'\n//     | IGradientOptions // Gradient options: { x0, y0, x1, y1, ...}\n//     | Gradient; // class Gradient itself\n\nexport interface LinearGradientFillStyle\n{\n    x0: number;\n    y0: number;\n    x1: number;\n    y1: number;\n    colors: number[];\n    stops: number[];\n}\n\nexport class FillGradient implements CanvasGradient\n{\n    public static defaultTextureSize = 256;\n\n    public readonly uid = uid('fillGradient');\n    public readonly type: GradientType = 'linear';\n\n    public x0: number;\n    public y0: number;\n    public x1: number;\n    public y1: number;\n\n    public texture: Texture;\n    public transform: Matrix;\n    public gradientStops: Array<{ offset: number, color: string }> = [];\n\n    constructor(x0: number, y0: number, x1: number, y1: number)\n    {\n        this.x0 = x0;\n        this.y0 = y0;\n\n        this.x1 = x1;\n        this.y1 = y1;\n    }\n\n    public addColorStop(offset: number, color: ColorSource): this\n    {\n        this.gradientStops.push({ offset, color: Color.shared.setValue(color).toHex() });\n\n        return this;\n    }\n\n    // TODO move to the system!\n    public buildLinearGradient(): void\n    {\n        const defaultSize = FillGradient.defaultTextureSize;\n\n        const { gradientStops } = this;\n\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = defaultSize;\n        canvas.height = defaultSize;\n\n        const ctx = canvas.getContext('2d');\n\n        const gradient = ctx.createLinearGradient(0, 0, FillGradient.defaultTextureSize, 1);\n\n        for (let i = 0; i < gradientStops.length; i++)\n        {\n            const stop = gradientStops[i];\n\n            gradient.addColorStop(stop.offset, stop.color);\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, defaultSize, defaultSize);\n\n        this.texture = new Texture({\n            source: new ImageSource({\n                resource: canvas,\n                addressModeU: 'clamp-to-edge',\n                addressModeV: 'repeat',\n            }),\n        });\n\n        // generate some UVS based on the gradient direction sent\n\n        const { x0, y0, x1, y1 } = this;\n\n        const m = new Matrix();\n\n        // get angle\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n\n        const dist = Math.sqrt((dx * dx) + (dy * dy));\n\n        const angle = Math.atan2(dy, dx);\n\n        m.translate(-x0, -y0);\n        m.scale(1 / defaultSize, 1 / defaultSize);\n        m.rotate(-angle);\n        m.scale(256 / dist, 1);\n\n        this.transform = m;\n    }\n}\n",null,"import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { WRAP_MODE } from '../../../../rendering/renderers/shared/texture/const';\nimport type { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\n\nexport type PatternRepetition = 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat';\n\nconst repetitionMap = {\n    repeat: {\n        addressModeU: 'repeat',\n        addressModeV: 'repeat',\n    },\n    'repeat-x': {\n        addressModeU: 'repeat',\n        addressModeV: 'clamp-to-edge',\n    },\n    'repeat-y': {\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'repeat',\n    },\n    'no-repeat': {\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'clamp-to-edge',\n    },\n};\n\nexport class FillPattern implements CanvasPattern\n{\n    public readonly uid = uid('fillPattern');\n    public texture: Texture;\n    public transform = new Matrix();\n\n    constructor(texture: Texture, repetition?: PatternRepetition)\n    {\n        this.texture = texture;\n\n        this.transform.scale(\n            1 / texture.frame.width,\n            1 / texture.frame.height\n        );\n\n        if (repetition)\n        {\n            texture.source.style.addressModeU = repetitionMap[repetition].addressModeU as WRAP_MODE;\n            texture.source.style.addressModeV = repetitionMap[repetition].addressModeV as WRAP_MODE;\n        }\n    }\n\n    public setTransform(transform?: Matrix): void\n    {\n        const texture = this.texture;\n\n        this.transform.copyFrom(transform);\n        this.transform.invert();\n        //  transform.scale\n        this.transform.scale(\n            1 / texture.frame.width,\n            1 / texture.frame.height\n        );\n    }\n}\n",null,"import { extensions } from '../../extensions/Extensions';\nimport { bitmapFontCachePlugin, loadBitmapFont } from './asset/loadBitmapFont';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe, loadBitmapFont, bitmapFontCachePlugin);\n",null,"import { LoaderParserPriority } from '../../../assets/loader/parsers/LoaderParser';\nimport { copySearchParams } from '../../../assets/utils/copySearchParams';\nimport { DOMAdapter } from '../../../environment/adapter';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { path } from '../../../utils/path';\nimport { BitmapFont } from '../BitmapFont';\nimport { bitmapFontTextParser } from './bitmapFontTextParser';\nimport { bitmapFontXMLStringParser } from './bitmapFontXMLStringParser';\n\nimport type { Loader } from '../../../assets/loader/Loader';\nimport type { LoaderParser } from '../../../assets/loader/parsers/LoaderParser';\nimport type { ResolvedAsset } from '../../../assets/types';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst validExtensions = ['.xml', '.fnt'];\n\n/** simple loader plugin for loading in bitmap fonts! */\nexport const bitmapFontCachePlugin = {\n    extension: ExtensionType.CacheParser,\n    test: (asset: BitmapFont) => asset instanceof BitmapFont,\n    getCacheableAssets(keys: string[], asset: BitmapFont)\n    {\n        const out: Record<string, BitmapFont> = {};\n\n        keys.forEach((key) =>\n        {\n            out[key] = asset;\n        });\n\n        out[`${asset.fontFamily}-bitmap`] = asset;\n\n        return out;\n    }\n};\n\nexport const loadBitmapFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Normal,\n    },\n\n    test(url: string): boolean\n    {\n        return validExtensions.includes(path.extname(url).toLowerCase());\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return bitmapFontTextParser.test(data) || bitmapFontXMLStringParser.test(data);\n    },\n\n    async parse(asset: string, data: ResolvedAsset, loader: Loader): Promise<BitmapFont>\n    {\n        const bitmapFontData = bitmapFontTextParser.test(asset)\n            ? bitmapFontTextParser.parse(asset)\n            : bitmapFontXMLStringParser.parse(asset);\n\n        const { src } = data;\n        const { pages } = bitmapFontData;\n        const textureUrls = [];\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].file;\n            let imagePath = path.join(path.dirname(src), pageFile);\n\n            imagePath = copySearchParams(imagePath, src);\n\n            textureUrls.push(imagePath);\n        }\n\n        const loadedTextures = await loader.load<Texture>(textureUrls);\n        const textures = textureUrls.map((url) => loadedTextures[url]);\n\n        const bitmapFont = new BitmapFont({\n            data: bitmapFontData,\n            textures\n        }, src);\n\n        return bitmapFont;\n    },\n\n    async load(url: string, _options: ResolvedAsset): Promise<string>\n    {\n        const response = await DOMAdapter.get().fetch(url);\n\n        return await response.text();\n    },\n\n    async unload(bitmapFont: BitmapFont, _resolvedAsset, loader): Promise<void>\n    {\n        await Promise.all(bitmapFont.pages.map((page) => loader.unload(page.texture.source._sourceOrigin)));\n\n        bitmapFont.destroy();\n    }\n} as LoaderParser;\n",null,"import { Rectangle } from '../../maths/shapes/Rectangle';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\nimport { BitmapFontManager } from './BitmapFontManager';\n\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\nimport type { BitmapFontData } from './AbstractBitmapFont';\nimport type { BitmapFontInstallOptions } from './BitmapFontManager';\n\n/**\n * Options for creating a BitmapFont.\n * @memberof text\n */\nexport interface BitmapFontOptions\n{\n    data: BitmapFontData\n    textures: Texture[]\n}\n\n/**\n * A BitmapFont object represents a particular font face, size, and style.\n * @memberof text\n */\nexport class BitmapFont extends AbstractBitmapFont<BitmapFont>\n{\n    /** the url of the font */\n    public url?: string;\n\n    constructor(options: BitmapFontOptions, url?: string)\n    {\n        super();\n\n        const { textures, data } = options;\n\n        Object.keys(data.pages).forEach((key: string) =>\n        {\n            const pageData = data.pages[parseInt(key, 10)];\n\n            const texture = textures[pageData.id];\n\n            this.pages.push({ texture });\n        });\n\n        Object.keys(data.chars).forEach((key: string) =>\n        {\n            const charData = data.chars[key];\n            const textureSource = textures[charData.page].source;\n\n            const frameReal = new Rectangle(\n                charData.x,\n                charData.y,\n                charData.width,\n                charData.height,\n            );\n\n            const texture = new Texture({\n                source: textureSource,\n                frame: frameReal\n            });\n\n            this.chars[key] = {\n                id: key.codePointAt(0),\n                xOffset: charData.xOffset,\n                yOffset: charData.yOffset,\n                xAdvance: charData.xAdvance,\n                kerning: charData.kerning ?? {},\n                texture,\n            };\n        });\n\n        this.baseRenderedFontSize = data.fontSize;\n\n        (this.baseMeasurementFontSize as number) = data.fontSize;\n        (this.fontMetrics as FontMetrics) = {\n            ascent: 0,\n            descent: 0,\n            fontSize: data.fontSize,\n        };\n        (this.baseLineOffset as number) = data.baseLineOffset;\n        (this.lineHeight as number) = data.lineHeight;\n        (this.fontFamily as string) = data.fontFamily;\n        (this.distanceField as { type: string, range: number }) = data.distanceField ?? {\n            type: 'none',\n            range: 0,\n        };\n\n        this.url = url;\n    }\n\n    /** Destroys the BitmapFont object. */\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { texture } = this.pages[i];\n\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFont, BitmapText } from 'pixi.js';\n     *\n     * BitmapFont.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public static install(options: BitmapFontInstallOptions)\n    {\n        BitmapFontManager.install(options);\n    }\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public static uninstall(name: string)\n    {\n        BitmapFontManager.uninstall(name);\n    }\n}\n",null,"import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/** @memberof text */\nexport interface CharData\n{\n    /** Unique id of character */\n    id: number;\n    /** x-offset to apply when rendering character */\n    xOffset: number;\n    /** y-offset to apply when rendering character. */\n    yOffset: number;\n    /** Advancement to apply to next character. */\n    xAdvance: number;\n    /** The kerning values for this character. */\n    kerning: Record<string, number>;\n    /** The texture of the character. */\n    texture?: Texture;\n}\n\n/**\n * The raw data of a character in a bitmap font.\n * @memberof text\n */\nexport interface RawCharData extends Omit<CharData, 'texture'>\n{\n    /** The page of the font texture that the character is on. */\n    page: number;\n    /** The x position of the character in the page. */\n    x: number;\n    /** The y position of the character in the page. */\n    y: number;\n    /** The width of the character in the page. */\n    width: number;\n    /** The height of the character in the page. */\n    height: number;\n    /** The letter of the character. */\n    letter: string;\n}\n\n/**\n * The raw data of a bitmap font.\n * @memberof text\n */\nexport interface BitmapFontData\n{\n    /** The offset of the font face from the baseline. */\n    baseLineOffset: number;\n    /** The map of characters by character code. */\n    chars: Record<string, RawCharData>;\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    pages: {\n        /** Unique id for bitmap texture */\n        id: number;\n        /** File name */\n        file: string\n    }[];\n    /** The line-height of the font face in pixels. */\n    lineHeight: number;\n    /** The size of the font face in pixels. */\n    fontSize: number;\n    /** The name of the font face. */\n    fontFamily: string;\n    /** The range and type of the distance field for this font. */\n    distanceField?: {\n        /** Type of distance field */\n        type: 'sdf' | 'msdf' | 'none';\n        /** Range of the distance field in pixels */\n        range: number;\n    };\n}\n\ninterface BitmapFontEvents<Type>\n{\n    destroy: [Type];\n}\n\n/**\n * An abstract representation of a bitmap font.\n * @memberof text\n */\nexport abstract class AbstractBitmapFont<FontType>\n    extends EventEmitter<BitmapFontEvents<FontType>>\n    implements Omit<BitmapFontData, 'chars' | 'pages' | 'fontSize'>\n{\n    /** The map of characters by character code. */\n    public readonly chars: Record<string, CharData> = Object.create(null);\n\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    public readonly lineHeight: BitmapFontData['lineHeight'] = 0;\n\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    public readonly fontFamily: BitmapFontData['fontFamily'] = '';\n    /** The metrics of the font face. */\n    public readonly fontMetrics: FontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    public readonly baseLineOffset: BitmapFontData['baseLineOffset'] = 0;\n    /** The range and type of the distance field for this font. */\n    public readonly distanceField: BitmapFontData['distanceField'] = { type: 'none', range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pages: { texture: Texture }[] = [];\n\n    /** The size of the font face in pixels. */\n    public readonly baseMeasurementFontSize: number = 100;\n    protected baseRenderedFontSize = 100;\n\n    /**\n     * The name of the font face.\n     * @deprecated since 8.0.0 Use `fontFamily` instead.\n     */\n    public get font(): BitmapFontData['fontFamily']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.');\n        // #endif\n\n        return this.fontFamily;\n    }\n\n    /**\n     * The map of base page textures (i.e., sheets of glyphs).\n     * @deprecated since 8.0.0 Use `pages` instead.\n     */\n    public get pageTextures(): AbstractBitmapFont<FontType>['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    /**\n     * The size of the font face in pixels.\n     * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n     */\n    public get size(): BitmapFontData['fontSize']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.');\n        // #endif\n\n        return this.fontMetrics.fontSize;\n    }\n\n    /**\n     * The kind of distance field for this font or \"none\".\n     * @deprecated since 8.0.0 Use `distanceField.type` instead.\n     */\n    public get distanceFieldRange(): NonNullable<BitmapFontData['distanceField']>['range']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.');\n        // #endif\n\n        return this.distanceField.range;\n    }\n\n    /**\n     * The range of the distance field in pixels.\n     * @deprecated since 8.0.0 Use `distanceField.range` instead.\n     */\n    public get distanceFieldType(): NonNullable<BitmapFontData['distanceField']>['type']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.');\n        // #endif\n\n        return this.distanceField.type;\n    }\n\n    public destroy(destroyTextures = false): void\n    {\n        this.emit('destroy', this as unknown as FontType);\n\n        this.removeAllListeners();\n\n        for (const i in this.chars)\n        {\n            this.chars[i].texture.destroy();\n        }\n\n        (this.chars as null) = null;\n\n        if (destroyTextures)\n        {\n            this.pages.forEach((page) => page.texture.destroy(true));\n            (this.pages as any) = null;\n        }\n    }\n}\n",null,"import { Cache } from '../../assets/cache/Cache';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\n/**\n *\n * The options for installing a new BitmapFont. Once installed the font will be available for use in the BitmapText.\n * It can be accessed by the `fontFamily` property of the TextStyle.\n *\n * Install a new BitmapFont will create the characters provided for the font and store them in the cache.\n * But don't worry, if a character is requested that hasn't been generated yet, it will be created on the fly.\n * @memberof text\n */\nexport interface BitmapFontInstallOptions\n{\n    /** the name of the font, this will be the name you use in the fontFamily of text style to access this font */\n    name?: string;\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * If true, this could potentially increase the performance, but may impact the rendered text appearance.\n     * @default false\n     */\n    skipKerning?: boolean;\n    /** Style options to render with BitmapFont. */\n    style?: TextStyle | TextStyleOptions;\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @memberof text\n * @name BitmapFontManager\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n    };\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill)\n        {\n            fontFamilyKey += style._fill.fill.uid;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const fnt = new DynamicBitmapFont({\n                style,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fnt.once('destroy', () => Cache.remove(fontFamilyKey));\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     */\n    public getLayout(text: string, style: TextStyle): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        return getBitmapTextLayout(text.split(''), style, bitmapFont);\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     */\n    public measureText(text: string, style: TextStyle): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = style._fill.fill !== null && style._fill.fill !== undefined;\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            Cache.remove(cacheKey);\n            font.destroy();\n        }\n    }\n}\n\nexport const BitmapFontManager = new BitmapFontManagerClass();\n",null,"import EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../color/Color';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext';\nimport { convertFillInputToFillStyle } from '../graphics/shared/utils/convertFillInputToFillStyle';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey';\n\nimport type { TextureDestroyOptions, TypeOrBool } from '../container/destroyTypes';\nimport type {\n    ConvertedFillStyle,\n    ConvertedStrokeStyle,\n    FillStyle,\n    FillStyleInputs\n} from '../graphics/shared/GraphicsContext';\n\nexport type TextStyleAlign = 'left' | 'center' | 'right' | 'justify';\nexport type TextStyleFill = string | string[] | number | number[] | CanvasGradient | CanvasPattern;\nexport type TextStyleFontStyle = 'normal' | 'italic' | 'oblique';\nexport type TextStyleFontVariant = 'normal' | 'small-caps';\n// eslint-disable-next-line max-len\nexport type TextStyleFontWeight = 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\nexport type TextStyleLineJoin = 'miter' | 'round' | 'bevel';\nexport type TextStyleTextBaseline = 'alphabetic' | 'top' | 'hanging' | 'middle' | 'ideographic' | 'bottom';\nexport type TextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line';\n\n/**\n * A collection of text related classes.\n * @namespace text\n */\n\n/**\n * A drop shadow effect.\n * @memberof text\n */\nexport type TextDropShadow = {\n    /** Set alpha for the drop shadow  */\n    alpha: number;\n    /** Set a angle of the drop shadow */\n    angle: number;\n    /** Set a shadow blur radius */\n    blur: number;\n    /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n    color: ColorSource;\n    /** Set a distance of the drop shadow */\n    distance: number;\n};\n\n/**\n * Constructor options used for `TextStyle` instances.\n * ```js\n * const textStyle = new TextStyle({\n *    fontSize: 12,\n *    fill: 'black',\n * });\n * ```\n * @see {@link text.TextStyle}\n * @memberof text\n */\nexport interface TextStyleOptions\n{\n    /**\n     * Alignment for multiline text, does not affect single line text\n     * @type {'left'|'center'|'right'|'justify'}\n     */\n    align?: TextStyleAlign;\n    /** Indicates if lines can be wrapped within words, it needs `wordWrap` to be set to `true` */\n    breakWords?: boolean;\n    /** Set a drop shadow for the text */\n    dropShadow?: boolean | Partial<TextDropShadow>;\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     * Can be an array to create a gradient, e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    fill?: FillStyleInputs;\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    fontFamily?: string | string[];\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    fontSize?: number | string;\n    /**\n     * The font style.\n     * @type {'normal'|'italic'|'oblique'}\n     */\n    fontStyle?: TextStyleFontStyle;\n    /**\n     * The font variant.\n     * @type {'normal'|'small-caps'}\n     */\n    fontVariant?: TextStyleFontVariant;\n    /**\n     * The font weight.\n     * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    fontWeight?: TextStyleFontWeight;\n    /** The height of the line, a number that represents the vertical space that a letter uses. */\n    leading?: number;\n    /** The amount of spacing between letters, default is 0 */\n    letterSpacing?: number;\n    /** The line height, a number that represents the vertical space that a letter uses */\n    lineHeight?: number;\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from\n     * happening by adding padding to all sides of the text.\n     */\n    padding?: number;\n    /** A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00' */\n    stroke?: FillStyleInputs;\n    /**\n     * The baseline of the text that is rendered.\n     * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    textBaseline?: TextStyleTextBaseline;\n    trim?: boolean,\n    /**\n     * Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     * (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve,\n     * collapse). It needs wordWrap to be set to true.\n     * @type {'normal'|'pre'|'pre-line'}\n     */\n    whiteSpace?: TextStyleWhiteSpace;\n    /** Indicates if word wrap should be used */\n    wordWrap?: boolean;\n    /** The width at which text will wrap, it needs wordWrap to be set to true */\n    wordWrapWidth?: number;\n}\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n * @memberof text\n * @example\n * import { TextStyle } from 'pixi.js';\n * const style = new TextStyle({\n *   fontFamily: ['Helvetica', 'Arial', 'sans-serif'],\n *   fontSize: 36,\n * });\n */\nexport class TextStyle extends EventEmitter<{\n    update: TextDropShadow\n}>\n{\n    /** The default drop shadow settings */\n    public static defaultDropShadow: TextDropShadow = {\n        /** Set alpha for the drop shadow */\n        alpha: 1,\n        /** Set a angle of the drop shadow */\n        angle: Math.PI / 6,\n        /** Set a shadow blur radius */\n        blur: 0,\n        /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n        color: 'black',\n        /** Set a distance of the drop shadow */\n        distance: 5,\n    };\n\n    /** The default text style settings */\n    public static defaultTextStyle: TextStyleOptions = {\n        /**\n         * See {@link TextStyle.align}\n         * @type {'left'|'center'|'right'|'justify'}\n         */\n        align: 'left',\n        /** See {@link TextStyle.breakWords} */\n        breakWords: false,\n        /** See {@link TextStyle.dropShadow} */\n        dropShadow:  null,\n        /**\n         * See {@link TextStyle.fill}\n         * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        fill: 'black',\n        /**\n         * See {@link TextStyle.fontFamily}\n         * @type {string|string[]}\n         */\n        fontFamily: 'Arial',\n        /**\n         * See {@link TextStyle.fontSize}\n         * @type {number|string}\n         */\n        fontSize: 26,\n        /**\n         * See {@link TextStyle.fontStyle}\n         * @type {'normal'|'italic'|'oblique'}\n         */\n        fontStyle: 'normal',\n        /**\n         * See {@link TextStyle.fontVariant}\n         * @type {'normal'|'small-caps'}\n         */\n        fontVariant: 'normal',\n        /**\n         * See {@link TextStyle.fontWeight}\n         * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n         */\n        fontWeight: 'normal',\n        /** See {@link TextStyle.leading} */\n        leading: 0,\n        /** See {@link TextStyle.letterSpacing} */\n        letterSpacing: 0,\n        /** See {@link TextStyle.lineHeight} */\n        lineHeight: 0,\n        /** See {@link TextStyle.padding} */\n        padding: 0,\n        /**\n         * See {@link TextStyle.stroke}\n         * @type {string|number}\n         */\n        stroke: null,\n        /**\n         * See {@link TextStyle.textBaseline}\n         * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n         */\n        textBaseline: 'alphabetic',\n        /** See {@link TextStyle.trim} */\n        trim: false,\n        /**\n         * See {@link TextStyle.whiteSpace}\n         * @type {'normal'|'pre'|'pre-line'}\n         */\n        whiteSpace: 'pre',\n        /** See {@link TextStyle.wordWrap} */\n        wordWrap: false,\n        /** See {@link TextStyle.wordWrapWidth} */\n        wordWrapWidth: 100,\n    };\n\n    // colors!!\n    public _fill: ConvertedFillStyle;\n    private _originalFill: FillStyleInputs;\n\n    public _stroke: ConvertedStrokeStyle;\n    private _originalStroke: FillStyleInputs;\n\n    private _dropShadow: TextDropShadow;\n\n    private _fontFamily: string | string[];\n    private _fontSize: number;\n    private _fontStyle: TextStyleFontStyle;\n    private _fontVariant: TextStyleFontVariant;\n    private _fontWeight: TextStyleFontWeight;\n\n    private _breakWords: boolean;\n    private _align: TextStyleAlign;\n    private _leading: number;\n    private _letterSpacing: number;\n    private _lineHeight: number;\n\n    private _textBaseline: TextStyleTextBaseline;\n    private _whiteSpace: TextStyleWhiteSpace;\n    private _wordWrap: boolean;\n    private _wordWrapWidth: number;\n\n    private _padding: number;\n\n    protected _styleKey: string;\n    private _trim: boolean;\n\n    constructor(style: Partial<TextStyleOptions> = {})\n    {\n        super();\n\n        convertV7Tov8Style(style);\n\n        const fullStyle = { ...TextStyle.defaultTextStyle, ...style };\n\n        for (const key in fullStyle)\n        {\n            const thisKey = key as keyof typeof this;\n\n            this[thisKey] = fullStyle[key as keyof TextStyleOptions] as any;\n        }\n\n        this.update();\n    }\n\n    /**\n     * Alignment for multiline text, does not affect single line text.\n     * @member {'left'|'center'|'right'|'justify'}\n     */\n    get align(): TextStyleAlign { return this._align; }\n    set align(value: TextStyleAlign) { this._align = value; this.update(); }\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean { return this._breakWords; }\n    set breakWords(value: boolean) { this._breakWords = value; this.update(); }\n    /** Set a drop shadow for the text. */\n    get dropShadow(): TextDropShadow { return this._dropShadow; }\n    set dropShadow(value: boolean | TextDropShadow)\n    {\n        if (value !== null && typeof value === 'object')\n        {\n            this._dropShadow = {\n                ...TextStyle.defaultDropShadow as TextDropShadow,\n                ...value as TextDropShadow\n            };\n        }\n        else\n        {\n            this._dropShadow = value ? {\n                ...TextStyle.defaultDropShadow as TextDropShadow\n            } : null;\n        }\n\n        this.update();\n    }\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    get fontFamily(): string | string[] { return this._fontFamily; }\n    set fontFamily(value: string | string[]) { this._fontFamily = value; this.update(); }\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    get fontSize(): number { return this._fontSize; }\n    set fontSize(value: string | number)\n    {\n        if (typeof value === 'string')\n        {\n            // eg '34px' to number\n            this._fontSize = parseInt(value as string, 10);\n        }\n        else\n        {\n            this._fontSize = value as number;\n        }\n        this.update();\n    }\n    /**\n     * The font style.\n     * @member {'normal'|'italic'|'oblique'}\n     */\n    get fontStyle(): TextStyleFontStyle { return this._fontStyle; }\n    set fontStyle(value: TextStyleFontStyle) { this._fontStyle = value; this.update(); }\n    /**\n     * The font variant.\n     * @member {'normal'|'small-caps'}\n     */\n    get fontVariant(): TextStyleFontVariant { return this._fontVariant; }\n    set fontVariant(value: TextStyleFontVariant) { this._fontVariant = value; this.update(); }\n    /**\n     * The font weight.\n     * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    get fontWeight(): TextStyleFontWeight { return this._fontWeight; }\n    set fontWeight(value: TextStyleFontWeight) { this._fontWeight = value; this.update(); }\n    /** The space between lines. */\n    get leading(): number { return this._leading; }\n    set leading(value: number) { this._leading = value; this.update(); }\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number { return this._letterSpacing; }\n    set letterSpacing(value: number) { this._letterSpacing = value; this.update(); }\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number { return this._lineHeight; }\n    set lineHeight(value: number) { this._lineHeight = value; this.update(); }\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number { return this._padding; }\n    set padding(value: number) { this._padding = value; this.update(); }\n\n    /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n    get trim(): boolean { return this._trim; }\n    set trim(value: boolean) { this._trim = value; this.update(); }\n    /**\n     * The baseline of the text that is rendered.\n     * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    get textBaseline(): TextStyleTextBaseline { return this._textBaseline; }\n    set textBaseline(value: TextStyleTextBaseline) { this._textBaseline = value; this.update(); }\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     * @member {'normal'|'pre'|'pre-line'}\n     */\n    get whiteSpace(): TextStyleWhiteSpace { return this._whiteSpace; }\n    set whiteSpace(value: TextStyleWhiteSpace) { this._whiteSpace = value; this.update(); }\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean { return this._wordWrap; }\n    set wordWrap(value: boolean) { this._wordWrap = value; this.update(); }\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number { return this._wordWrapWidth; }\n    set wordWrapWidth(value: number) { this._wordWrapWidth = value; this.update(); }\n\n    /** A fillstyle that will be used on the text e.g., 'red', '#00FF00'. */\n    get fill(): FillStyleInputs\n    {\n        return this._originalFill;\n    }\n\n    set fill(value: FillStyleInputs)\n    {\n        if (value === this._originalFill) return;\n\n        this._originalFill = value;\n        this._fill = convertFillInputToFillStyle(\n            value === 0x0 ? 'black' : value,\n            GraphicsContext.defaultFillStyle\n        );\n        this.update();\n    }\n\n    /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n    get stroke(): FillStyleInputs\n    {\n        return this._originalStroke;\n    }\n\n    set stroke(value: FillStyleInputs)\n    {\n        if (value === this._originalStroke) return;\n\n        this._originalStroke = value;\n        this._stroke = convertFillInputToFillStyle(value, GraphicsContext.defaultStrokeStyle);\n        this.update();\n    }\n\n    protected _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this);\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._styleKey = null;\n        this.emit('update', this);\n    }\n\n    /** Resets all properties to the default values */\n    public reset()\n    {\n        const defaultStyle = TextStyle.defaultTextStyle;\n\n        for (const key in defaultStyle)\n        {\n            this[key as keyof typeof this] = defaultStyle[key as keyof TextStyleOptions] as any;\n        }\n    }\n\n    get styleKey()\n    {\n        return this._styleKey || this._generateKey();\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * @returns New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        return new TextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            leading: this.leading,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            textBaseline: this.textBaseline,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n        });\n    }\n\n    /**\n     * Destroys this text style.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false)\n    {\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fill?.texture)\n            {\n                this._fill.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalFill as FillStyle)?.texture)\n            {\n                (this._originalFill as FillStyle).texture.destroy(destroyTextureSource);\n            }\n\n            if (this._stroke?.texture)\n            {\n                this._stroke.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalStroke as FillStyle)?.texture)\n            {\n                (this._originalStroke as FillStyle).texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fill = null;\n        this._stroke = null;\n        this.dropShadow = null;\n        this._originalStroke = null;\n        this._originalFill = null;\n    }\n}\n\nfunction convertV7Tov8Style(style: TextStyleOptions)\n{\n    const oldStyle = style as any;\n\n    if (typeof oldStyle.dropShadow === 'boolean' && oldStyle.dropShadow)\n    {\n        const defaults = TextStyle.defaultDropShadow;\n\n        style.dropShadow = {\n            alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n            angle: oldStyle.dropShadowAngle ?? defaults.angle,\n            blur: oldStyle.dropShadowBlur ?? defaults.blur,\n            color: oldStyle.dropShadowColor ?? defaults.color,\n            distance:   oldStyle.dropShadowDistance ?? defaults.distance,\n        };\n    }\n\n    if (oldStyle.strokeThickness)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'strokeThickness is now a part of stroke');\n        // #endif\n\n        const color = oldStyle.stroke;\n\n        style.stroke = {\n            color,\n            width: oldStyle.strokeThickness\n        };\n    }\n\n    if (Array.isArray(oldStyle.fill))\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'gradient fill is now a fill pattern: `new FillGradient(...)`');\n        // #endif\n\n        const gradientFill = new FillGradient(0, 0, 0, (style.fontSize as number) * 1.7);\n\n        const fills: number[] = oldStyle.fill.map((color: ColorSource) => Color.shared.setValue(color).toNumber());\n\n        fills.forEach((number, index) =>\n        {\n            const ratio = oldStyle.fillGradientStops[index] ?? index / fills.length;\n\n            gradientFill.addColorStop(ratio, number);\n        });\n\n        style.fill = {\n            fill: gradientFill\n        };\n    }\n}\n",null,"/* eslint-disable max-len */\nimport EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../../color/Color';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { Point } from '../../../maths/point/Point';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { uid } from '../../../utils/data/uid';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { Bounds } from '../../container/bounds/Bounds';\nimport { GraphicsPath } from './path/GraphicsPath';\nimport { SVGParser } from './svg/SVGParser';\nimport { convertFillInputToFillStyle } from './utils/convertFillInputToFillStyle';\n\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { TextureDestroyOptions, TypeOrBool } from '../../container/destroyTypes';\nimport type { LineCap, LineJoin } from './const';\nimport type { FillGradient } from './fill/FillGradient';\nimport type { FillPattern } from './fill/FillPattern';\nimport type { RoundedPoint } from './path/roundShape';\n\n/**\n * A fill style object.\n * @memberof scene\n */\nexport interface FillStyle\n{\n    /** The color to use for the fill. */\n    color?: ColorSource;\n    /** The alpha value to use for the fill. */\n    alpha?: number;\n    /** The texture to use for the fill. */\n    texture?: Texture | null;\n    /** The matrix to apply. */\n    matrix?: Matrix | null;\n    /** The fill pattern to use. */\n    fill?: FillPattern | FillGradient | null;\n}\n\nexport type ConvertedFillStyle = Omit<Required<FillStyle>, 'color'> & { color: number };\n\nexport interface PatternFillStyle\n{\n    fill?: FillPattern | FillGradient;\n    color?: number;\n    alpha?: number;\n}\n\n/**\n * A stroke style object.\n * @memberof scene\n */\nexport interface StrokeStyle extends FillStyle\n{\n    /** The width of the stroke. */\n    width?: number;\n    /** The alignment of the stroke. */\n    alignment?: number;\n    // native?: boolean;\n    /** The line cap style to use. */\n    cap?: LineCap;\n    /** The line join style to use. */\n    join?: LineJoin;\n    /** The miter limit to use. */\n    miterLimit?: number;\n}\n\nexport type ConvertedStrokeStyle = Omit<StrokeStyle, 'color'> & ConvertedFillStyle;\n\nconst tmpPoint = new Point();\n\nexport type BatchMode = 'auto' | 'batch' | 'no-batch';\n\nexport type FillStyleInputs = ColorSource | FillGradient | CanvasPattern | PatternFillStyle | FillStyle | ConvertedFillStyle | StrokeStyle | ConvertedStrokeStyle;\n\nexport interface FillInstruction\n{\n    action: 'fill' | 'cut'\n    data: { style: ConvertedFillStyle, path: GraphicsPath, hole?: GraphicsPath }\n}\n\nexport interface StrokeInstruction\n{\n    action: 'stroke'\n    data: { style: ConvertedStrokeStyle, path: GraphicsPath, hole?: GraphicsPath }\n}\n\nexport interface TextureInstruction\n{\n    action: 'texture'\n    data: {\n        image: Texture,\n\n        dx: number\n        dy: number\n\n        dw: number\n        dh: number\n\n        transform: Matrix\n        alpha: number\n        style: number,\n    }\n}\n\nexport type GraphicsInstructions = FillInstruction | StrokeInstruction | TextureInstruction;\n\nconst tempMatrix = new Matrix();\n\n/**\n * The GraphicsContext class allows for the creation of lightweight objects that contain instructions for drawing shapes and paths.\n * It is used internally by the Graphics class to draw shapes and paths, and can be used directly and shared between Graphics objects,\n *\n * This sharing of a `GraphicsContext` means that the intensive task of converting graphics instructions into GPU-ready geometry is done once, and the results are reused,\n * much like sprites reusing textures.\n * @memberof scene\n */\nexport class GraphicsContext extends EventEmitter<{\n    update: GraphicsContext\n    destroy: GraphicsContext\n}>\n{\n    /** The default fill style to use when none is provided. */\n    public static defaultFillStyle: ConvertedFillStyle = {\n        /** The color to use for the fill. */\n        color: 0xffffff,\n        /** The alpha value to use for the fill. */\n        alpha: 1,\n        /** The texture to use for the fill. */\n        texture: Texture.WHITE,\n        /** The matrix to apply. */\n        matrix: null,\n        /** The fill pattern to use. */\n        fill: null,\n    };\n\n    /** The default stroke style to use when none is provided. */\n    public static defaultStrokeStyle: ConvertedStrokeStyle = {\n        /** The width of the stroke. */\n        width: 1,\n        /** The color to use for the stroke. */\n        color: 0xffffff,\n        /** The alpha value to use for the stroke. */\n        alpha: 1,\n        /** The alignment of the stroke. */\n        alignment: 0.5,\n        /** The miter limit to use. */\n        miterLimit: 10,\n        /** The line cap style to use. */\n        cap: 'butt',\n        /** The line join style to use. */\n        join: 'miter',\n        /** The texture to use for the fill. */\n        texture: Texture.WHITE,\n        /** The matrix to apply. */\n        matrix: null,\n        /** The fill pattern to use. */\n        fill: null,\n    };\n\n    public uid = uid('graphicsContext');\n    public dirty = true;\n    public batchMode: BatchMode = 'auto';\n    public instructions: GraphicsInstructions[] = [];\n    public customShader?: Shader;\n\n    private _activePath: GraphicsPath = new GraphicsPath();\n    private _transform: Matrix = new Matrix();\n\n    private _fillStyle: ConvertedFillStyle = { ...GraphicsContext.defaultFillStyle };\n    private _strokeStyle: ConvertedStrokeStyle = { ...GraphicsContext.defaultStrokeStyle };\n    private _stateStack: { fillStyle: ConvertedFillStyle; strokeStyle: ConvertedStrokeStyle, transform: Matrix }[] = [];\n\n    private _tick = 0;\n\n    private _bounds = new Bounds();\n    private _boundsDirty = true;\n\n    /**\n     * Creates a new GraphicsContext object that is a clone of this instance, copying all properties,\n     * including the current drawing state, transformations, styles, and instructions.\n     * @returns A new GraphicsContext instance with the same properties and state as this one.\n     */\n    public clone(): GraphicsContext\n    {\n        const clone = new GraphicsContext();\n\n        clone.batchMode = this.batchMode;\n        clone.instructions = this.instructions.slice();\n        clone._activePath = this._activePath.clone();\n        clone._transform = this._transform.clone();\n        clone._fillStyle = { ...this._fillStyle };\n        clone._strokeStyle = { ...this._strokeStyle };\n        clone._stateStack = this._stateStack.slice();\n        clone._bounds = this._bounds.clone();\n        clone._boundsDirty = true;\n\n        return clone;\n    }\n\n    /**\n     * The current fill style of the graphics context. This can be a color, gradient, pattern, or a more complex style defined by a FillStyle object.\n     */\n    get fillStyle(): ConvertedFillStyle\n    {\n        return this._fillStyle;\n    }\n\n    set fillStyle(value: FillStyleInputs)\n    {\n        this._fillStyle = convertFillInputToFillStyle(value, GraphicsContext.defaultFillStyle);\n    }\n\n    /**\n     * The current stroke style of the graphics context. Similar to fill styles, stroke styles can encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n     */\n    get strokeStyle(): ConvertedStrokeStyle\n    {\n        return this._strokeStyle;\n    }\n\n    set strokeStyle(value: FillStyleInputs)\n    {\n        this._strokeStyle = convertFillInputToFillStyle(value, GraphicsContext.defaultStrokeStyle) as ConvertedStrokeStyle;\n    }\n\n    /**\n     * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n     * pattern, or a more complex style defined by a FillStyle object.\n     * @param style - The fill style to apply. This can be a simple color, a gradient or pattern object,\n     *                or a FillStyle or ConvertedFillStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setFillStyle(style: FillStyleInputs): this\n    {\n        this._fillStyle = convertFillInputToFillStyle(style, GraphicsContext.defaultFillStyle);\n\n        return this;\n    }\n\n    /**\n     * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n     * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n     * @param style - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n     *                or a StrokeStyle or ConvertedStrokeStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setStrokeStyle(style: FillStyleInputs): this\n    {\n        this._strokeStyle = convertFillInputToFillStyle(style, GraphicsContext.defaultStrokeStyle) as ConvertedStrokeStyle;\n\n        return this;\n    }\n\n    /**\n     * Adds a texture to the graphics context. This method supports multiple overloads for specifying the texture, tint, and dimensions.\n     * If only a texture is provided, it uses the texture's width and height for drawing. Additional parameters allow for specifying\n     * a tint color, and custom dimensions for the texture drawing area.\n     * @param texture - The Texture object to use.\n     * @param tint - (Optional) A ColorSource to tint the texture. If not provided, defaults to white (0xFFFFFF).\n     * @param dx - (Optional) The x-coordinate in the destination canvas at which to place the top-left corner of the source image.\n     * @param dy - (Optional) The y-coordinate in the destination canvas at which to place the top-left corner of the source image.\n     * @param dw - (Optional) The width of the rectangle within the source image to draw onto the destination canvas. If not provided, uses the texture's frame width.\n     * @param dh - (Optional) The height of the rectangle within the source image to draw onto the destination canvas. If not provided, uses the texture's frame height.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public texture(texture: Texture): this;\n    public texture(texture: Texture, tint: ColorSource): this;\n    public texture(texture: Texture, tint: ColorSource, dx: number, dy: number): this;\n    public texture(texture: Texture, tint: ColorSource, dx: number, dy: number, dw: number, dh: number): this;\n    public texture(texture: Texture, tint?: ColorSource, dx?: number, dy?: number, dw?: number, dh?: number): this\n    {\n        this.instructions.push({\n            action: 'texture',\n            data: {\n                image: texture,\n\n                dx: dx || 0,\n                dy: dy || 0,\n\n                dw: dw || texture.frame.width,\n                dh: dh || texture.frame.height,\n\n                transform: this._transform.clone(),\n                alpha: this._fillStyle.alpha,\n                style: tint ? Color.shared.setValue(tint).toNumber() : 0xFFFFFF,\n            }\n        });\n\n        this.onUpdate();\n\n        return this;\n    }\n\n    /**\n     * Resets the current path. Any previous path and its commands are discarded and a new path is\n     * started. This is typically called before beginning a new shape or series of drawing commands.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public beginPath(): this\n    {\n        this._activePath = new GraphicsPath();\n\n        return this;\n    }\n\n    /**\n     * Fills the current or given path with the current fill style. This method can optionally take\n     * a color and alpha for a simple fill, or a more complex FillStyleInputs object for advanced fills.\n     * @param style - (Optional) The style to fill the path with. Can be a color, gradient, pattern, or a complex style object. If omitted, uses the current fill style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public fill(style?: FillStyleInputs): this;\n    /** @deprecated 8.0.0 */\n    public fill(color: ColorSource, alpha: number): this;\n    public fill(style?: FillStyleInputs, alpha?: number): this\n    {\n        let path: GraphicsPath;\n\n        const lastInstruction = this.instructions[this.instructions.length - 1];\n\n        if (this._tick === 0 && lastInstruction && lastInstruction.action === 'stroke')\n        {\n            path = lastInstruction.data.path;\n        }\n        else\n        {\n            path = this._activePath.clone();\n        }\n\n        if (!path) return this;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style != null)\n        {\n            if (alpha !== undefined && typeof style === 'number')\n            {\n                // #if _DEBUG\n                deprecation(v8_0_0, 'GraphicsContext.fill(color, alpha) is deprecated, use GraphicsContext.fill({ color, alpha }) instead');\n                // #endif\n\n                style = { color: style, alpha };\n            }\n            this._fillStyle = convertFillInputToFillStyle(style, GraphicsContext.defaultFillStyle);\n        }\n\n        // TODO not a fan of the clone!!\n        this.instructions.push({\n            action: 'fill',\n            // TODO copy fill style!\n            data: { style: this.fillStyle, path }\n        });\n\n        this.onUpdate();\n\n        this._initNextPathLocation();\n        this._tick = 0;\n\n        return this;\n    }\n\n    private _initNextPathLocation()\n    {\n        // Reset the _activePath with the last point of the current path\n        const { x, y } = this._activePath.getLastPoint(Point.shared);\n\n        this._activePath.clear();\n        this._activePath.moveTo(x, y);\n    }\n\n    /**\n     * Strokes the current path with the current stroke style. This method can take an optional\n     * FillStyleInputs parameter to define the stroke's appearance, including its color, width, and other properties.\n     * @param style - (Optional) The stroke style to apply. Can be defined as a simple color or a more complex style object. If omitted, uses the current stroke style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public stroke(style?: FillStyleInputs): this\n    {\n        let path: GraphicsPath;\n\n        const lastInstruction = this.instructions[this.instructions.length - 1];\n\n        if (this._tick === 0 && lastInstruction && lastInstruction.action === 'fill')\n        {\n            path = lastInstruction.data.path;\n        }\n        else\n        {\n            path = this._activePath.clone();\n        }\n\n        if (!path) return this;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style != null)\n        {\n            this._strokeStyle = convertFillInputToFillStyle(style, GraphicsContext.defaultStrokeStyle);\n        }\n\n        // TODO not a fan of the clone!!\n        this.instructions.push({\n            action: 'stroke',\n            // TODO copy fill style!\n            data: { style: this.strokeStyle, path }\n        });\n\n        this.onUpdate();\n\n        this._initNextPathLocation();\n        this._tick = 0;\n\n        return this;\n    }\n\n    /**\n     * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n     * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n     * fail to cut correctly!\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public cut(): this\n    {\n        for (let i = 0; i < 2; i++)\n        {\n            const lastInstruction = this.instructions[this.instructions.length - 1 - i];\n\n            const holePath = this._activePath.clone();\n\n            if (lastInstruction)\n            {\n                if (lastInstruction.action === 'stroke' || lastInstruction.action === 'fill')\n                {\n                    if (lastInstruction.data.hole)\n                    {\n                        lastInstruction.data.hole.addPath(holePath);\n                    }\n                    else\n                    {\n                        lastInstruction.data.hole = holePath;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this._initNextPathLocation();\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n     * starting and ending angles, and direction.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The arc's radius.\n     * @param startAngle - The starting angle, in radians.\n     * @param endAngle - The ending angle, in radians.\n     * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise (false). Defaults to false.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.arc(\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n            radius,\n            startAngle,\n            endAngle,\n            counterclockwise,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the current path with the given control points and radius, connected to the previous point\n     * by a straight line if necessary.\n     * @param x1 - The x-coordinate of the first control point.\n     * @param y1 - The y-coordinate of the first control point.\n     * @param x2 - The x-coordinate of the second control point.\n     * @param y2 - The y-coordinate of the second control point.\n     * @param radius - The arc's radius.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.arcTo(\n            (t.a * x1) + (t.c * y1) + t.tx,\n            (t.b * x1) + (t.d * y1) + t.ty,\n            (t.a * x2) + (t.c * y2) + t.tx,\n            (t.b * x2) + (t.d * y2) + t.ty,\n            radius,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcToSvg(\n        rx: number, ry: number,\n        xAxisRotation: number,\n        largeArcFlag: number,\n        sweepFlag: number,\n        x: number, y: number\n    ): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.arcToSvg(\n            rx, ry,\n            xAxisRotation, // should we rotate this with transform??\n            largeArcFlag,\n            sweepFlag,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number, smoothness?: number): this\n    {\n        this._tick++;\n\n        // TODO optimize for no transform\n        const t = this._transform;\n\n        this._activePath.bezierCurveTo(\n            (t.a * cp1x) + (t.c * cp1y) + t.tx,\n            (t.b * cp1x) + (t.d * cp1y) + t.ty,\n            (t.a * cp2x) + (t.c * cp2y) + t.tx,\n            (t.b * cp2x) + (t.d * cp2y) + t.ty,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n            smoothness,\n        );\n\n        return this;\n    }\n\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        this._tick++;\n\n        this._activePath?.closePath();\n\n        return this;\n    }\n\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number): this\n    {\n        this._tick++;\n\n        this._activePath.ellipse(x, y, radiusX, radiusY, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number): this\n    {\n        this._tick++;\n\n        this._activePath.circle(x, y, radius, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * @param path - The `GraphicsPath` to add.\n     * @returns The instance of the current object for chaining.\n     */\n    public path(path: GraphicsPath): this\n    {\n        this._tick++;\n\n        this._activePath.addPath(path, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.lineTo(\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty\n        );\n\n        return this;\n    }\n\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        const instructions = this._activePath.instructions;\n\n        const transformedX = (t.a * x) + (t.c * y) + t.tx;\n        const transformedY = (t.b * x) + (t.d * y) + t.ty;\n\n        if (instructions.length === 1 && instructions[0].action === 'moveTo')\n        {\n            instructions[0].data[0] = transformedX;\n            instructions[0].data[1] = transformedY;\n\n            return this;\n        }\n        this._activePath.moveTo(\n            transformedX,\n            transformedY\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cpx - The x-coordinate of the control point.\n     * @param cpy - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.quadraticCurveTo(\n            (t.a * cpx) + (t.c * cpy) + t.tx,\n            (t.b * cpx) + (t.d * cpy) + t.ty,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n            smoothness,\n        );\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number): this\n    {\n        this._tick++;\n\n        this._activePath.rect(x, y, w, h, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number): this\n    {\n        this._tick++;\n\n        this._activePath.roundRect(x, y, w, h, radius, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n     * representing the x and y coordinates, of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     */\n    public poly(points: number[] | PointData[], close?: boolean): this\n    {\n        this._tick++;\n\n        this._activePath.poly(points, close, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation = 0, transform?: Matrix): this\n    {\n        this._tick++;\n        this._activePath.regularPoly(x, y, radius, sides, rotation, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this\n    {\n        this._tick++;\n        this._activePath.roundPoly(x, y, radius, sides, corner, rotation);\n\n        return this;\n    }\n\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this\n    {\n        this._tick++;\n        this._activePath.roundShape(points, radius, useQuadratic, smoothness);\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this\n    {\n        this._tick++;\n        this._activePath.filletRect(x, y, width, height, fillet);\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this\n    {\n        this._tick++;\n        this._activePath.chamferRect(x, y, width, height, chamfer, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @param x - The x-coordinate of the center of the star.\n     * @param y - The y-coordinate of the center of the star.\n     * @param points - The number of points of the star.\n     * @param radius - The outer radius of the star (distance from the center to the outer points).\n     * @param innerRadius - Optional. The inner radius of the star\n     * (distance from the center to the inner points between the outer points).\n     * If not provided, defaults to half of the `radius`.\n     * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n     * Defaults to 0, meaning one point is directly upward.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public star(x: number, y: number, points: number, radius: number, innerRadius = 0, rotation = 0): this\n    {\n        this._tick++;\n\n        this._activePath.star(x, y, points, radius, innerRadius, rotation, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n     * defined in SVG format to be drawn within the graphics context.\n     * @param svg - The SVG string to be parsed and rendered.\n     */\n    public svg(svg: string): this\n    {\n        this._tick++;\n\n        SVGParser(svg, this);\n\n        return this;\n    }\n\n    /**\n     * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n     * This includes transformations, fill styles, and stroke styles.\n     */\n    public restore(): this\n    {\n        const state = this._stateStack.pop();\n\n        if (state)\n        {\n            this._transform = state.transform;\n            this._fillStyle = state.fillStyle;\n            this._strokeStyle = state.strokeStyle;\n        }\n\n        return this;\n    }\n\n    /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n    public save(): this\n    {\n        this._stateStack.push({\n            transform: this._transform.clone(),\n            fillStyle: { ...this._fillStyle },\n            strokeStyle: { ...this._strokeStyle },\n        });\n\n        return this;\n    }\n\n    /**\n     * Returns the current transformation matrix of the graphics context.\n     * @returns The current transformation matrix.\n     */\n    public getTransform(): Matrix\n    {\n        return this._transform;\n    }\n\n    /**\n     * Resets the current transformation matrix to the identity matrix, effectively removing any transformations (rotation, scaling, translation) previously applied.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public resetTransform(): this\n    {\n        this._transform.identity();\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the graphics context around the current origin.\n     * @param angle - The angle of rotation in radians.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public rotate(angle: number): this\n    {\n        this._transform.rotate(angle);\n\n        return this;\n    }\n\n    /**\n     * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n     * @param x - The scale factor in the horizontal direction.\n     * @param y - (Optional) The scale factor in the vertical direction. If not specified, the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public scale(x: number, y: number = x): this\n    {\n        this._transform.scale(x, y);\n\n        return this;\n    }\n\n    /**\n     * Sets the current transformation matrix of the graphics context to the specified matrix or values.\n     * This replaces the current transformation matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setTransform(transform: Matrix): this;\n    public setTransform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public setTransform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this\n    {\n        if (a instanceof Matrix)\n        {\n            this._transform.set(a.a, a.b, a.c, a.d, a.tx, a.ty);\n\n            return this;\n        }\n\n        this._transform.set(a, b, c, d, dx, dy);\n\n        return this;\n    }\n\n    /**\n     * Applies the specified transformation matrix to the current graphics context by multiplying the current matrix with the specified matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public transform(transform: Matrix): this;\n    public transform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public transform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this\n    {\n        if (a instanceof Matrix)\n        {\n            this._transform.append(a);\n\n            return this;\n        }\n\n        tempMatrix.set(a, b, c, d, dx, dy);\n        this._transform.append(tempMatrix);\n\n        return this;\n    }\n\n    /**\n     * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n     * @param x - The amount to translate in the horizontal direction.\n     * @param y - (Optional) The amount to translate in the vertical direction. If not specified, the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public translate(x: number, y: number = x): this\n    {\n        this._transform.translate(x, y);\n\n        return this;\n    }\n\n    /**\n     * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n     * and optionally resetting transformations to the identity matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public clear(): this\n    {\n        this.instructions.length = 0;\n        this.resetTransform();\n\n        this.onUpdate();\n\n        return this;\n    }\n\n    protected onUpdate(): void\n    {\n        if (this.dirty) return;\n\n        this.emit('update', this, 0x10);\n        this.dirty = true;\n        this._boundsDirty = true;\n    }\n\n    /** The bounds of the graphic shape. */\n    get bounds(): Bounds\n    {\n        if (!this._boundsDirty) return this._bounds;\n\n        // TODO switch to idy dirty with tick..\n        const bounds = this._bounds;\n\n        bounds.clear();\n\n        for (let i = 0; i < this.instructions.length; i++)\n        {\n            const instruction = this.instructions[i];\n            const action = instruction.action;\n\n            if (action === 'fill')\n            {\n                const data = instruction.data as FillInstruction['data'];\n\n                bounds.addBounds(data.path.bounds);\n            }\n            else if (action === 'texture')\n            {\n                const data = instruction.data as TextureInstruction['data'];\n\n                bounds.addFrame(data.dx, data.dy, data.dx + data.dw, data.dy + data.dh, data.transform);\n            }\n            if (action === 'stroke')\n            {\n                const data = instruction.data as StrokeInstruction['data'];\n\n                const padding = data.style.width / 2;\n\n                const _bounds = data.path.bounds;\n\n                bounds.addFrame(\n                    _bounds.minX - padding,\n                    _bounds.minY - padding,\n                    _bounds.maxX + padding,\n                    _bounds.maxY + padding\n                );\n            }\n        }\n\n        return bounds;\n    }\n\n    /**\n     * Check to see if a point is contained within this geometry.\n     * @param point - Point to check if it's contained.\n     * @returns {boolean} `true` if the point is contained within geometry.\n     */\n    public containsPoint(point: PointData): boolean\n    {\n        // early out if the bounding box is not hit\n        if (!this.bounds.containsPoint(point.x, point.y)) return false;\n\n        const instructions = this.instructions;\n        let hasHit = false;\n\n        for (let k = 0; k < instructions.length; k++)\n        {\n            const instruction = instructions[k];\n\n            const data = instruction.data as FillInstruction['data'];\n            const path = data.path;\n\n            if (!instruction.action || !path) continue;\n\n            const style = data.style;\n            const shapes = path.shapePath.shapePrimitives;\n\n            for (let i = 0; i < shapes.length; i++)\n            {\n                const shape = shapes[i].shape;\n\n                if (!style || !shape) continue;\n\n                const transform = shapes[i].transform;\n\n                const transformedPoint = transform ? transform.applyInverse(point, tmpPoint) : point;\n\n                if (instruction.action === 'fill')\n                {\n                    hasHit = shape.contains(transformedPoint.x, transformedPoint.y);\n                }\n                else\n                {\n                    hasHit = shape.strokeContains(transformedPoint.x, transformedPoint.y, (style as ConvertedStrokeStyle).width);\n                }\n\n                const holes = data.hole;\n\n                if (holes)\n                {\n                    const holeShapes = holes.shapePath?.shapePrimitives;\n\n                    if (holeShapes)\n                    {\n                        for (let j = 0; j < holeShapes.length; j++)\n                        {\n                            if (holeShapes[j].shape.contains(transformedPoint.x, transformedPoint.y))\n                            {\n                                hasHit = false;\n                            }\n                        }\n                    }\n                }\n\n                if (hasHit)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return hasHit;\n    }\n\n    /**\n     * Destroys the GraphicsData object.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the fill/stroke style?\n     * @param {boolean} [options.textureSource=false] - Should it destroy the texture source of the fill/stroke style?\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false): void\n    {\n        this._stateStack.length = 0;\n        this._transform = null;\n\n        this.emit('destroy', this);\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fillStyle.texture)\n            {\n                this._fillStyle.texture.destroy(destroyTextureSource);\n            }\n\n            if (this._strokeStyle.texture)\n            {\n                this._strokeStyle.texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fillStyle = null;\n        this._strokeStyle = null;\n\n        this.instructions = null;\n        this._activePath = null;\n        this._bounds = null;\n        this._stateStack = null;\n        this.customShader = null;\n        this._transform = null;\n    }\n}\n",null,"import { Point } from '../../../../maths/point/Point';\nimport { uid } from '../../../../utils/data/uid';\nimport { warn } from '../../../../utils/logging/warn';\nimport { SVGToGraphicsPath } from '../svg/SVGToGraphicsPath';\nimport { ShapePath } from './ShapePath';\n\nimport type { Matrix } from '../../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { Bounds } from '../../../container/bounds/Bounds';\nimport type { RoundedPoint } from './roundShape';\n\nexport interface PathInstruction\n{\n    action: 'moveTo' | 'lineTo' | 'quadraticCurveTo' |\n    'bezierCurveTo' | 'arc' | 'closePath' |\n    'addPath' | 'arcTo' | 'ellipse' |\n    'rect' | 'roundRect' | 'arcToSvg' |\n    'poly' | 'circle' |\n    'regularPoly' | 'roundPoly' | 'roundShape' | 'filletRect' | 'chamferRect'\n    data: any[];\n}\n\n/**\n * The `GraphicsPath` class is designed to represent a graphical path consisting of multiple drawing instructions.\n * This class serves as a collection of drawing commands that can be executed to render shapes and paths on a canvas or\n * similar graphical context. It supports high-level drawing operations like lines, arcs, curves, and more, enabling\n * complex graphic constructions with relative ease.\n */\nexport class GraphicsPath\n{\n    public instructions: PathInstruction[] = [];\n\n    public uid = uid('graphicsPath');\n\n    private _dirty = true;\n    // needed for hit testing and bounds calculations\n    private _shapePath: ShapePath;\n\n    /**\n     * Provides access to the internal shape path, ensuring it is up-to-date with the current instructions.\n     * @returns The `ShapePath` instance associated with this `GraphicsPath`.\n     */\n    get shapePath(): ShapePath\n    {\n        if (!this._shapePath)\n        {\n            this._shapePath = new ShapePath(this);\n        }\n\n        if (this._dirty)\n        {\n            this._dirty = false;\n            this._shapePath.buildPath();\n        }\n\n        return this._shapePath;\n    }\n\n    /**\n     * Creates a `GraphicsPath` instance optionally from an SVG path string or an array of `PathInstruction`.\n     * @param instructions - An SVG path string or an array of `PathInstruction` objects.\n     */\n    constructor(instructions?: string | PathInstruction[])\n    {\n        if (typeof instructions === 'string')\n        {\n            SVGToGraphicsPath(instructions, this);\n        }\n        else\n        {\n            this.instructions = instructions?.slice() ?? [];\n        }\n    }\n\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * @param path - The `GraphicsPath` to add.\n     * @param transform - An optional transformation to apply to the added path.\n     * @returns The instance of the current object for chaining.\n     */\n    public addPath(path: GraphicsPath, transform?: Matrix): this\n    {\n        path = path.clone();\n        this.instructions.push({ action: 'addPath', data: [path, transform] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path. The arc is centered at (x, y)\n     *  position with radius `radius` starting at `startAngle` and ending at `endAngle`.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The radius of the arc.\n     * @param startAngle - The starting angle of the arc, in radians.\n     * @param endAngle - The ending angle of the arc, in radians.\n     * @param counterclockwise - Specifies whether the arc should be drawn in the anticlockwise direction. False by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;\n    public arc(...args: [number, number, number, number, number, boolean]): this\n    {\n        this.instructions.push({ action: 'arc', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path with the arc tangent to the line joining two specified points.\n     * The arc radius is specified by `radius`.\n     * @param x1 - The x-coordinate of the first point.\n     * @param y1 - The y-coordinate of the first point.\n     * @param x2 - The x-coordinate of the second point.\n     * @param y2 - The y-coordinate of the second point.\n     * @param radius - The radius of the arc.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;\n    public arcTo(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'arcTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    // eslint-disable-next-line max-len\n    public arcToSvg(rx: number, ry: number, xAxisRotation: number, largeArcFlag: number, sweepFlag: number, x: number, y: number): this;\n    public arcToSvg(...args: [number, number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'arcToSvg', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number,\n        x: number, y: number,\n        smoothness?: number\n    ): this;\n    public bezierCurveTo(...args: [number, number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'bezierCurveTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires two points: the second control point and the end point. The first control point is assumed to be\n     * The starting point is the last point in the current path.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveToShort(cp2x: number, cp2y: number, x: number, y: number, smoothness?: number): this\n    {\n        const last = this.instructions[this.instructions.length - 1];\n\n        const lastPoint = this.getLastPoint(Point.shared);\n\n        let cp1x = 0;\n        let cp1y = 0;\n\n        if (!last || last.action !== 'bezierCurveTo')\n        {\n            cp1x = lastPoint.x;\n            cp1y = lastPoint.y;\n        }\n        else\n        {\n            cp1x = last.data[2];\n            cp1y = last.data[3];\n\n            const currentX = lastPoint.x;\n            const currentY = lastPoint.y;\n\n            cp1x = currentX + (currentX - cp1x);\n            cp1y = currentY + (currentY - cp1y);\n        }\n\n        this.instructions.push({ action: 'bezierCurveTo', data: [cp1x, cp1y, cp2x, cp2y, x, y, smoothness] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        this.instructions.push({ action: 'closePath', data: [] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @param transform - An optional `Matrix` object to apply a transformation to the ellipse. This can include rotations.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number, matrix?: Matrix): this;\n    public ellipse(...args: [number, number, number, number, Matrix]): this\n    {\n        this.instructions.push({ action: 'ellipse', data: args });\n\n        // TODO nail this!\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this;\n    public lineTo(...args: [number, number]): this\n    {\n        this.instructions.push({ action: 'lineTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this;\n    public moveTo(...args: [number, number]): this\n    {\n        this.instructions.push({ action: 'moveTo', data: args });\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the control point.\n     * @param cp1y - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this;\n    public quadraticCurveTo(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'quadraticCurveTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It uses the previous point as the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveToShort(x: number, y: number, smoothness?: number): this\n    {\n        // check if we have a previous quadraticCurveTo\n        const last = this.instructions[this.instructions.length - 1];\n\n        const lastPoint = this.getLastPoint(Point.shared);\n\n        let cpx1 = 0;\n        let cpy1 = 0;\n\n        if (!last || last.action !== 'quadraticCurveTo')\n        {\n            cpx1 = lastPoint.x;\n            cpy1 = lastPoint.y;\n        }\n        else\n        {\n            cpx1 = last.data[0];\n            cpy1 = last.data[1];\n\n            const currentX = lastPoint.x;\n            const currentY = lastPoint.y;\n\n            cpx1 = currentX + (currentX - cpx1);\n            cpy1 = currentY + (currentY - cpy1);\n        }\n\n        this.instructions.push({ action: 'quadraticCurveTo', data: [cpx1, cpy1, x, y, smoothness] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number, transform?: Matrix): this\n    {\n        this.instructions.push({ action: 'rect', data: [x, y, w, h, transform] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number, transform?: Matrix): this\n    {\n        this.instructions.push({ action: 'circle', data: [x, y, radius, transform] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number, transform?: Matrix): this;\n    public roundRect(...args: [number, number, number, number, number, Matrix?]): this\n    {\n        this.instructions.push({ action: 'roundRect', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @param points - An array of numbers representing the x and y coordinates of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public poly(points: number[] | PointData[], close?: boolean, transform?: Matrix): this;\n    public poly(...args: [number[] | PointData[], boolean, Matrix?]): this\n    {\n        this.instructions.push({ action: 'poly', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation?: number, transform?: Matrix): this;\n    public regularPoly(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'regularPoly', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this;\n    public roundPoly(...args: [number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'roundPoly', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this;\n    public roundShape(...args: [RoundedPoint[], number, boolean, number]): this\n    {\n        this.instructions.push({ action: 'roundShape', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this;\n    public filletRect(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'filletRect', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this;\n    public chamferRect(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'chamferRect', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @param x - The x-coordinate of the center of the star.\n     * @param y - The y-coordinate of the center of the star.\n     * @param points - The number of points of the star.\n     * @param radius - The outer radius of the star (distance from the center to the outer points).\n     * @param innerRadius - Optional. The inner radius of the star\n     * (distance from the center to the inner points between the outer points).\n     * If not provided, defaults to half of the `radius`.\n     * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n     * Defaults to 0, meaning one point is directly upward.\n     * @param transform - An optional `Matrix` object to apply a transformation to the star.\n     * This can include rotations, scaling, and translations.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    // eslint-disable-next-line max-len\n    public star(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number, transform?: Matrix): this\n    {\n        innerRadius = innerRadius || radius / 2;\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const len = points * 2;\n        const delta = (Math.PI * 2) / len;\n        const polygon = [];\n\n        for (let i = 0; i < len; i++)\n        {\n            const r = i % 2 ? innerRadius : radius;\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (r * Math.cos(angle)),\n                y + (r * Math.sin(angle))\n            );\n        }\n\n        this.poly(polygon, true, transform);\n\n        return this;\n    }\n\n    /**\n     * Creates a copy of the current `GraphicsPath` instance. This method supports both shallow and deep cloning.\n     * A shallow clone copies the reference of the instructions array, while a deep clone creates a new array and\n     * copies each instruction individually, ensuring that modifications to the instructions of the cloned `GraphicsPath`\n     * do not affect the original `GraphicsPath` and vice versa.\n     * @param deep - A boolean flag indicating whether the clone should be deep.\n     * @returns A new `GraphicsPath` instance that is a clone of the current instance.\n     */\n    public clone(deep = false): GraphicsPath\n    {\n        const newGraphicsPath2D = new GraphicsPath();\n\n        if (!deep)\n        {\n            newGraphicsPath2D.instructions = this.instructions.slice();\n        }\n        else\n        {\n            for (let i = 0; i < this.instructions.length; i++)\n            {\n                const instruction = this.instructions[i];\n\n                newGraphicsPath2D.instructions.push({ action: instruction.action, data: instruction.data.slice() });\n            }\n        }\n\n        return newGraphicsPath2D;\n    }\n\n    public clear(): this\n    {\n        this.instructions.length = 0;\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Applies a transformation matrix to all drawing instructions within the `GraphicsPath`.\n     * This method enables the modification of the path's geometry according to the provided\n     * transformation matrix, which can include translations, rotations, scaling, and skewing.\n     *\n     * Each drawing instruction in the path is updated to reflect the transformation,\n     * ensuring the visual representation of the path is consistent with the applied matrix.\n     *\n     * Note: The transformation is applied directly to the coordinates and control points of the drawing instructions,\n     * not to the path as a whole. This means the transformation's effects are baked into the individual instructions,\n     * allowing for fine-grained control over the path's appearance.\n     * @param matrix - A `Matrix` object representing the transformation to apply.\n     * @returns The instance of the current object for chaining further operations.\n     */\n    public transform(matrix: Matrix): this\n    {\n        if (matrix.isIdentity()) return this;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let x = 0;\n        let y = 0;\n\n        let cpx1 = 0;\n        let cpy1 = 0;\n        let cpx2 = 0;\n        let cpy2 = 0;\n\n        let rx = 0;\n        let ry = 0;\n\n        for (let i = 0; i < this.instructions.length; i++)\n        {\n            const instruction = this.instructions[i];\n            const data = instruction.data as any[];\n\n            switch (instruction.action)\n            {\n                case 'moveTo':\n                case 'lineTo':\n\n                    x = data[0];\n                    y = data[1];\n\n                    data[0] = (a * x) + (c * y) + tx;\n                    data[1] = (b * x) + (d * y) + ty;\n                    break;\n                case 'bezierCurveTo':\n\n                    cpx1 = data[0];\n                    cpy1 = data[1];\n                    cpx2 = data[2];\n                    cpy2 = data[3];\n\n                    x = data[4];\n                    y = data[5];\n\n                    data[0] = (a * cpx1) + (c * cpy1) + tx;\n                    data[1] = (b * cpx1) + (d * cpy1) + ty;\n                    data[2] = (a * cpx2) + (c * cpy2) + tx;\n                    data[3] = (b * cpx2) + (d * cpy2) + ty;\n                    data[4] = (a * x) + (c * y) + tx;\n                    data[5] = (b * x) + (d * y) + ty;\n                    break;\n\n                case 'quadraticCurveTo':\n\n                    cpx1 = data[0];\n                    cpy1 = data[1];\n\n                    x = data[2];\n                    y = data[3];\n\n                    data[0] = (a * cpx1) + (c * cpy1) + tx;\n                    data[1] = (b * cpx1) + (d * cpy1) + ty;\n\n                    data[2] = (a * x) + (c * y) + tx;\n                    data[3] = (b * x) + (d * y) + ty;\n\n                    break;\n\n                case 'arcToSvg':\n\n                    x = data[5];\n                    y = data[6];\n\n                    rx = data[0];\n                    ry = data[1];\n\n                    // multiply the radius by the transform..\n\n                    data[0] = (a * rx) + (c * ry);\n                    data[1] = (b * rx) + (d * ry);\n\n                    data[5] = (a * x) + (c * y) + tx;\n                    data[6] = (b * x) + (d * y) + ty;\n\n                    break;\n\n                case 'circle':\n                    data[4] = adjustTransform(data[3], matrix);\n                    break;\n                case 'rect':\n                    data[4] = adjustTransform(data[4], matrix);\n                    break;\n                case 'ellipse':\n                    data[8] = adjustTransform(data[8], matrix);\n                    break;\n                case 'roundRect':\n                    data[5] = adjustTransform(data[5], matrix);\n                    break;\n                case 'addPath':\n                    data[0].transform(matrix);\n                    break;\n                case 'poly':\n                    data[2] = adjustTransform(data[2], matrix);\n                    break;\n                default:\n                    // #if _DEBUG\n                    warn('unknown transform action', instruction.action);\n                    // #endif\n                    break;\n            }\n        }\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    get bounds(): Bounds\n    {\n        return this.shapePath.bounds;\n    }\n\n    /**\n     * Retrieves the last point from the current drawing instructions in the `GraphicsPath`.\n     * This method is useful for operations that depend on the path's current endpoint,\n     * such as connecting subsequent shapes or paths. It supports various drawing instructions,\n     * ensuring the last point's position is accurately determined regardless of the path's complexity.\n     *\n     * If the last instruction is a `closePath`, the method iterates backward through the instructions\n     *  until it finds an actionable instruction that defines a point (e.g., `moveTo`, `lineTo`,\n     * `quadraticCurveTo`, etc.). For compound paths added via `addPath`, it recursively retrieves\n     * the last point from the nested path.\n     * @param out - A `Point` object where the last point's coordinates will be stored.\n     * This object is modified directly to contain the result.\n     * @returns The `Point` object containing the last point's coordinates.\n     */\n    public getLastPoint(out: Point): Point\n    {\n        let index = this.instructions.length - 1;\n\n        let lastInstruction = this.instructions[index];\n\n        if (!lastInstruction)\n        {\n            out.x = 0;\n            out.y = 0;\n\n            return out;\n        }\n\n        while (lastInstruction.action === 'closePath')\n        {\n            index--;\n\n            if (index < 0)\n            {\n                out.x = 0;\n                out.y = 0;\n\n                return out;\n            }\n\n            lastInstruction = this.instructions[index];\n        }\n\n        switch (lastInstruction.action)\n        {\n            case 'moveTo':\n            case 'lineTo':\n                out.x = lastInstruction.data[0];\n                out.y = lastInstruction.data[1];\n                break;\n            case 'quadraticCurveTo':\n                out.x = lastInstruction.data[2];\n                out.y = lastInstruction.data[3];\n                break;\n            case 'bezierCurveTo':\n                out.x = lastInstruction.data[4];\n                out.y = lastInstruction.data[5];\n                break;\n            case 'arc':\n            case 'arcToSvg':\n                out.x = lastInstruction.data[5];\n                out.y = lastInstruction.data[6];\n                break;\n            case 'addPath':\n                // TODO prolly should transform the last point of the path\n                lastInstruction.data[0].getLastPoint(out);\n                break;\n        }\n\n        return out;\n    }\n}\n\nfunction adjustTransform(currentMatrix?: Matrix, transform?: Matrix): Matrix\n{\n    if (currentMatrix)\n    {\n        return currentMatrix.prepend(transform);\n    }\n\n    return transform.clone();\n}\n",null,"/* eslint-disable no-console */\nimport parse from 'parse-svg-path';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { GraphicsPath } from '../path/GraphicsPath';\n\ninterface SubPath\n{\n    startX: number;\n    startY: number;\n}\n\n// TODO optimise and cache the paths?\nexport function SVGToGraphicsPath(svgPath: string, path: GraphicsPath): GraphicsPath\n{\n    const commands = parse(svgPath);\n\n    const subpaths: SubPath[] = [];\n    let currentSubPath: SubPath | null = null;\n\n    let lastX = 0;\n    let lastY = 0;\n\n    for (let i = 0; i < commands.length; i++)\n    {\n        const command = commands[i];\n        const type = command[0];\n        const data = command; // alias for 1-based referencing\n\n        switch (type)\n        {\n            case 'M':\n                lastX = data[1];\n                lastY = data[2];\n\n                path.moveTo(lastX, lastY);\n                break;\n            case 'm':\n\n                lastX += data[1];\n                lastY += data[2];\n\n                path.moveTo(lastX, lastY);\n                break;\n            case 'H':\n                lastX = data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'h':\n                lastX += data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'V':\n                lastY = data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'v':\n                lastY += data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'L':\n                lastX = data[1];\n                lastY = data[2];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'l':\n                lastX += data[1];\n                lastY += data[2];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'C':\n\n                lastX = data[5];\n                lastY = data[6];\n\n                path.bezierCurveTo(\n                    data[1], data[2],\n                    data[3], data[4],\n                    lastX, lastY\n                );\n                break;\n            case 'c':\n                path.bezierCurveTo(\n                    lastX + data[1], lastY + data[2],\n                    lastX + data[3], lastY + data[4],\n                    lastX + data[5], lastY + data[6]\n                );\n\n                lastX += data[5];\n                lastY += data[6];\n                break;\n            case 'S':\n                lastX = data[3];\n                lastY = data[4];\n\n                path.bezierCurveToShort(\n                    data[1], data[2],\n                    lastX, lastY\n                );\n                break;\n            case 's':\n                path.bezierCurveToShort(\n                    lastX + data[1], lastY + data[2],\n                    lastX + data[3], lastY + data[4],\n                );\n\n                lastX += data[3];\n                lastY += data[4];\n                break;\n            case 'Q':\n                lastX = data[3];\n                lastY = data[4];\n\n                path.quadraticCurveTo(\n                    data[1], data[2],\n                    lastX, lastY\n                );\n                break;\n            case 'q':\n                path.quadraticCurveTo(\n                    lastX + data[1], lastY + data[2],\n                    lastX + data[3], lastY + data[4]\n                );\n\n                lastX += data[3];\n                lastY += data[4];\n                break;\n            case 'T':\n                lastX = data[1];\n                lastY = data[2];\n\n                path.quadraticCurveToShort(\n                    lastX, lastY\n                );\n                break;\n            case 't':\n                lastX += data[1];\n                lastY += data[2];\n\n                path.quadraticCurveToShort(\n                    lastX, lastY\n                );\n                break;\n            case 'A':\n                lastX = data[6];\n                lastY = data[7];\n\n                path.arcToSvg(\n                    data[1],\n                    data[2],\n                    data[3],\n                    data[4],\n                    data[5],\n                    lastX, lastY\n                );\n                break;\n            case 'a':\n                lastX += data[6];\n                lastY += data[7];\n\n                path.arcToSvg(\n                    data[1],\n                    data[2],\n                    data[3],\n                    data[4],\n                    data[5],\n                    lastX, lastY\n                );\n                break;\n            case 'Z':\n            case 'z':\n                path.closePath();\n                if (subpaths.length > 0)\n                {\n                    currentSubPath = subpaths.pop();\n                    if (currentSubPath)\n                    {\n                        lastX = currentSubPath.startX;\n                        lastY = currentSubPath.startY;\n                    }\n                    else\n                    {\n                        lastX = 0;\n                        lastY = 0;\n                    }\n                }\n                currentSubPath = null;\n                break;\n            default:\n                // #if _DEBUG\n                warn(`Unknown SVG path command: ${type}`);\n                // #endif\n        }\n\n        if (type !== 'Z' && type !== 'z')\n        {\n            if (currentSubPath === null)\n            {\n                currentSubPath = { startX: lastX, startY: lastY };\n                subpaths.push(currentSubPath);\n            }\n        }\n    }\n\n    return path;\n}\n","\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n",null,"// a shape lets you build out a shape with lines and curves and primitives..\n\nimport { Circle } from '../../../../maths/shapes/Circle';\nimport { Ellipse } from '../../../../maths/shapes/Ellipse';\nimport { Polygon } from '../../../../maths/shapes/Polygon';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { RoundedRectangle } from '../../../../maths/shapes/RoundedRectangle';\nimport { Bounds } from '../../../container/bounds/Bounds';\nimport { buildAdaptiveBezier } from '../buildCommands/buildAdaptiveBezier';\nimport { buildAdaptiveQuadratic } from '../buildCommands/buildAdaptiveQuadratic';\nimport { buildArc } from '../buildCommands/buildArc';\nimport { buildArcTo } from '../buildCommands/buildArcTo';\nimport { buildArcToSvg } from '../buildCommands/buildArcToSvg';\nimport { roundedShapeArc, roundedShapeQuadraticCurve } from './roundShape';\n\nimport type { Matrix } from '../../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { ShapePrimitive } from '../../../../maths/shapes/ShapePrimitive';\nimport type { GraphicsPath } from './GraphicsPath';\nimport type { RoundedPoint } from './roundShape';\n\nconst tempRectangle = new Rectangle();\n\n/**\n * The `ShapePath` class acts as a bridge between high-level drawing commands\n * and the lower-level `GraphicsContext` rendering engine.\n * It translates drawing commands, such as those for creating lines, arcs, ellipses, rectangles, and complex polygons, into a\n * format that can be efficiently processed by a `GraphicsContext`. This includes handling path starts,\n * ends, and transformations for shapes.\n *\n * It is used internally by `GraphicsPath` to build up the path.\n * @memberof scene\n */\nexport class ShapePath\n{\n    /** The list of shape primitives that make up the path. */\n    public shapePrimitives: { shape: ShapePrimitive, transform?: Matrix }[] = [];\n    private _currentPoly: Polygon | null = null;\n    private readonly _graphicsPath2D: GraphicsPath;\n    private readonly _bounds = new Bounds();\n\n    constructor(graphicsPath2D: GraphicsPath)\n    {\n        this._graphicsPath2D = graphicsPath2D;\n    }\n\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this.startPoly(x, y);\n\n        return this;\n    }\n\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this\n    {\n        this._ensurePoly();\n\n        const points = this._currentPoly.points;\n\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path. The arc is centered at (x, y)\n     *  position with radius `radius` starting at `startAngle` and ending at `endAngle`.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The radius of the arc.\n     * @param startAngle - The starting angle of the arc, in radians.\n     * @param endAngle - The ending angle of the arc, in radians.\n     * @param counterclockwise - Specifies whether the arc should be drawn in the anticlockwise direction. False by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise: boolean): this\n    {\n        // TODO - if its 360 degrees.. make it a circle object?\n\n        this._ensurePoly(false);\n\n        const points = this._currentPoly.points;\n\n        buildArc(points, x, y, radius, startAngle, endAngle, counterclockwise);\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path with the arc tangent to the line joining two specified points.\n     * The arc radius is specified by `radius`.\n     * @param x1 - The x-coordinate of the first point.\n     * @param y1 - The y-coordinate of the first point.\n     * @param x2 - The x-coordinate of the second point.\n     * @param y2 - The y-coordinate of the second point.\n     * @param radius - The radius of the arc.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._ensurePoly();\n\n        const points = this._currentPoly.points;\n\n        buildArcTo(points, x1, y1, x2, y2, radius);\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcToSvg(\n        rx: number, ry: number,\n        xAxisRotation: number, largeArcFlag: number, sweepFlag: number,\n        x: number, y: number\n    ): this\n    {\n        const points = this._currentPoly.points;\n\n        // this needs to work on both canvas and GPU backends so might want to move this to the Graphics2D path..\n        buildArcToSvg(\n            points,\n            this._currentPoly.lastX,\n            this._currentPoly.lastY,\n            x,\n            y,\n            rx,\n            ry,\n            xAxisRotation,\n            largeArcFlag,\n            sweepFlag,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number,\n        x: number, y: number,\n        smoothness?: number\n    ): this\n    {\n        this._ensurePoly();\n\n        const currentPoly = this._currentPoly;\n\n        // ensure distance from last point to first control point is not too small\n\n        // TODO - make this a plugin that people can override..\n        buildAdaptiveBezier(\n            this._currentPoly.points,\n            currentPoly.lastX, currentPoly.lastY,\n            cp1x, cp1y, cp2x, cp2y, x, y,\n            smoothness,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the control point.\n     * @param cp1y - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothing - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cp1x: number, cp1y: number, x: number, y: number, smoothing?: number): this\n    {\n        this._ensurePoly();\n\n        const currentPoly = this._currentPoly;\n\n        // ensure distance from last point to first control point is not too small\n\n        // TODO - make this a plugin that people can override..\n        buildAdaptiveQuadratic(\n            this._currentPoly.points,\n            currentPoly.lastX, currentPoly.lastY,\n            cp1x, cp1y, x, y,\n            smoothing,\n        );\n\n        return this;\n    }\n\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        this.endPoly(true);\n\n        return this;\n    }\n\n    /**\n     * Adds another path to the current path. This method allows for the combination of multiple paths into one.\n     * @param path - The `GraphicsPath` object representing the path to add.\n     * @param transform - An optional `Matrix` object to apply a transformation to the path before adding it.\n     * @returns The instance of the current object for chaining.\n     */\n    public addPath(path: GraphicsPath, transform?: Matrix): this\n    {\n        this.endPoly();\n\n        if (transform && !transform.isIdentity())\n        {\n            path = path.clone(true);\n            path.transform(transform);\n        }\n\n        for (let i = 0; i < path.instructions.length; i++)\n        {\n            const instruction = path.instructions[i];\n\n            // Sorry TS! this is the best we could do...\n            this[instruction.action](...(instruction.data as [never, never, never, never, never, never, never]));\n            // build out the path points\n        }\n\n        return this;\n    }\n\n    /**\n     * Finalizes the drawing of the current path. Optionally, it can close the path.\n     * @param closePath - A boolean indicating whether to close the path after finishing. False by default.\n     */\n    public finish(closePath = false)\n    {\n        this.endPoly(closePath);\n    }\n\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number, transform?: Matrix): this\n    {\n        this.drawShape(new Rectangle(x, y, w, h), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number, transform?: Matrix): this\n    {\n        this.drawShape(new Circle(x, y, radius), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon shape. This method allows for the creation of complex polygons by specifying a sequence of points.\n     * @param points - An array of numbers, or or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n     * representing the x and y coordinates of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public poly(points: number[] | PointData[], close?: boolean, transform?: Matrix): this\n    {\n        const polygon = new Polygon(points);\n\n        polygon.closePath = close;\n\n        this.drawShape(polygon, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation = 0, transform?: Matrix): this\n    {\n        sides = Math.max(sides | 0, 3);\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const delta = (Math.PI * 2) / sides;\n        const polygon = [];\n\n        for (let i = 0; i < sides; i++)\n        {\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (radius * Math.cos(angle)),\n                y + (radius * Math.sin(angle))\n            );\n        }\n\n        this.poly(polygon, true, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param smoothness - Optional parameter to adjust the smoothness of the rounding.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(\n        x: number, y: number,\n        radius: number,\n        sides: number, corner: number,\n        rotation = 0,\n        smoothness?: number,\n    ): this\n    {\n        sides = Math.max((sides | 0), 3);\n\n        if (corner <= 0)\n        {\n            return this.regularPoly(x, y, radius, sides, rotation);\n        }\n\n        const sideLength = (radius * Math.sin(Math.PI / sides)) - 0.001;\n\n        corner = Math.min(corner, sideLength);\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const delta = (Math.PI * 2) / sides;\n        const internalAngle = ((sides - 2) * Math.PI) / sides / 2;\n\n        for (let i = 0; i < sides; i++)\n        {\n            const angle = (i * delta) + startAngle;\n            const x0 = x + (radius * Math.cos(angle));\n            const y0 = y + (radius * Math.sin(angle));\n            const a1 = angle + (Math.PI) + internalAngle;\n            const a2 = angle - (Math.PI) - internalAngle;\n            const x1 = x0 + (corner * Math.cos(a1));\n            const y1 = y0 + (corner * Math.sin(a1));\n            const x3 = x0 + (corner * Math.cos(a2));\n            const y3 = y0 + (corner * Math.sin(a2));\n\n            if (i === 0)\n            {\n                this.moveTo(x1, y1);\n            }\n            else\n            {\n                this.lineTo(x1, y1);\n            }\n            this.quadraticCurveTo(x0, y0, x3, y3, smoothness);\n        }\n\n        return this.closePath();\n    }\n\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic = false, smoothness?: number): this\n    {\n        if (points.length < 3)\n        {\n            return this;\n        }\n\n        if (useQuadratic)\n        {\n            roundedShapeQuadraticCurve(this, points, radius, smoothness);\n        }\n        else\n        {\n            roundedShapeArc(this, points, radius);\n        }\n\n        return this.closePath();\n    }\n\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this\n    {\n        if (fillet === 0)\n        {\n            return this.rect(x, y, width, height);\n        }\n\n        const maxFillet = Math.min(width, height) / 2;\n        const inset = Math.min(maxFillet, Math.max(-maxFillet, fillet));\n        const right = x + width;\n        const bottom = y + height;\n        const dir = inset < 0 ? -inset : 0;\n        const size = Math.abs(inset);\n\n        return this\n            .moveTo(x, y + size)\n            .arcTo(x + dir, y + dir, x + size, y, size)\n            .lineTo(right - size, y)\n            .arcTo(right - dir, y + dir, right, y + size, size)\n            .lineTo(right, bottom - size)\n            .arcTo(right - dir, bottom - dir, x + width - size, bottom, size)\n            .lineTo(x + size, bottom)\n            .arcTo(x + dir, bottom - dir, x, bottom - size, size)\n            .closePath();\n    }\n\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this\n    {\n        if (chamfer <= 0)\n        {\n            return this.rect(x, y, width, height);\n        }\n\n        const inset = Math.min(chamfer, Math.min(width, height) / 2);\n        const right = x + width;\n        const bottom = y + height;\n        const points = [\n            x + inset, y,\n            right - inset, y,\n            right, y + inset,\n            right, bottom - inset,\n            right - inset, bottom,\n            x + inset, bottom,\n            x, bottom - inset,\n            x, y + inset,\n        ];\n\n        // Remove overlapping points\n        for (let i = points.length - 1; i >= 2; i -= 2)\n        {\n            if (points[i] === points[i - 2] && points[i - 1] === points[i - 3])\n            {\n                points.splice(i - 1, 2);\n            }\n        }\n\n        return this.poly(points, true, transform);\n    }\n\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @param transform - An optional `Matrix` object to apply a transformation to the ellipse. This can include rotations.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number, transform?: Matrix): this\n    {\n        // TODO apply rotation to transform...\n\n        this.drawShape(new Ellipse(x, y, radiusX, radiusY), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number, transform?: Matrix): this\n    {\n        this.drawShape(new RoundedRectangle(x, y, w, h, radius), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a given shape on the canvas.\n     * This is a generic method that can draw any type of shape specified by the `ShapePrimitive` parameter.\n     * An optional transformation matrix can be applied to the shape, allowing for complex transformations.\n     * @param shape - The shape to draw, defined as a `ShapePrimitive` object.\n     * @param matrix - An optional `Matrix` for transforming the shape. This can include rotations,\n     * scaling, and translations.\n     * @returns The instance of the current object for chaining.\n     */\n    public drawShape(shape: ShapePrimitive, matrix?: Matrix): this\n    {\n        this.endPoly();\n\n        this.shapePrimitives.push({ shape, transform: matrix });\n\n        return this;\n    }\n\n    /**\n     * Starts a new polygon path from the specified starting point.\n     * This method initializes a new polygon or ends the current one if it exists.\n     * @param x - The x-coordinate of the starting point of the new polygon.\n     * @param y - The y-coordinate of the starting point of the new polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public startPoly(x: number, y: number): this\n    {\n        let currentPoly = this._currentPoly;\n\n        if (currentPoly)\n        {\n            this.endPoly();\n        }\n\n        currentPoly = new Polygon();\n\n        currentPoly.points.push(x, y);\n\n        this._currentPoly = currentPoly;\n\n        return this;\n    }\n\n    /**\n     * Ends the current polygon path. If `closePath` is set to true,\n     * the path is closed by connecting the last point to the first one.\n     * This method finalizes the current polygon and prepares it for drawing or adding to the shape primitives.\n     * @param closePath - A boolean indicating whether to close the polygon by connecting the last point\n     *  back to the starting point. False by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public endPoly(closePath = false): this\n    {\n        const shape = this._currentPoly;\n\n        if (shape && shape.points.length > 2)\n        {\n            shape.closePath = closePath;\n\n            this.shapePrimitives.push({ shape });\n        }\n\n        this._currentPoly = null;\n\n        return this;\n    }\n\n    private _ensurePoly(start = true): void\n    {\n        if (this._currentPoly) return;\n\n        this._currentPoly = new Polygon();\n\n        if (start)\n        {\n            // get last points..\n            const lastShape = this.shapePrimitives[this.shapePrimitives.length - 1];\n\n            if (lastShape)\n            {\n                // i KNOW its a rect..\n                let lx = lastShape.shape.x;\n                let ly = lastShape.shape.y;\n\n                if (!lastShape.transform.isIdentity())\n                {\n                    const t = lastShape.transform;\n\n                    const tempX = lx;\n\n                    lx = (t.a * lx) + (t.c * ly) + t.tx;\n                    ly = (t.b * tempX) + (t.d * ly) + t.ty;\n                }\n\n                this._currentPoly.points.push(lx, ly);\n            }\n            else\n            {\n                this._currentPoly.points.push(0, 0);\n            }\n        }\n    }\n\n    /** Builds the path. */\n    public buildPath()\n    {\n        const path = this._graphicsPath2D;\n\n        this.shapePrimitives.length = 0;\n        this._currentPoly = null;\n\n        for (let i = 0; i < path.instructions.length; i++)\n        {\n            const instruction = path.instructions[i];\n\n            // Sorry TS! this is the best we could do...\n            this[instruction.action](...(instruction.data as [never, never, never, never, never, never, never]));\n        }\n\n        this.finish();\n    }\n\n    /** Gets the bounds of the path. */\n    get bounds(): Bounds\n    {\n        const bounds = this._bounds;\n\n        bounds.clear();\n\n        const shapePrimitives = this.shapePrimitives;\n\n        for (let i = 0; i < shapePrimitives.length; i++)\n        {\n            const shapePrimitive = shapePrimitives[i];\n\n            const boundsRect = shapePrimitive.shape.getBounds(tempRectangle);\n\n            if (shapePrimitive.transform)\n            {\n                bounds.addRect(boundsRect, shapePrimitive.transform);\n            }\n            else\n            {\n                bounds.addRect(boundsRect);\n            }\n        }\n\n        return bounds;\n    }\n}\n",null,"import { Rectangle } from './Rectangle';\n\nimport type { SHAPE_PRIMITIVE } from '../misc/const';\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for containers.\n * @memberof maths\n */\nexport class Circle implements ShapePrimitive\n{\n    /**\n     * The X coordinate of the center of this circle\n     * @default 0\n     */\n    public x: number;\n\n    /**\n     * The Y coordinate of the center of this circle\n     * @default 0\n     */\n    public y: number;\n\n    /**\n     * The radius of the circle\n     *  @default 0\n     */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'circle'\n     */\n    public readonly type: SHAPE_PRIMITIVE = 'circle';\n\n    /**\n     * @param x - The X coordinate of the center of this circle\n     * @param y - The Y coordinate of the center of this circle\n     * @param radius - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     * @returns A copy of the Circle\n     */\n    public clone(): Circle\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    public contains(x: number, y: number): boolean\n    {\n        if (this.radius <= 0) return false;\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle including the stroke.\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @param width - The width of the line to check\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    public strokeContains(x: number, y: number, width: number): boolean\n    {\n        if (this.radius === 0) return false;\n\n        const dx = (this.x - x);\n        const dy = (this.y - y);\n        const r = this.radius;\n        const w2 = width / 2;\n        const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n        return (distance < r + w2 && distance > r - w2);\n    }\n\n    /**\n     * Returns the framing rectangle of the circle as a Rectangle object\n     * @param out\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out = out || new Rectangle();\n\n        out.x = this.x - this.radius;\n        out.y = this.y - this.radius;\n        out.width = this.radius * 2;\n        out.height = this.radius * 2;\n\n        return out;\n    }\n\n    /**\n     * Copies another circle to this one.\n     * @param circle - The circle to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(circle: Circle): this\n    {\n        this.x = circle.x;\n        this.y = circle.y;\n        this.radius = circle.radius;\n\n        return this;\n    }\n\n    /**\n     * Copies this circle to another one.\n     * @param circle - The circle to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(circle: Circle): Circle\n    {\n        circle.copyFrom(this);\n\n        return circle;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n    }\n    // #endif\n}\n",null,"import { Rectangle } from './Rectangle';\n\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for containers.\n * ```js\n * import { Ellipse } from 'pixi.js';\n *\n * const ellipse = new Ellipse(0, 0, 20, 10); // 40x20 rectangle\n * const isPointInEllipse = ellipse.contains(0, 0); // true\n * ```\n * @memberof maths\n */\nexport class Ellipse implements ShapePrimitive\n{\n    /**\n     * The X coordinate of the center of this ellipse\n     * @default 0\n     */\n    public x: number;\n\n    /**\n     * The Y coordinate of the center of this ellipse\n     * @default 0\n     */\n    public y: number;\n\n    /**\n     * The half width of this ellipse\n     * @default 0\n     */\n    public halfWidth: number;\n\n    /**\n     * The half height of this ellipse\n     * @default 0\n     */\n    public halfHeight: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'ellipse'\n     */\n    public readonly type = 'ellipse';\n\n    /**\n     * @param x - The X coordinate of the center of this ellipse\n     * @param y - The Y coordinate of the center of this ellipse\n     * @param halfWidth - The half width of this ellipse\n     * @param halfHeight - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.halfWidth = halfWidth;\n        this.halfHeight = halfHeight;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     * @returns {Ellipse} A copy of the ellipse\n     */\n    public clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.halfWidth, this.halfHeight);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    public contains(x: number, y: number): boolean\n    {\n        if (this.halfWidth <= 0 || this.halfHeight <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.halfWidth);\n        let normy = ((y - this.y) / this.halfHeight);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse including stroke\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @param width\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    public strokeContains(x: number, y: number, width: number): boolean\n    {\n        const { halfWidth, halfHeight } = this;\n\n        if (halfWidth <= 0 || halfHeight <= 0)\n        {\n            return false;\n        }\n\n        const halfStrokeWidth = width / 2;\n        const innerA = halfWidth - halfStrokeWidth;\n        const innerB = halfHeight - halfStrokeWidth;\n        const outerA = halfWidth + halfStrokeWidth;\n        const outerB = halfHeight + halfStrokeWidth;\n\n        const normalizedX = x - this.x;\n        const normalizedY = y - this.y;\n\n        const innerEllipse = ((normalizedX * normalizedX) / (innerA * innerA))\n                           + ((normalizedY * normalizedY) / (innerB * innerB));\n        const outerEllipse = ((normalizedX * normalizedX) / (outerA * outerA))\n                           + ((normalizedY * normalizedY) / (outerB * outerB));\n\n        return innerEllipse > 1 && outerEllipse <= 1;\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     * @returns The framing rectangle\n     */\n    public getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.halfWidth, this.y - this.halfHeight, this.halfWidth * 2, this.halfHeight * 2);\n    }\n\n    /**\n     * Copies another ellipse to this one.\n     * @param ellipse - The ellipse to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(ellipse: Ellipse): this\n    {\n        this.x = ellipse.x;\n        this.y = ellipse.y;\n        this.halfWidth = ellipse.halfWidth;\n        this.halfHeight = ellipse.halfHeight;\n\n        return this;\n    }\n\n    /**\n     * Copies this ellipse to another one.\n     * @param ellipse - The ellipse to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(ellipse: Ellipse): Ellipse\n    {\n        ellipse.copyFrom(this);\n\n        return ellipse;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`;\n    }\n    // #endif\n}\n",null,"import { squaredDistanceToLineSegment } from '../misc/squaredDistanceToLineSegment';\nimport { Rectangle } from './Rectangle';\n\nimport type { SHAPE_PRIMITIVE } from '../misc/const';\nimport type { PointData } from '../point/PointData';\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n/**\n * A class to define a shape via user defined coordinates.\n *\n *\n * `Polygon` can accept the following different constructor arguments:\n * - An array of `Point` objects\n * - An array of coordinate pairs\n *\n *\n * These can be passed as a single array, or as a sequence of arguments.\n * ```js\n * import { Polygon } from 'pixi.js';\n *\n * // create a polygon object from an array of points, or an array of coordinate pairs\n * const polygon1 = new Polygon([ new Point(0, 0), new Point(0, 100), new Point(100, 100) ]);\n * const polygon2 = new Polygon([ 0, 0, 0, 100, 100, 100 ]);\n *\n * // or create a polygon object from a sequence of points, or coordinate pairs\n * const polygon3 = new Polygon(new Point(0, 0), new Point(0, 100), new Point(100, 100));\n * const polygon4 = new Polygon(0, 0, 0, 100, 100, 100);\n * ```\n * @memberof maths\n */\nexport class Polygon implements ShapePrimitive\n{\n    /** An array of the points of this polygon. */\n    public points: number[];\n\n    /** `false` after moveTo, `true` after `closePath`. In all other cases it is `true`. */\n    public closePath: boolean;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'polygon'\n     */\n    public readonly type: SHAPE_PRIMITIVE = 'polygon';\n\n    constructor(points: PointData[] | number[]);\n    constructor(...points: PointData[] | number[]);\n    /**\n     * @param points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: (PointData[] | number[])[] | PointData[] | number[])\n    {\n        let flat = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as PointData).x, (flat[i] as PointData).y);\n            }\n\n            flat = p;\n        }\n\n        this.points = flat as number[];\n\n        this.closePath = true;\n    }\n\n    /**\n     * Creates a clone of this polygon.\n     * @returns - A copy of the polygon.\n     */\n    public clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closePath = this.closePath;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this polygon.\n     */\n    public contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this polygon including the stroke.\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @param strokeWidth - The width of the line to check\n     * @returns Whether the x/y coordinates are within this polygon\n     */\n    public strokeContains(x: number, y: number, strokeWidth: number): boolean\n    {\n        const halfStrokeWidth = strokeWidth / 2;\n        const halfStrokeWidthSqrd = halfStrokeWidth * halfStrokeWidth;\n        const { points } = this;\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            const x1 = points[i];\n            const y1 = points[i + 1];\n            const x2 = points[(i + 2) % points.length];\n            const y2 = points[(i + 3) % points.length];\n\n            const distanceSqrd = squaredDistanceToLineSegment(x, y, x1, y1, x2, y2);\n\n            if (distanceSqrd <= halfStrokeWidthSqrd)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns the framing rectangle of the polygon as a Rectangle object\n     * @param out - optional rectangle to store the result\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out = out || new Rectangle();\n\n        const points = this.points;\n\n        let minX = Infinity;\n        let maxX = -Infinity;\n\n        let minY = Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0, n = points.length; i < n; i += 2)\n        {\n            const x = points[i];\n            const y = points[i + 1];\n\n            minX = x < minX ? x : minX;\n            maxX = x > maxX ? x : maxX;\n\n            minY = y < minY ? y : minY;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        out.x = minX;\n        out.width = maxX - minX;\n\n        out.y = minY;\n        out.height = maxY - minY;\n\n        return out;\n    }\n\n    /**\n     * Copies another polygon to this one.\n     * @param polygon - The polygon to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(polygon: Polygon): this\n    {\n        this.points = polygon.points.slice();\n        this.closePath = polygon.closePath;\n\n        return this;\n    }\n\n    /**\n     * Copies this polygon to another one.\n     * @param polygon - The polygon to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(polygon: Polygon): Polygon\n    {\n        polygon.copyFrom(this);\n\n        return polygon;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Polygon`\n            + `closeStroke=${this.closePath}`\n            + `points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, '')}]`;\n    }\n    // #endif\n\n    /**\n     * Get the last X coordinate of the polygon\n     * @readonly\n     */\n    get lastX(): number\n    {\n        return this.points[this.points.length - 2];\n    }\n\n    /**\n     * Get the last Y coordinate of the polygon\n     * @readonly\n     */\n    get lastY(): number\n    {\n        return this.points[this.points.length - 1];\n    }\n\n    /**\n     * Get the first X coordinate of the polygon\n     * @readonly\n     */\n    get x(): number\n    {\n        return this.points[this.points.length - 2];\n    }\n    /**\n     * Get the first Y coordinate of the polygon\n     * @readonly\n     */\n    get y(): number\n    {\n        return this.points[this.points.length - 1];\n    }\n}\n\n",null,"export function squaredDistanceToLineSegment(\n    x: number, y: number,\n    x1: number, y1: number,\n    x2: number, y2: number\n): number\n{\n    const a = x - x1;\n    const b = y - y1;\n    const c = x2 - x1;\n    const d = y2 - y1;\n\n    const dot = (a * c) + (b * d);\n    const lenSq = (c * c) + (d * d);\n    let param = -1;\n\n    if (lenSq !== 0)\n    {\n        param = dot / lenSq;\n    }\n\n    let xx; let\n        yy;\n\n    if (param < 0)\n    {\n        xx = x1;\n        yy = y1;\n    }\n    else if (param > 1)\n    {\n        xx = x2;\n        yy = y2;\n    }\n\n    else\n    {\n        xx = x1 + (param * c);\n        yy = y1 + (param * d);\n    }\n\n    const dx = x - xx;\n    const dy = y - yy;\n\n    return (dx * dx) + (dy * dy);\n}\n",null,"import { Rectangle } from './Rectangle';\n\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n// Check corner within stroke width\nconst isCornerWithinStroke = (\n    pX: number,\n    pY: number,\n    cornerX: number,\n    cornerY: number,\n    radius: number,\n    halfStrokeWidth: number\n) =>\n{\n    const dx = pX - cornerX;\n    const dy = pY - cornerY;\n    const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n    return distance >= radius - halfStrokeWidth && distance <= radius + halfStrokeWidth;\n};\n\n/**\n * The `RoundedRectangle` object is an area defined by its position, as indicated by its top-left corner\n * point (`x`, `y`) and by its `width` and its `height`, including a `radius` property that\n * defines the radius of the rounded corners.\n * @memberof maths\n */\nexport class RoundedRectangle implements ShapePrimitive\n{\n    /**\n     * The X coordinate of the upper-left corner of the rounded rectangle\n     * @default 0\n     */\n    public x: number;\n\n    /**\n     * The Y coordinate of the upper-left corner of the rounded rectangle\n     * @default 0\n     */\n    public y: number;\n\n    /**\n     * The overall width of this rounded rectangle\n     * @default 0\n     */\n    public width: number;\n\n    /**\n     * The overall height of this rounded rectangle\n     * @default 0\n     */\n    public height: number;\n\n    /**\n     * Controls the radius of the rounded corners\n     * @default 20\n     */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'roundedRectangle'\n     */\n    public readonly type = 'roundedRectangle';\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param width - The overall width of this rounded rectangle\n     * @param height - The overall height of this rounded rectangle\n     * @param radius - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.radius = radius;\n    }\n\n    /**\n     * Returns the framing rectangle of the rounded rectangle as a Rectangle object\n     * @param out - optional rectangle to store the result\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out = out || new Rectangle();\n\n        out.x = this.x;\n        out.y = this.y;\n        out.width = this.width;\n        out.height = this.height;\n\n        return out;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle.\n     * @returns - A copy of the rounded rectangle.\n     */\n    public clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(rectangle: RoundedRectangle): this\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(rectangle: RoundedRectangle): RoundedRectangle\n    {\n        rectangle.copyFrom(this);\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n     */\n    public contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n\n                if ((y >= this.y + radius && y <= this.y + this.height - radius)\n                || (x >= this.x + radius && x <= this.x + this.width - radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + radius);\n                let dy = y - (this.y + radius);\n                const radius2 = radius * radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n     * @param pX - The X coordinate of the point to test\n     * @param pY - The Y coordinate of the point to test\n     * @param strokeWidth - The width of the line to check\n     * @returns Whether the x/y coordinates are within this rectangle\n     */\n    public strokeContains(pX: number, pY: number, strokeWidth: number): boolean\n    {\n        const { x, y, width, height, radius } = this;\n\n        const halfStrokeWidth = strokeWidth / 2;\n        const innerX = x + radius;\n        const innerY = y + radius;\n        const innerWidth = width - (radius * 2);\n        const innerHeight = height - (radius * 2);\n        const rightBound = x + width;\n        const bottomBound = y + height;\n\n        // Check if point is within the vertical edges (excluding corners)\n        if (((pX >= x - halfStrokeWidth && pX <= x + halfStrokeWidth)\n             || (pX >= rightBound - halfStrokeWidth && pX <= rightBound + halfStrokeWidth))\n            && pY >= innerY && pY <= innerY + innerHeight)\n        {\n            return true;\n        }\n\n        // Check if point is within the horizontal edges (excluding corners)\n        if (((pY >= y - halfStrokeWidth && pY <= y + halfStrokeWidth)\n             || (pY >= bottomBound - halfStrokeWidth && pY <= bottomBound + halfStrokeWidth))\n            && pX >= innerX && pX <= innerX + innerWidth)\n        {\n            return true;\n        }\n\n        // Top-left, top-right, bottom-right, bottom-left corners\n        return (\n            // Top-left\n            (pX < innerX && pY < innerY\n                && isCornerWithinStroke(pX, pY, innerX, innerY, radius, halfStrokeWidth))\n            //  top-right\n            || (pX > rightBound - radius && pY < innerY\n                && isCornerWithinStroke(pX, pY, rightBound - radius, innerY, radius, halfStrokeWidth))\n            // bottom-right\n            || (pX > rightBound - radius && pY > bottomBound - radius\n                && isCornerWithinStroke(pX, pY, rightBound - radius, bottomBound - radius, radius, halfStrokeWidth))\n            // bottom-left\n            || (pX < innerX && pY > bottomBound - radius\n                && isCornerWithinStroke(pX, pY, innerX, bottomBound - radius, radius, halfStrokeWidth)));\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}`\n            + `width=${this.width} height=${this.height} radius=${this.radius}]`;\n    }\n    // #endif\n}\n",null,"// thanks to https://github.com/mattdesl/adaptive-bezier-curve\n// for the original code!\n\nimport { GraphicsContextSystem } from '../GraphicsContextSystem';\n\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 1.19209290e-7;\nconst PATH_DISTANCE_EPSILON = 1.0;\n\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\nconst mCuspLimit = 0;\n\nexport function buildAdaptiveBezier(\n    points: number[],\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    cp2x: number, cp2y: number,\n    eX: number, eY: number,\n    smoothness?: number,\n)\n{\n    // TODO expose as a parameter\n    const scale = 1;\n    const smoothing = Math.min(\n        0.99, // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n        Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n    );\n    let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n\n    distanceTolerance *= distanceTolerance;\n    begin(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance);\n\n    return points;\n}\n\n// //// Based on:\n// //// https://github.com/pelson/antigrain/blob/master/agg-2.4/src/agg_curves.cpp\n\nfunction begin(\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    cp2x: number, cp2y: number,\n    eX: number, eY: number,\n    points: number[],\n    distanceTolerance: number\n)\n{\n    // dont need to actually ad this!\n    // points.push(sX, sY);\n    recursive(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance, 0);\n    points.push(eX, eY);\n}\n\n// eslint-disable-next-line max-params\nfunction recursive(\n    x1: number, y1: number,\n    x2: number, y2: number,\n    x3: number, y3: number,\n    x4: number, y4: number,\n    points: number[],\n    distanceTolerance: number,\n    level: number)\n{\n    if (level > RECURSION_LIMIT)\n    { return; }\n\n    const pi = Math.PI;\n\n    // Calculate all the mid-points of the line segments\n    // ----------------------\n    const x12 = (x1 + x2) / 2;\n    const y12 = (y1 + y2) / 2;\n    const x23 = (x2 + x3) / 2;\n    const y23 = (y2 + y3) / 2;\n    const x34 = (x3 + x4) / 2;\n    const y34 = (y3 + y4) / 2;\n    const x123 = (x12 + x23) / 2;\n    const y123 = (y12 + y23) / 2;\n    const x234 = (x23 + x34) / 2;\n    const y234 = (y23 + y34) / 2;\n    const x1234 = (x123 + x234) / 2;\n    const y1234 = (y123 + y234) / 2;\n\n    if (level > 0)\n    { // Enforce subdivision first time\n        // Try to approximate the full cubic curve by a single straight line\n        // ------------------\n        let dx = x4 - x1;\n        let dy = y4 - y1;\n\n        const d2 = Math.abs(((x2 - x4) * dy) - ((y2 - y4) * dx));\n        const d3 = Math.abs(((x3 - x4) * dy) - ((y3 - y4) * dx));\n\n        let da1; let da2;\n\n        if (d2 > FLT_EPSILON && d3 > FLT_EPSILON)\n        {\n            // Regular care\n            // -----------------\n            if ((d2 + d3) * (d2 + d3) <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                // If the curvature doesn't exceed the distanceTolerance value\n                // we tend to finish subdivisions.\n                // ----------------------\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle & Cusp Condition\n                // ----------------------\n                const a23 = Math.atan2(y3 - y2, x3 - x2);\n\n                da1 = Math.abs(a23 - Math.atan2(y2 - y1, x2 - x1));\n                da2 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - a23);\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n                if (da2 >= pi) da2 = (2 * pi) - da2;\n\n                if (da1 + da2 < mAngleTolerance)\n                {\n                    // Finally we can stop the recursion\n                    // ----------------------\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x2, y2);\n\n                        return;\n                    }\n\n                    if (da2 > mCuspLimit)\n                    {\n                        points.push(x3, y3);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else if (d2 > FLT_EPSILON)\n        {\n            // p1,p3,p4 are collinear, p2 is considerable\n            // ----------------------\n            if (d2 * d2 <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle Condition\n                // ----------------------\n                da1 = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n\n                if (da1 < mAngleTolerance)\n                {\n                    points.push(x2, y2);\n                    points.push(x3, y3);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x2, y2);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else if (d3 > FLT_EPSILON)\n        {\n            // p1,p2,p4 are collinear, p3 is considerable\n            // ----------------------\n            if (d3 * d3 <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle Condition\n                // ----------------------\n                da1 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y3 - y2, x3 - x2));\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n\n                if (da1 < mAngleTolerance)\n                {\n                    points.push(x2, y2);\n                    points.push(x3, y3);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x3, y3);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else\n        {\n            // Collinear case\n            // -----------------\n            dx = x1234 - ((x1 + x4) / 2);\n            dy = y1234 - ((y1 + y4) / 2);\n            if ((dx * dx) + (dy * dy) <= distanceTolerance)\n            {\n                points.push(x1234, y1234);\n\n                return;\n            }\n        }\n    }\n\n    // Continue subdivision\n    // ----------------------\n    recursive(x1, y1, x12, y12, x123, y123, x1234, y1234, points, distanceTolerance, level + 1);\n    recursive(x1234, y1234, x234, y234, x34, y34, x4, y4, points, distanceTolerance, level + 1);\n}\n\n",null,"// thanks to https://github.com/mattdesl/adaptive-quadratic-curve\n// for the original code!\n\nimport { GraphicsContextSystem } from '../GraphicsContextSystem';\n\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 1.19209290e-7;\nconst PATH_DISTANCE_EPSILON = 1.0;\n\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\n\nexport function buildAdaptiveQuadratic(\n    points: number[],\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    eX: number, eY: number,\n    smoothness?: number,\n)\n{\n    const scale = 1.0;\n    const smoothing = Math.min(\n        0.99, // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n        Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n    );\n    let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n\n    distanceTolerance *= distanceTolerance;\n    begin(sX, sY, cp1x, cp1y, eX, eY, points, distanceTolerance);\n\n    return points;\n}\n\n// //// Based on:\n// //// https://github.com/pelson/antigrain/blob/master/agg-2.4/src/agg_curves.cpp\n\nfunction begin(\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    eX: number, eY: number,\n    points: number[],\n    distanceTolerance: number\n)\n{\n    recursive(points, sX, sY, cp1x, cp1y, eX, eY, distanceTolerance, 0);\n\n    points.push(eX, eY);\n}\n\nfunction recursive(\n    points: number[],\n    x1: number, y1: number,\n    x2: number, y2: number,\n    x3: number, y3: number,\n    distanceTolerance: number,\n    level: number\n)\n{\n    if (level > RECURSION_LIMIT)\n    { return; }\n\n    const pi = Math.PI;\n\n    // Calculate all the mid-points of the line segments\n    // ----------------------\n    const x12 = (x1 + x2) / 2;\n    const y12 = (y1 + y2) / 2;\n    const x23 = (x2 + x3) / 2;\n    const y23 = (y2 + y3) / 2;\n    const x123 = (x12 + x23) / 2;\n    const y123 = (y12 + y23) / 2;\n\n    let dx = x3 - x1;\n    let dy = y3 - y1;\n    const d = Math.abs((((x2 - x3) * dy) - ((y2 - y3) * dx)));\n\n    if (d > FLT_EPSILON)\n    {\n        // Regular care\n        // -----------------\n        if (d * d <= distanceTolerance * ((dx * dx) + (dy * dy)))\n        {\n            // If the curvature doesn't exceed the distance_tolerance value\n            // we tend to finish subdivisions.\n            // ----------------------\n            if (mAngleTolerance < curveAngleToleranceEpsilon)\n            {\n                points.push(x123, y123);\n\n                return;\n            }\n\n            // Angle & Cusp Condition\n            // ----------------------\n            let da = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n\n            if (da >= pi) da = (2 * pi) - da;\n\n            if (da < mAngleTolerance)\n            {\n                // Finally we can stop the recursion\n                // ----------------------\n                points.push(x123, y123);\n\n                return;\n            }\n        }\n    }\n    else\n    {\n        // Collinear case\n        // -----------------\n        dx = x123 - ((x1 + x3) / 2);\n        dy = y123 - ((y1 + y3) / 2);\n        if ((dx * dx) + (dy * dy) <= distanceTolerance)\n        {\n            points.push(x123, y123);\n\n            return;\n        }\n    }\n\n    // Continue subdivision\n    // ----------------------\n    recursive(points, x1, y1, x12, y12, x123, y123, distanceTolerance, level + 1);\n    recursive(points, x123, y123, x23, y23, x3, y3, distanceTolerance, level + 1);\n}\n\n",null,"export function buildArc(\n    points: number[],\n    x: number, y: number,\n    radius: number,\n    start: number,\n    end: number,\n    clockwise: boolean,\n    steps?: number\n)\n{\n    // determine distance between the two angles\n    // ...probably a nicer way of writing this\n    let dist = Math.abs(start - end);\n\n    if (!clockwise && start > end)\n    {\n        dist = (2 * Math.PI) - dist;\n    }\n    else if (clockwise && end > start)\n    {\n        dist = (2 * Math.PI) - dist;\n    }\n\n    // approximate the # of steps using the cube root of the radius\n\n    steps = steps || Math.max(6, Math.floor(6 * Math.pow(radius, 1 / 3) * (dist / (Math.PI))));\n\n    // ensure we have at least 3 steps..\n    steps = Math.max(steps, 3);\n\n    let f = dist / (steps);\n    let t = start;\n\n    // modify direction\n    f *= clockwise ? -1 : 1;\n\n    for (let i = 0; i < steps + 1; i++)\n    {\n        const cs = Math.cos(t);\n        const sn = Math.sin(t);\n\n        const nx = x + (cs * radius);\n        const ny = y + (sn * radius);\n\n        points.push(nx, ny);\n\n        t += f;\n    }\n}\n",null,"import { buildArc } from './buildArc';\n\n/**\n * The arcTo() method creates an arc/curve between two tangents on the canvas.\n *\n * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n * @param points\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n * @param radius\n */\nexport function buildArcTo(\n    points: number[],\n    x1: number, y1: number,\n    x2: number, y2: number,\n    radius: number,\n): void\n{\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n\n    const a1 = fromY - y1;\n    const b1 = fromX - x1;\n    const a2 = y2 - y1;\n    const b2 = x2 - x1;\n    const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n    if (mm < 1.0e-8 || radius === 0)\n    {\n        if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n        {\n            points.push(x1, y1);\n        }\n\n        return;\n    }\n\n    const dd = (a1 * a1) + (b1 * b1);\n    const cc = (a2 * a2) + (b2 * b2);\n    const tt = (a1 * a2) + (b1 * b2);\n    const k1 = radius * Math.sqrt(dd) / mm;\n    const k2 = radius * Math.sqrt(cc) / mm;\n    const j1 = k1 * tt / dd;\n    const j2 = k2 * tt / cc;\n    const cx = (k1 * b2) + (k2 * b1);\n    const cy = (k1 * a2) + (k2 * a1);\n    const px = b1 * (k2 + j1);\n    const py = a1 * (k2 + j1);\n    const qx = b2 * (k1 + j2);\n    const qy = a2 * (k1 + j2);\n    const startAngle = Math.atan2(py - cy, px - cx);\n    const endAngle = Math.atan2(qy - cy, qx - cx);\n\n    buildArc(points,\n        (cx + x1),\n        (cy + y1),\n        radius,\n        startAngle,\n        endAngle,\n        b1 * a2 > b2 * a1\n    );\n}\n",null,"import { buildAdaptiveBezier } from './buildAdaptiveBezier';\n\nconst TAU = Math.PI * 2;\n\nconst out = {\n    centerX: 0,\n    centerY: 0,\n    ang1: 0,\n    ang2: 0\n};\n\nconst mapToEllipse = (\n    { x, y }: {x: number, y: number},\n    rx: number, ry: number,\n    cosPhi: number, sinPhi: number,\n    centerX: number, centerY: number,\n    out: {x: number, y: number}\n): {x: number, y: number} =>\n{\n    x *= rx;\n    y *= ry;\n\n    const xp = (cosPhi * x) - (sinPhi * y);\n    const yp = (sinPhi * x) + (cosPhi * y);\n\n    out.x = xp + centerX;\n    out.y = yp + centerY;\n\n    return out;\n};\n\nfunction approxUnitArc(ang1: number, ang2: number): {x: number, y: number}[]\n{\n    // If 90 degree circular arc, use a constant\n    // as derived from http://spencermortensen.com/articles/bezier-circle\n\n    const a1 = ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n\n    const a = ang2 === 1.5707963267948966 ? 0.551915024494 : a1;\n\n    const x1 = Math.cos(ang1);\n    const y1 = Math.sin(ang1);\n    const x2 = Math.cos(ang1 + ang2);\n    const y2 = Math.sin(ang1 + ang2);\n\n    return [\n        {\n            x: x1 - (y1 * a),\n            y: y1 + (x1 * a)\n        },\n        {\n            x: x2 + (y2 * a),\n            y: y2 - (x2 * a)\n        },\n        {\n            x: x2,\n            y: y2\n        }\n    ];\n}\n\nconst vectorAngle = (ux: number, uy: number, vx: number, vy: number) =>\n{\n    const sign = ((ux * vy) - (uy * vx) < 0) ? -1 : 1;\n\n    let dot = (ux * vx) + (uy * vy);\n\n    if (dot > 1)\n    {\n        dot = 1;\n    }\n\n    if (dot < -1)\n    {\n        dot = -1;\n    }\n\n    return sign * Math.acos(dot);\n};\n\nconst getArcCenter = (\n    px: number,\n    py: number,\n    cx: number,\n    cy: number,\n    rx: number,\n    ry: number,\n    largeArcFlag: number,\n    sweepFlag: number,\n    sinPhi: number,\n    cosPhi: number,\n    pxp: number,\n    pyp: number,\n    out: {\n        centerX: number,\n        centerY: number,\n        ang1: number,\n        ang2: number\n    }\n// eslint-disable-next-line max-params\n) =>\n{\n    const rxSq = Math.pow(rx, 2);\n    const rySq = Math.pow(ry, 2);\n    const pxpSq = Math.pow(pxp, 2);\n    const pypSq = Math.pow(pyp, 2);\n\n    let radicant = (rxSq * rySq) - (rxSq * pypSq) - (rySq * pxpSq);\n\n    if (radicant < 0)\n    {\n        radicant = 0;\n    }\n\n    radicant /= (rxSq * pypSq) + (rySq * pxpSq);\n    radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n\n    const centerXp = radicant * rx / ry * pyp;\n    const centerYp = radicant * -ry / rx * pxp;\n\n    const centerX = (cosPhi * centerXp) - (sinPhi * centerYp) + ((px + cx) / 2);\n    const centerY = (sinPhi * centerXp) + (cosPhi * centerYp) + ((py + cy) / 2);\n\n    const vx1 = (pxp - centerXp) / rx;\n    const vy1 = (pyp - centerYp) / ry;\n    const vx2 = (-pxp - centerXp) / rx;\n    const vy2 = (-pyp - centerYp) / ry;\n\n    const ang1 = vectorAngle(1, 0, vx1, vy1);\n    let ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n\n    if (sweepFlag === 0 && ang2 > 0)\n    {\n        ang2 -= TAU;\n    }\n\n    if (sweepFlag === 1 && ang2 < 0)\n    {\n        ang2 += TAU;\n    }\n\n    out.centerX = centerX;\n    out.centerY = centerY;\n    out.ang1 = ang1;\n    out.ang2 = ang2;\n};\n\nexport function buildArcToSvg(\n    points: number[],\n    px: number,\n    py: number,\n    cx: number,\n    cy: number,\n    rx: number,\n    ry: number,\n    xAxisRotation = 0,\n    largeArcFlag = 0,\n    sweepFlag = 0\n): void\n{\n    if (rx === 0 || ry === 0)\n    {\n        return;\n    }\n\n    const sinPhi = Math.sin(xAxisRotation * TAU / 360);\n    const cosPhi = Math.cos(xAxisRotation * TAU / 360);\n\n    const pxp = (cosPhi * (px - cx) / 2) + (sinPhi * (py - cy) / 2);\n    const pyp = (-sinPhi * (px - cx) / 2) + (cosPhi * (py - cy) / 2);\n\n    if (pxp === 0 && pyp === 0)\n    {\n        return;\n    }\n\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    const lambda = (Math.pow(pxp, 2) / Math.pow(rx, 2)) + (Math.pow(pyp, 2) / Math.pow(ry, 2));\n\n    if (lambda > 1)\n    {\n        rx *= Math.sqrt(lambda);\n        ry *= Math.sqrt(lambda);\n    }\n\n    getArcCenter(\n        px,\n        py,\n        cx,\n        cy,\n        rx,\n        ry,\n        largeArcFlag,\n        sweepFlag,\n        sinPhi,\n        cosPhi,\n        pxp,\n        pyp,\n        out\n    );\n\n    let { ang1, ang2 } = out;\n    const { centerX, centerY } = out;\n\n    // If 'ang2' == 90.0000000001, then `ratio` will devalue to\n    // 1.0000000001. This causes `segments` to be greater than one, which is an\n    // unnecessary split, and adds extra points to the bezier curve. To alleviate\n    // this issue, we round to 1.0 when the ratio is close to 1.0.\n    let ratio = Math.abs(ang2) / (TAU / 4);\n\n    if (Math.abs(1.0 - ratio) < 0.0000001)\n    {\n        ratio = 1.0;\n    }\n\n    const segments = Math.max(Math.ceil(ratio), 1);\n\n    ang2 /= segments;\n\n    let lastX = points[points.length - 2];\n    let lastY = points[points.length - 1];\n\n    const outCurvePoint = { x: 0, y: 0 };\n\n    for (let i = 0; i < segments; i++)\n    {\n        const curve = approxUnitArc(ang1, ang2);\n\n        const { x: x1, y: y1 } = mapToEllipse(curve[0], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n        const { x: x2, y: y2 } = mapToEllipse(curve[1], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n        const { x, y } = mapToEllipse(curve[2], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n\n        buildAdaptiveBezier(\n            points,\n            lastX, lastY,\n            x1, y1, x2, y2, x, y\n        );\n\n        lastX = x;\n        lastY = y;\n\n        ang1 += ang2;\n    }\n}\n",null,"import type { PointData } from '../../../../maths/point/PointData';\nimport type { ShapePath } from './ShapePath';\n\n/**\n * Typed and cleaned up version of:\n * https://stackoverflow.com/questions/44855794/html5-canvas-triangle-with-rounded-corners/44856925#44856925\n * @param g - Graphics to be drawn on.\n * @param points - Corners of the shape to draw. Minimum length is 3.\n * @param radius - Corners default radius.\n * @ignore\n */\nexport function roundedShapeArc(\n    g: ShapePath,\n    points: RoundedPoint[],\n    radius: number\n): void\n{\n    const vecFrom = (p: PointData, pp: PointData) =>\n    {\n        const x = pp.x - p.x;\n        const y = pp.y - p.y;\n        const len = Math.sqrt((x * x) + (y * y));\n        const nx = x / len;\n        const ny = y / len;\n\n        return { len, nx, ny };\n    };\n\n    const sharpCorner = (i: number, p: PointData) =>\n    {\n        if (i === 0)\n        {\n            g.moveTo(p.x, p.y);\n        }\n        else\n        {\n            g.lineTo(p.x, p.y);\n        }\n    };\n\n    let p1 = points[points.length - 1];\n\n    for (let i = 0; i < points.length; i++)\n    {\n        const p2 = points[i % points.length];\n        const pRadius = p2.radius ?? radius;\n\n        if (pRadius <= 0)\n        {\n            sharpCorner(i, p2);\n            p1 = p2;\n            continue;\n        }\n\n        const p3 = points[(i + 1) % points.length];\n        const v1 = vecFrom(p2, p1);\n        const v2 = vecFrom(p2, p3);\n\n        if (v1.len < 1e-4 || v2.len < 1e-4)\n        {\n            sharpCorner(i, p2);\n            p1 = p2;\n            continue;\n        }\n\n        let angle = Math.asin((v1.nx * v2.ny) - (v1.ny * v2.nx));\n        let radDirection = 1;\n        let drawDirection = false;\n\n        if ((v1.nx * v2.nx) - (v1.ny * -v2.ny) < 0)\n        {\n            if (angle < 0)\n            {\n                angle = Math.PI + angle;\n            }\n            else\n            {\n                angle = Math.PI - angle;\n                radDirection = -1;\n                drawDirection = true;\n            }\n        }\n        else if (angle > 0)\n        {\n            radDirection = -1;\n            drawDirection = true;\n        }\n\n        const halfAngle = angle / 2;\n\n        let cRadius: number;\n        let lenOut = Math.abs(\n            (Math.cos(halfAngle) * pRadius) / Math.sin(halfAngle)\n        );\n\n        if (lenOut > Math.min(v1.len / 2, v2.len / 2))\n        {\n            lenOut = Math.min(v1.len / 2, v2.len / 2);\n            cRadius = Math.abs((lenOut * Math.sin(halfAngle)) / Math.cos(halfAngle));\n        }\n        else\n        {\n            cRadius = pRadius;\n        }\n\n        const cX = p2.x + (v2.nx * lenOut) + (-v2.ny * cRadius * radDirection);\n        const cY = p2.y + (v2.ny * lenOut) + (v2.nx * cRadius * radDirection);\n        const startAngle = Math.atan2(v1.ny, v1.nx) + ((Math.PI / 2) * radDirection);\n        const endAngle = Math.atan2(v2.ny, v2.nx) - ((Math.PI / 2) * radDirection);\n\n        if (i === 0)\n        {\n            g.moveTo(\n                cX + (Math.cos(startAngle) * cRadius),\n                cY + (Math.sin(startAngle) * cRadius)\n            );\n        }\n\n        g.arc(cX, cY, cRadius, startAngle, endAngle, drawDirection);\n\n        p1 = p2;\n    }\n}\n\nexport type RoundedPoint = PointData & { radius?: number };\n\n/**\n * Typed and cleaned up version of:\n * https://stackoverflow.com/questions/44855794/html5-canvas-triangle-with-rounded-corners/56214413#56214413\n * @param g - Graphics to be drawn on.\n * @param points - Corners of the shape to draw. Minimum length is 3.\n * @param radius - Corners default radius.\n * @ignore\n */\nexport function roundedShapeQuadraticCurve(\n    g: ShapePath,\n    points: RoundedPoint[],\n    radius: number,\n    smoothness?: number,\n): void\n{\n    const distance = (p1: PointData, p2: PointData) =>\n        Math.sqrt(((p1.x - p2.x) ** 2) + ((p1.y - p2.y) ** 2));\n\n    const pointLerp = (p1: PointData, p2: PointData, t: number) => ({\n        x: p1.x + ((p2.x - p1.x) * t),\n        y: p1.y + ((p2.y - p1.y) * t),\n    });\n\n    const numPoints = points.length;\n\n    for (let i = 0; i < numPoints; i++)\n    {\n        const thisPoint = points[(i + 1) % numPoints];\n        const pRadius = thisPoint.radius ?? radius;\n\n        if (pRadius <= 0)\n        {\n            if (i === 0)\n            {\n                g.moveTo(thisPoint.x, thisPoint.y);\n            }\n            else\n            {\n                g.lineTo(thisPoint.x, thisPoint.y);\n            }\n\n            continue;\n        }\n\n        const lastPoint = points[i];\n        const nextPoint = points[(i + 2) % numPoints];\n\n        const lastEdgeLength = distance(lastPoint, thisPoint);\n        let start;\n\n        if (lastEdgeLength < 1e-4)\n        {\n            start = thisPoint;\n        }\n        else\n        {\n            const lastOffsetDistance = Math.min(lastEdgeLength / 2, pRadius);\n\n            start = pointLerp(\n                thisPoint,\n                lastPoint,\n                lastOffsetDistance / lastEdgeLength\n            );\n        }\n\n        const nextEdgeLength = distance(nextPoint, thisPoint);\n        let end;\n\n        if (nextEdgeLength < 1e-4)\n        {\n            end = thisPoint;\n        }\n        else\n        {\n            const nextOffsetDistance = Math.min(nextEdgeLength / 2, pRadius);\n\n            end = pointLerp(\n                thisPoint,\n                nextPoint,\n                nextOffsetDistance / nextEdgeLength\n            );\n        }\n\n        if (i === 0)\n        {\n            g.moveTo(start.x, start.y);\n        }\n        else\n        {\n            g.lineTo(start.x, start.y);\n        }\n        g.quadraticCurveTo(thisPoint.x, thisPoint.y, end.x, end.y, smoothness);\n    }\n}\n",null,"import { Color } from '../../../../color/Color';\nimport { GraphicsPath } from '../path/GraphicsPath';\n\nimport type {\n    ConvertedFillStyle,\n    ConvertedStrokeStyle,\n    FillStyle,\n    GraphicsContext,\n    StrokeStyle,\n} from '../GraphicsContext';\n\ninterface Session\n{\n    context: GraphicsContext;\n    path: GraphicsPath;\n}\n\nexport function SVGParser(\n    svg: string | SVGElement | SVGSVGElement,\n    graphicsContext?: GraphicsContext\n): GraphicsContext\n{\n    if (typeof svg === 'string')\n    {\n        const div = document.createElement('div');\n\n        div.innerHTML = svg.trim();\n        svg = div.querySelector('svg') as SVGElement;\n    }\n\n    const session = {\n        context: graphicsContext,\n        path: new GraphicsPath(),\n    };\n\n    renderChildren(svg, session, null, null);\n\n    return graphicsContext;\n}\n\nfunction renderChildren(svg: SVGElement, session: Session, fillStyle: FillStyle, strokeStyle: StrokeStyle): void\n{\n    const children = svg.children;\n\n    const { fillStyle: f1, strokeStyle: s1 } = parseStyle(svg);\n\n    if (f1 && fillStyle)\n    {\n        fillStyle = { ...fillStyle, ...f1 };\n    }\n    else if (f1)\n    {\n        fillStyle = f1;\n    }\n\n    if (s1 && strokeStyle)\n    {\n        strokeStyle = { ...strokeStyle, ...s1 };\n    }\n    else if (s1)\n    {\n        strokeStyle = s1;\n    }\n\n    session.context.fillStyle = fillStyle;\n    session.context.strokeStyle = strokeStyle;\n\n    let x;\n    let y;\n    let x1;\n    let y1;\n    let x2;\n    let y2;\n    let cx;\n    let cy;\n    let r;\n    let rx;\n    let ry;\n    let points;\n    let pointsString;\n    let d;\n    let graphicsPath;\n    let width;\n    let height;\n\n    switch (svg.nodeName.toLowerCase())\n    {\n        case 'path':\n            d = svg.getAttribute('d') as string;\n\n            graphicsPath = new GraphicsPath(d);\n\n            session.context.path(graphicsPath);\n\n            if (fillStyle) session.context.fill();\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        case 'circle':\n            cx = parseFloatAttribute(svg, 'cx', 0);\n            cy = parseFloatAttribute(svg, 'cy', 0);\n\n            r = parseFloatAttribute(svg, 'r', 0);\n\n            session.context.ellipse(cx, cy, r, r);\n\n            if (fillStyle) session.context.fill();\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        case 'rect':\n            x = parseFloatAttribute(svg, 'x', 0);\n            y = parseFloatAttribute(svg, 'y', 0);\n\n            width = parseFloatAttribute(svg, 'width', 0);\n            height = parseFloatAttribute(svg, 'height', 0);\n\n            rx = parseFloatAttribute(svg, 'rx', 0);\n            ry = parseFloatAttribute(svg, 'ry', 0);\n\n            if (rx || ry)\n            {\n                session.context.roundRect(x, y, width, height, rx || ry);\n            }\n            else\n            {\n                session.context.rect(x, y, width, height);\n            }\n\n            if (fillStyle) session.context.fill();\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        case 'ellipse':\n            cx = parseFloatAttribute(svg, 'cx', 0);\n            cy = parseFloatAttribute(svg, 'cy', 0);\n\n            rx = parseFloatAttribute(svg, 'rx', 0);\n            ry = parseFloatAttribute(svg, 'ry', 0);\n\n            session.context.beginPath();\n            session.context.ellipse(cx, cy, rx, ry); // , 0, Math.PI * 2);\n\n            if (fillStyle) session.context.fill();\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        case 'line':\n            x1 = parseFloatAttribute(svg, 'x1', 0);\n            y1 = parseFloatAttribute(svg, 'y1', 0);\n\n            x2 = parseFloatAttribute(svg, 'x2', 0);\n            y2 = parseFloatAttribute(svg, 'y2', 0);\n\n            session.context.beginPath();\n            session.context.moveTo(x1, y1);\n            session.context.lineTo(x2, y2);\n\n            if (strokeStyle) session.context.stroke();\n\n            break;\n\n        case 'polygon':\n            pointsString = svg.getAttribute('points') as string;\n\n            points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n\n            session.context.poly(points, true);\n\n            if (fillStyle) session.context.fill();\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        case 'polyline':\n            pointsString = svg.getAttribute('points') as string;\n\n            points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n\n            session.context.poly(points, false);\n\n            if (strokeStyle) session.context.stroke();\n\n            break;\n        // children will cover these two..\n        case 'g':\n        case 'svg':\n            break;\n        default: {\n            // eslint-disable-next-line no-console\n            console.info(`[SVG parser] <${svg.nodeName}> elements unsupported`);\n            break;\n        }\n    }\n\n    for (let i = 0; i < children.length; i++)\n    {\n        renderChildren(children[i] as SVGElement, session, fillStyle, strokeStyle);\n    }\n}\n\nfunction parseFloatAttribute(svg: SVGElement, id: string, defaultValue: number): number\n{\n    const value = svg.getAttribute(id) as string;\n\n    return value ? Number(value) : defaultValue;\n}\n\nfunction parseStyle(svg: SVGElement): { strokeStyle: ConvertedStrokeStyle; fillStyle: ConvertedFillStyle }\n{\n    const style = svg.getAttribute('style');\n\n    const strokeStyle: StrokeStyle = {};\n\n    const fillStyle: FillStyle = {};\n\n    let useFill = false;\n    let useStroke = false;\n\n    if (style)\n    {\n        const styleParts = style.split(';');\n\n        for (let i = 0; i < styleParts.length; i++)\n        {\n            const stylePart = styleParts[i];\n\n            const [key, value] = stylePart.split(':');\n\n            switch (key)\n            {\n                case 'stroke':\n                    if (value !== 'none')\n                    {\n                        strokeStyle.color = Color.shared.setValue(value).toNumber();\n                        useStroke = true;\n                    }\n\n                    break;\n                case 'stroke-width':\n                    strokeStyle.width = Number(value);\n                    break;\n                case 'fill':\n                    if (value !== 'none')\n                    {\n                        useFill = true;\n                        fillStyle.color = Color.shared.setValue(value).toNumber();\n                    }\n                    break;\n                case 'fill-opacity':\n                    fillStyle.alpha = Number(value);\n                    break;\n                case 'stroke-opacity':\n                    strokeStyle.alpha = Number(value);\n                    break;\n                case 'opacity':\n                    fillStyle.alpha = Number(value);\n                    strokeStyle.alpha = Number(value);\n                    break;\n            }\n        }\n    }\n    else\n    {\n        const stroke = svg.getAttribute('stroke');\n\n        if (stroke && stroke !== 'none')\n        {\n            useStroke = true;\n            strokeStyle.color = Color.shared.setValue(stroke).toNumber();\n\n            strokeStyle.width = parseFloatAttribute(svg, 'stroke-width', 1);\n        }\n\n        const fill = svg.getAttribute('fill');\n\n        if (fill && fill !== 'none')\n        {\n            useFill = true;\n            fillStyle.color = Color.shared.setValue(fill).toNumber();\n        }\n    }\n\n    return {\n        strokeStyle: useStroke ? (strokeStyle as ConvertedStrokeStyle) : null,\n        fillStyle: useFill ? (fillStyle as ConvertedFillStyle) : null,\n    };\n}\n",null,"import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { FillGradient } from '../fill/FillGradient';\nimport { FillPattern } from '../fill/FillPattern';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type {\n    ConvertedFillStyle,\n    FillStyle,\n    FillStyleInputs,\n    PatternFillStyle,\n} from '../GraphicsContext';\n\nexport function convertFillInputToFillStyle(\n    value: FillStyleInputs,\n    defaultStyle: ConvertedFillStyle\n): ConvertedFillStyle\n{\n    if (value === undefined || value === null)\n    {\n        return null;\n    }\n\n    let fillStyleToParse: ConvertedFillStyle;\n    let styleToMerge: FillStyleInputs;\n\n    if ((value as PatternFillStyle)?.fill)\n    {\n        styleToMerge = (value as PatternFillStyle).fill;\n        fillStyleToParse = { ...defaultStyle, ...(value as PatternFillStyle) };\n    }\n    else\n    {\n        styleToMerge = value;\n        fillStyleToParse = defaultStyle;\n    }\n\n    if (Color.isColorLike(styleToMerge as ColorSource))\n    {\n        const temp = Color.shared.setValue(styleToMerge as ColorSource ?? 0);\n        const opts: ConvertedFillStyle = {\n            ...fillStyleToParse,\n            color: temp.toNumber(),\n            alpha: temp.alpha === 1 ? fillStyleToParse.alpha : temp.alpha,\n            texture: Texture.WHITE,\n        };\n\n        return opts;\n    }\n    else if (styleToMerge instanceof FillPattern)\n    {\n        const pattern = styleToMerge as FillPattern;\n\n        return {\n            ...fillStyleToParse,\n            color: 0xffffff,\n            texture: pattern.texture,\n            matrix: pattern.transform,\n            fill: fillStyleToParse.fill ?? null,\n        };\n    }\n\n    // // TODO Texture\n    else if (styleToMerge instanceof FillGradient)\n    {\n        const gradient = styleToMerge as FillGradient;\n\n        gradient.buildLinearGradient();\n\n        return {\n            ...fillStyleToParse,\n            color: 0xffffff,\n            texture: gradient.texture,\n            matrix: gradient.transform,\n        };\n    }\n\n    const style: FillStyle = { ...defaultStyle, ...(value as FillStyle) };\n\n    if (style.texture)\n    {\n        if (style.texture !== Texture.WHITE)\n        {\n            const m = style.matrix?.invert() || new Matrix();\n\n            m.scale(\n                1 / style.texture.frame.width,\n                1 / style.texture.frame.height\n            );\n\n            style.matrix = m;\n        }\n\n        const sourceStyle = style.texture.source.style;\n\n        if (sourceStyle.addressMode === 'clamp-to-edge')\n        {\n            sourceStyle.addressMode = 'repeat';\n        }\n    }\n\n    const color = Color.shared.setValue(style.color);\n\n    style.alpha *= color.alpha;\n    style.color = color.toNumber();\n    style.matrix = style.matrix ? style.matrix.clone() : null; // todo: lets optimise this!\n\n    // its a regular fill style!\n    return style as ConvertedFillStyle;\n}\n",null,"import type { FillGradient } from '../../graphics/shared/fill/FillGradient';\nimport type { ConvertedFillStyle, ConvertedStrokeStyle } from '../../graphics/shared/GraphicsContext';\nimport type { TextStyle } from '../TextStyle';\n\nconst valuesToIterateForKeys = [\n    '_fontFamily',\n    '_fontStyle',\n    '_fontSize',\n    '_fontVariant',\n    '_fontWeight',\n    '_breakWords',\n    '_align',\n    '_leading',\n    '_letterSpacing',\n    '_lineHeight',\n    '_textBaseline',\n    '_whiteSpace',\n    '_wordWrap',\n    '_wordWrapWidth',\n    '_padding',\n    '_cssOverrides',\n    '_trim'\n];\n\n/**\n * Generates a unique key for the text style.\n * @param style - The style to generate a key for.\n * @returns the key for the style.\n */\nexport function generateTextStyleKey(style: TextStyle): string\n{\n    const key = [];\n\n    let index = 0;\n\n    for (let i = 0; i < valuesToIterateForKeys.length; i++)\n    {\n        const prop = valuesToIterateForKeys[i];\n\n        key[index++] = style[prop as keyof typeof style];\n    }\n\n    index = addFillStyleKey(style._fill, key as string[], index);\n    index = addStokeStyleKey(style._stroke, key as string[], index);\n\n    // TODO - we need to add some shadow stuff here!\n\n    return key.join('-');\n}\n\nfunction addFillStyleKey(fillStyle: ConvertedFillStyle, key: (number | string)[], index: number)\n{\n    if (!fillStyle) return index;\n\n    key[index++] = fillStyle.color;\n    key[index++] = fillStyle.alpha;\n    key[index++] = (fillStyle.fill as FillGradient)?.uid;\n\n    return index;\n}\n\nfunction addStokeStyleKey(strokeStyle: ConvertedStrokeStyle, key: (number | string)[], index: number)\n{\n    if (!strokeStyle) return index;\n\n    index = addFillStyleKey(strokeStyle, key, index);\n\n    key[index++] = strokeStyle.width;\n    key[index++] = strokeStyle.alignment;\n    key[index++] = strokeStyle.cap;\n    key[index++] = strokeStyle.join;\n    key[index++] = strokeStyle.miterLimit;\n\n    return index;\n}\n",null,"import { Color } from '../../color/Color';\nimport { Rectangle } from '../../maths/shapes/Rectangle';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { ICanvasRenderingContext2D } from '../../environment/canvas/ICanvasRenderingContext2D';\nimport type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\nimport type { TextStyle } from '../text/TextStyle';\n\nexport interface DynamicBitmapFontOptions\n{\n    style: TextStyle\n    skipKerning?: boolean\n    resolution?: number\n    padding?: number\n    overrideFill?: boolean\n    overrideSize?: boolean\n}\n\n/**\n * A BitmapFont that generates its glyphs dynamically.\n * @memberof text\n * @ignore\n */\nexport class DynamicBitmapFont extends AbstractBitmapFont<DynamicBitmapFont>\n{\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    public resolution = 1;\n    /** The pages of the font. */\n    public override readonly pages: {canvasAndContext?: CanvasAndContext, texture: Texture}[] = [];\n\n    private readonly _padding: number = 4;\n    private readonly _measureCache: Record<string, number> = Object.create(null);\n    private _currentChars: string[] = [];\n    private _currentX = 0;\n    private _currentY = 0;\n    private _currentPageIndex = -1;\n    private readonly _style: TextStyle;\n    private readonly _skipKerning: boolean = false;\n\n    /**\n     * @param options - The options for the dynamic bitmap font.\n     */\n    constructor(options: DynamicBitmapFontOptions)\n    {\n        super();\n\n        const dynamicOptions = options;\n        const style = dynamicOptions.style.clone();\n\n        if (dynamicOptions.overrideFill)\n        {\n            // assuming no shape fill..\n            style._fill.color = 0xffffff;\n            style._fill.alpha = 1;\n            style._fill.texture = Texture.WHITE;\n            style._fill.fill = null;\n        }\n\n        const requestedFontSize = style.fontSize;\n\n        // adjust font size to match the base measurement size\n        style.fontSize = this.baseMeasurementFontSize;\n\n        const font = fontStringFromTextStyle(style);\n\n        if (dynamicOptions.overrideSize)\n        {\n            if (style._stroke)\n            {\n                // we want the stroke to fit the size of the requested text, so we need to scale it\n                // accordingly (eg font size 20, with stroke 10 - stroke is 50% of size,\n                // as dynamic font is size 100, the stroke should be adjusted to 50 to make it look right)\n                style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n            }\n        }\n        else\n        {\n            style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n        }\n\n        this._style = style;\n        this._skipKerning = dynamicOptions.skipKerning ?? false;\n        this.resolution = dynamicOptions.resolution ?? 1;\n        this._padding = dynamicOptions.padding ?? 4;\n\n        (this.fontMetrics as FontMetrics) = CanvasTextMetrics.measureFont(font);\n        (this.lineHeight as number) = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n    }\n\n    public ensureCharacters(chars: string): void\n    {\n        const charList = resolveCharacters(chars)\n            .filter((char) => !this._currentChars.includes(char))\n            .filter((char, index, self) => self.indexOf(char) === index);\n        // filter returns..\n\n        if (!charList.length) return;\n\n        this._currentChars = [...this._currentChars, ...charList];\n\n        let pageData;\n\n        if (this._currentPageIndex === -1)\n        {\n            pageData = this._nextPage();\n        }\n        else\n        {\n            pageData = this.pages[this._currentPageIndex];\n        }\n\n        let { canvas, context } = pageData.canvasAndContext;\n        let textureSource = pageData.texture.source;\n\n        const style = this._style;\n\n        let currentX = this._currentX;\n        let currentY = this._currentY;\n\n        const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n        const padding = this._padding * fontScale;\n\n        const widthScale = style.fontStyle === 'italic' ? 2 : 1;\n        let maxCharHeight = 0;\n        let skipTexture = false;\n\n        for (let i = 0; i < charList.length; i++)\n        {\n            const char = charList[i];\n\n            const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n\n            // override the line height.. we want this to be the glyps heigh\n            // not the user specified one.\n            metrics.lineHeight = metrics.height;\n\n            const width = (widthScale * metrics.width) * fontScale;\n            const height = (metrics.height) * fontScale;\n\n            const paddedWidth = width + (padding * 2);\n            const paddedHeight = height + (padding * 2);\n\n            skipTexture = false;\n            // don't let empty characters count towards the maxCharHeight\n            if (char !== '\\n' && char !== '\\r' && char !== '\\t' && char !== ' ')\n            {\n                skipTexture = true;\n                maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));// / 1.5;\n            }\n\n            if (currentX + paddedWidth > 512)\n            {\n                currentY += maxCharHeight;\n\n                // reset the line x and height..\n                maxCharHeight = paddedHeight;\n                currentX = 0;\n\n                if (currentY + maxCharHeight > 512)\n                {\n                    textureSource.update();\n\n                    const pageData = this._nextPage();\n\n                    canvas = pageData.canvasAndContext.canvas;\n                    context = pageData.canvasAndContext.context;\n                    textureSource = pageData.texture.source;\n\n                    currentY = 0;\n                }\n            }\n\n            const xAdvance = (width / fontScale)\n                - (style.dropShadow?.distance ?? 0)\n                - (style._stroke?.width ?? 0);\n\n            // This is in coord space of the measurements.. not the texture\n            this.chars[char] = {\n                id: char.codePointAt(0),\n                xOffset: -this._padding,\n                yOffset: -this._padding,\n                xAdvance,\n                kerning: {},\n            };\n\n            if (skipTexture)\n            {\n                this._drawGlyph(\n                    context,\n                    metrics,\n                    currentX + padding,\n                    currentY + padding,\n                    fontScale,\n                    style,\n                );\n\n                const px = textureSource.width * fontScale;\n                const py = textureSource.height * fontScale;\n\n                const frame = new Rectangle(\n                    ((currentX) / px) * textureSource.width,\n                    ((currentY) / py) * textureSource.height,\n                    ((paddedWidth) / px) * textureSource.width,\n                    ((paddedHeight) / py) * textureSource.height,\n                );\n\n                this.chars[char].texture = new Texture({\n                    source: textureSource,\n                    frame,\n                });\n\n                currentX += Math.ceil(paddedWidth);\n            }\n\n            // now add it to the font data..\n        }\n\n        textureSource.update();\n\n        this._currentX = currentX;\n        this._currentY = currentY;\n\n        // now apply kerning..\n        this._skipKerning && this._applyKerning(charList, context);\n    }\n\n    /**\n     * @deprecated since 8.0.0\n     * The map of base page textures (i.e., sheets of glyphs).\n     */\n    public override get pageTextures(): DynamicBitmapFont['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    private _applyKerning(newChars: string[], context: ICanvasRenderingContext2D): void\n    {\n        const measureCache = this._measureCache;\n\n        for (let i = 0; i < newChars.length; i++)\n        {\n            const first = newChars[i];\n\n            for (let j = 0; j < this._currentChars.length; j++)\n            {\n                // first go through new char being first\n                const second = this._currentChars[j];\n\n                let c1 = measureCache[first];\n\n                if (!c1) c1 = measureCache[first] = context.measureText(first).width;\n\n                let c2 = measureCache[second];\n\n                if (!c2) c2 = measureCache[second] = context.measureText(second).width;\n\n                let total = context.measureText(first + second).width;\n                let amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[first].kerning[second] = amount;\n                }\n\n                // then go through new char being second\n                total = context.measureText(first + second).width;\n                amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[second].kerning[first] = amount;\n                }\n            }\n        }\n    }\n\n    private _nextPage(): {canvasAndContext: CanvasAndContext, texture: Texture}\n    {\n        this._currentPageIndex++;\n\n        const textureResolution = this.resolution;\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(512, 512, textureResolution);\n\n        this._setupContext(canvasAndContext.context, this._style, textureResolution);\n\n        const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n        const texture = new Texture({\n            source: new ImageSource({\n                resource: canvasAndContext.canvas,\n                resolution,\n                alphaMode: 'premultiply-alpha-on-upload'\n            }),\n\n        });\n\n        const pageData = {\n            canvasAndContext,\n            texture,\n        };\n\n        this.pages[this._currentPageIndex] = pageData;\n\n        return pageData;\n    }\n\n    // canvas style!\n    private _setupContext(context: ICanvasRenderingContext2D, style: TextStyle, resolution: number): void\n    {\n        style.fontSize = this.baseRenderedFontSize;\n        context.scale(resolution, resolution);\n        context.font = fontStringFromTextStyle(style);\n        style.fontSize = this.baseMeasurementFontSize;\n        context.textBaseline = style.textBaseline;\n\n        const stroke = style._stroke;\n        const strokeThickness = stroke?.width ?? 0;\n\n        if (stroke)\n        {\n            context.lineWidth = strokeThickness;\n            context.lineJoin = stroke.join;\n            context.miterLimit = stroke.miterLimit;\n\n            // TODO prolly cache this??\n            context.strokeStyle = getCanvasFillStyle(stroke, context);\n        }\n\n        if (style._fill)\n        {\n            // set canvas text styles\n            context.fillStyle = getCanvasFillStyle(style._fill, context);\n        }\n\n        if (style.dropShadow)\n        {\n            const shadowOptions = style.dropShadow;\n            const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n\n            const dropShadowBlur = shadowOptions.blur * resolution;\n            const dropShadowDistance = shadowOptions.distance * resolution;\n\n            context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n            context.shadowBlur = dropShadowBlur;\n            context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n            context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n        }\n        else\n        {\n            context.shadowColor = 'black';\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n    }\n\n    private _drawGlyph(\n        context: ICanvasRenderingContext2D,\n        metrics: CanvasTextMetrics,\n        x: number,\n        y: number,\n        fontScale: number,\n        style: TextStyle\n    ): void\n    {\n        const char = metrics.text;\n        const fontProperties = metrics.fontProperties;\n        const stroke = style._stroke;\n\n        const strokeThickness = (stroke?.width ?? 0) * fontScale;\n\n        const tx = x + (strokeThickness / 2);\n        const ty = y - (strokeThickness / 2);\n\n        const descent = fontProperties.descent * fontScale;\n        const lineHeight = metrics.lineHeight * fontScale;\n\n        if (style.stroke && strokeThickness)\n        {\n            context.strokeText(char, tx, ty + lineHeight - descent);\n        }\n\n        if (style._fill)\n        {\n            context.fillText(char, tx, ty + lineHeight - descent);\n        }\n    }\n\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { canvasAndContext, texture } = this.pages[i];\n\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n}\n",null,"/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\n\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Skip unexpected 'empty set' check at end\n    if (chars === '')\n    {\n        return [];\n    }\n\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n            if (item[0].length === 0 || item[1].length === 0)\n            {\n                throw new Error('[BitmapFont]: Invalid character delimiter.');\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        else\n        {\n            result.push(...Array.from(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n",null,"import type { TextStyle } from '../../text/TextStyle';\nimport type { AbstractBitmapFont } from '../AbstractBitmapFont';\n\nexport interface BitmapTextLayoutData\n{\n    width: number;\n    height: number;\n    scale: number;\n    offsetY: number;\n    lines: {\n        width: number\n        charPositions: number[],\n        chars: string[],\n        // / spaces: number\n        spaceWidth: number\n        spacesIndex: number[]\n    }[];\n}\n\nexport function getBitmapTextLayout(chars: string[], style: TextStyle, font: AbstractBitmapFont<any>): BitmapTextLayoutData\n{\n    const layoutData: BitmapTextLayoutData = {\n        width: 0,\n        height: 0,\n        offsetY: 0,\n        scale: style.fontSize / font.baseMeasurementFontSize,\n        lines: [{\n            width: 0,\n            charPositions: [] as number[],\n            spaceWidth: 0,\n            spacesIndex: [],\n            chars: [],\n        }]\n    };\n\n    layoutData.offsetY = font.baseLineOffset;\n\n    let currentLine = layoutData.lines[0];\n\n    let previousChar: string = null;\n    let firstWord = true;\n    //    let spaceCount = 0;\n\n    const currentWord = {\n        spaceWord: false,\n        width: 0,\n        start: 0,\n        index: 0, // use index to not modify the array as we use it a lot!\n        positions: [] as number[],\n        chars: [] as string[],\n    };\n\n    const nextWord = (word: typeof currentWord) =>\n    {\n        const start = currentLine.width;\n\n        for (let j = 0; j < currentWord.index; j++)\n        {\n            const position = word.positions[j];\n\n            currentLine.chars.push(word.chars[j]);\n            currentLine.charPositions.push(position + start);\n        }\n\n        currentLine.width += word.width;\n\n        firstWord = false;\n\n        // reset the word..\n        currentWord.width = 0;\n        currentWord.index = 0;\n        currentWord.chars.length = 0;\n\n        // spaceCount = 0;\n    };\n\n    const nextLine = () =>\n    {\n        let index = currentLine.chars.length - 1;\n        let lastChar = currentLine.chars[index];\n\n        while (lastChar === ' ')\n        {\n            currentLine.width -= font.chars[lastChar].xAdvance;\n            lastChar = currentLine.chars[--index];\n        }\n\n        layoutData.width = Math.max(layoutData.width, currentLine.width);\n\n        currentLine = {\n            width: 0,\n            charPositions: [],\n            chars: [],\n            spaceWidth: 0,\n            spacesIndex: [],\n        };\n\n        firstWord = true;\n        layoutData.lines.push(currentLine);\n        layoutData.height += font.lineHeight;\n    };\n\n    const scale = font.baseMeasurementFontSize / style.fontSize;\n\n    const adjustedLetterSpacing = style.letterSpacing * scale;\n    const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n\n    // loop an extra time to force a line break..\n    for (let i = 0; i < chars.length + 1; i++)\n    {\n        let char: string;\n\n        const isEnd = i === chars.length;\n\n        if (!isEnd)\n        {\n            char = chars[i];\n        }\n\n        const charData = font.chars[char] || font.chars[' '];\n\n        const isSpace = (/(?:\\s)/).test(char);\n        const isWordBreak = isSpace || char === '\\r' || char === '\\n' || isEnd;\n\n        // spaceCount++;\n        // wasSpace = isSpace;\n\n        if (isWordBreak)\n        {\n            const addWordToNextLine = !firstWord\n                && style.wordWrap\n                && (currentLine.width + currentWord.width - adjustedLetterSpacing) > adjustedWordWrapWidth;\n\n            if (addWordToNextLine)\n            {\n                nextLine();\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n            else\n            {\n                currentWord.start = currentLine.width;\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                if (currentLine.width !== 0)\n                {\n                    nextLine();\n                }\n            }\n            else if (!isEnd)\n            {\n                const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n\n                currentLine.width += spaceWidth;\n\n                currentLine.spaceWidth = spaceWidth;\n                currentLine.spacesIndex.push(currentLine.charPositions.length);\n                currentLine.chars.push(char);\n\n                // spaceCount++;\n            }\n        }\n        else\n        {\n            const kerning = charData.kerning[previousChar] || 0;\n\n            const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n\n            currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n            currentWord.chars.push(char);\n\n            currentWord.width += nextCharWidth;\n        }\n\n        previousChar = char;\n        // lastChar = char;\n    }\n\n    nextLine();\n\n    if (style.align === 'center')\n    {\n        alignCenter(layoutData);\n    }\n    else if (style.align === 'right')\n    {\n        alignRight(layoutData);\n    }\n    else if (style.align === 'justify')\n    {\n        alignJustify(layoutData);\n    }\n\n    return layoutData;\n}\n\nfunction alignCenter(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width / 2) - (line.width / 2));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignRight(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width) - (line.width));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignJustify(measurementData: BitmapTextLayoutData)\n{\n    const width = measurementData.width;\n\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n\n        let indy = 0;\n        let spaceIndex = line.spacesIndex[indy++];\n\n        let offset = 0;\n\n        const totalSpaces = line.spacesIndex.length;\n\n        const newSpaceWidth = (width - line.width) / totalSpaces;\n\n        const spaceWidth = newSpaceWidth;\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            if (j === spaceIndex)\n            {\n                spaceIndex = line.spacesIndex[indy++];\n\n                offset += spaceWidth;\n            }\n\n            line.charPositions[j] += offset;\n        }\n    }\n}\n",null,"import type { BitmapFontData, RawCharData } from '../AbstractBitmapFont';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\nexport interface BitmapFontRawData\n{\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string, base: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string\n        page: string\n        xoffset: string\n        yoffset: string\n        xadvance: string,\n        x: string\n        y: string\n        width: string\n        height: string\n        letter?: string\n        char?: string\n    }[];\n    kernings?: {\n        count: number;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n    distanceField?: {\n        fieldType: 'sdf' | 'msdf' | 'none';\n        distanceRange: string;\n    }[]\n}\n\nexport const bitmapFontTextParser = {\n    test(data: string | XMLDocument | BitmapFontData): boolean\n    {\n        return typeof data === 'string' && data.startsWith('info face=');\n    },\n\n    parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: BitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n            kernings: [],\n            distanceField: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontRawData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font: BitmapFontData = {\n            chars: {},\n            pages: [],\n            lineHeight: 0,\n            fontSize: 0,\n            fontFamily: '',\n            distanceField: null,\n            baseLineOffset: 0,\n        };\n\n        const [info] = rawData.info;\n        const [common] = rawData.common;\n        const [distanceField] = rawData.distanceField ?? [];\n\n        if (distanceField)\n        {\n            font.distanceField = {\n                range: parseInt(distanceField.distanceRange, 10),\n                type: distanceField.fieldType\n            };\n        }\n\n        font.fontSize = parseInt(info.size, 10);\n        font.fontFamily = info.face;\n        font.lineHeight = parseInt(common.lineHeight, 10);\n\n        const page = rawData.page;\n\n        for (let i = 0; i < page.length; i++)\n        {\n            font.pages.push({\n                id: parseInt(page[i].id, 10) || 0,\n                file: page[i].file,\n            });\n        }\n\n        const map: Record<string, string> = {};\n\n        font.baseLineOffset = font.lineHeight - parseInt(common.base, 10);\n\n        const char = rawData.char;\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const charNode = char[i];\n            const id = parseInt(charNode.id, 10);\n\n            let letter = charNode.letter ?? charNode.char ?? String.fromCharCode(id);\n\n            if (letter === 'space')letter = ' ';\n\n            map[id] = letter;\n\n            font.chars[letter] = {\n                id,\n                // texture deets..\n                page: parseInt(charNode.page, 10) || 0,\n                x: parseInt(charNode.x, 10),\n                y: parseInt(charNode.y, 10),\n                width: parseInt(charNode.width, 10),\n                height: parseInt(charNode.height, 10),\n                xOffset: parseInt(charNode.xoffset, 10),\n                yOffset: parseInt(charNode.yoffset, 10),\n                xAdvance: parseInt(charNode.xadvance, 10),\n                kerning: {},\n            } as RawCharData;\n        }\n\n        const kerning = rawData.kerning || [];\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            const first = parseInt(kerning[i].first, 10);\n            const second = parseInt(kerning[i].second, 10);\n            const amount = parseInt(kerning[i].amount, 10);\n\n            font.chars[map[second]].kerning[map[first]] = amount;\n        }\n\n        return font;\n    }\n};\n",null,"import { DOMAdapter } from '../../../environment/adapter';\nimport { bitmapFontXMLParser } from './bitmapFontXMLParser';\n\nimport type { BitmapFontData } from '../AbstractBitmapFont';\n\nexport const bitmapFontXMLStringParser = {\n    test(data: string | XMLDocument | BitmapFontData): boolean\n    {\n        if (typeof data === 'string' && data.includes('<font>'))\n        {\n            return bitmapFontXMLParser.test(DOMAdapter.get().parseXML(data));\n        }\n\n        return false;\n    },\n\n    parse(data: string): BitmapFontData\n    {\n        return bitmapFontXMLParser.parse(DOMAdapter.get().parseXML(data));\n    }\n};\n",null,"import type { BitmapFontData, RawCharData } from '../AbstractBitmapFont';\n\nexport const bitmapFontXMLParser = {\n    test(data: string | XMLDocument | BitmapFontData): boolean\n    {\n        const xml = data as Document;\n\n        return typeof xml !== 'string'\n            && 'getElementsByTagName' in xml\n            && xml.getElementsByTagName('page').length\n            && xml.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    },\n\n    parse(xml: Document): BitmapFontData\n    {\n        const data: BitmapFontData = {\n            chars: {},\n            pages: [],\n            lineHeight: 0,\n            fontSize: 0,\n            fontFamily: '',\n            distanceField: null,\n            baseLineOffset: 0,\n        };\n\n        const info = xml.getElementsByTagName('info')[0];\n        const common = xml.getElementsByTagName('common')[0];\n        const distanceField = xml.getElementsByTagName('distanceField')[0];\n\n        if (distanceField)\n        {\n            data.distanceField = {\n                type: distanceField.getAttribute('fieldType') as 'sdf' | 'msdf' | 'none',\n                range: parseInt(distanceField.getAttribute('distanceRange'), 10),\n            };\n        }\n\n        // pages and chars:\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n\n        data.fontSize = parseInt(info.getAttribute('size'), 10);\n        data.fontFamily = info.getAttribute('face');\n        data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10);\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.pages.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        const map: Record<string, string> = {};\n\n        data.baseLineOffset = data.lineHeight - parseInt(common.getAttribute('base'), 10);\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const charNode = char[i];\n            const id = parseInt(charNode.getAttribute('id'), 10);\n\n            let letter = charNode.getAttribute('letter') ?? charNode.getAttribute('char') ?? String.fromCharCode(id);\n\n            if (letter === 'space')letter = ' ';\n\n            map[id] = letter;\n\n            data.chars[letter] = {\n                id,\n                // texture deets..\n                page: parseInt(charNode.getAttribute('page'), 10) || 0,\n                x: parseInt(charNode.getAttribute('x'), 10),\n                y: parseInt(charNode.getAttribute('y'), 10),\n                width: parseInt(charNode.getAttribute('width'), 10),\n                height: parseInt(charNode.getAttribute('height'), 10),\n\n                // render deets..\n                xOffset: parseInt(charNode.getAttribute('xoffset'), 10),\n                yOffset: parseInt(charNode.getAttribute('yoffset'), 10), // + baseLineOffset,\n                xAdvance: parseInt(charNode.getAttribute('xadvance'), 10),\n                kerning: {},\n            } as RawCharData;\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            const first = parseInt(kerning[i].getAttribute('first'), 10);\n            const second = parseInt(kerning[i].getAttribute('second'), 10);\n            const amount = parseInt(kerning[i].getAttribute('amount'), 10);\n\n            data.chars[map[second]].kerning[map[first]] = amount;// * 10000;\n        }\n\n        return data;\n    }\n};\n",null,"import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { BitmapText } from './BitmapText';\n\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuBitmapText: Record<number, Graphics> = {};\n    private _sdfShader: SdfShader;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public destroyRenderable(bitmapText: BitmapText)\n    {\n        this._destroyRenderableByUid(bitmapText.uid);\n    }\n\n    private _destroyRenderableByUid(renderableUid: number)\n    {\n        BigPool.return(this._gpuBitmapText[renderableUid] as PoolItem);\n        this._gpuBitmapText[renderableUid] = null;\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                if (!this._sdfShader)\n                {\n                    this._sdfShader = new SdfShader();\n                }\n\n                context.customShader = this._sdfShader;\n            }\n        }\n\n        const chars = Array.from(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = (style._stroke?.width || 0) / 2;\n\n        currentY += bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont);\n\n        let index = 0;\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        context\n            .translate(\n                (-bitmapText._anchor._x * bitmapTextLayout.width) - padding,\n                (-bitmapText._anchor._y * (bitmapTextLayout.height + bitmapTextLayout.offsetY)) - padding)\n            .scale(scale, scale);\n\n        const tint = style._fill.color;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = chars[index++];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that hav the same style!\n        const proxyRenderable = BigPool.get(Graphics);\n\n        this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        bitmapText.on('destroyed', () =>\n        {\n            this.destroyRenderable(bitmapText);\n        });\n\n        return this._gpuBitmapText[bitmapText.uid];\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const resolution = bitmapText.resolution ?? this._renderer.resolution;\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale) * resolution;\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        for (const uid in this._gpuBitmapText)\n        {\n            this._destroyRenderableByUid(uid as unknown as number);\n        }\n\n        this._gpuBitmapText = null;\n\n        this._sdfShader?.destroy(true);\n        this._sdfShader = null;\n\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n",null,"import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { Container } from '../../container/Container';\nimport { GraphicsContext } from './GraphicsContext';\n\nimport type { ColorSource } from '../../../color/Color';\nimport type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Instruction } from '../../../rendering/renderers/shared/instructions/Instruction';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { View } from '../../../rendering/renderers/shared/view/View';\nimport type { Bounds } from '../../container/bounds/Bounds';\nimport type { ContainerOptions } from '../../container/Container';\nimport type { ContextDestroyOptions, DestroyOptions } from '../../container/destroyTypes';\nimport type { FillStyle, FillStyleInputs, StrokeStyle } from './GraphicsContext';\nimport type { GraphicsPath } from './path/GraphicsPath';\nimport type { RoundedPoint } from './path/roundShape';\n\n/**\n * Constructor options used for `Graphics` instances.\n * ```js\n * const graphics = new Graphics({\n *    fillStyle: { color: 0xff0000, alpha: 0.5 },\n *    strokeStyle: { color: 0x00ff00, width: 2 },\n * });\n * ```\n * @see {@link scene.Graphics}\n * @memberof scene\n */\nexport interface GraphicsOptions extends ContainerOptions\n{\n    /** The GraphicsContext to use, useful for reuse and optimisation */\n    context?: GraphicsContext;\n    /** Whether or not to round the x/y position. */\n    roundPixels?: boolean;\n}\n\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.  However, you can also use a Graphics\n * object to build a list of primitives to use as a mask, or as a complex hitArea.\n * @memberof scene\n * @extends scene.Container\n */\nexport class Graphics extends Container implements View, Instruction\n{\n    public readonly canBundle = true;\n    public readonly renderPipeId = 'graphics';\n    public batched: boolean;\n\n    public _roundPixels: 0 | 1 = 0;\n\n    public _didGraphicsUpdate: boolean;\n\n    private _context: GraphicsContext;\n    private readonly _ownedContext: GraphicsContext;\n\n    /**\n     * @param options - Options for the Graphics.\n     */\n    constructor(options?: GraphicsOptions | GraphicsContext)\n    {\n        if (options instanceof GraphicsContext)\n        {\n            options = { context: options };\n        }\n\n        const { context, roundPixels, ...rest } = options || {};\n\n        super({\n            label: 'Graphics',\n            ...rest\n        });\n\n        if (!context)\n        {\n            this._context = this._ownedContext = new GraphicsContext();\n        }\n        else\n        {\n            this._context = context;\n        }\n\n        this._context.on('update', this.onViewUpdate, this);\n\n        this.allowChildren = false;\n        this.roundPixels = roundPixels ?? false;\n    }\n\n    set context(context: GraphicsContext)\n    {\n        if (context === this._context) return;\n\n        this._context.off('update', this.onViewUpdate, this);\n\n        this._context = context;\n\n        // TODO store this bound function somewhere else..\n        this._context.on('update', this.onViewUpdate, this);\n\n        this.onViewUpdate();\n    }\n\n    get context(): GraphicsContext\n    {\n        return this._context;\n    }\n\n    /**\n     * The local bounds of the graphic.\n     * @type {rendering.Bounds}\n     */\n    get bounds(): Bounds\n    {\n        return this._context.bounds;\n    }\n\n    /**\n     * Adds the bounds of this object to the bounds object.\n     * @param bounds - The output bounds object.\n     */\n    public addBounds(bounds: Bounds)\n    {\n        bounds.addBounds(this._context.bounds);\n    }\n\n    /**\n     * Checks if the object contains the given point.\n     * @param point - The point to check\n     */\n    public containsPoint(point: PointData)\n    {\n        return this._context.containsPoint(point);\n    }\n\n    /**\n     *  Whether or not to round the x/y position of the graphic.\n     * @type {boolean}\n     */\n    get roundPixels()\n    {\n        return !!this._roundPixels;\n    }\n\n    set roundPixels(value: boolean)\n    {\n        this._roundPixels = value ? 1 : 0;\n    }\n\n    protected onViewUpdate()\n    {\n        // increment from the 12th bit!\n        this._didChangeId += 1 << 12;\n        this._didGraphicsUpdate = true;\n\n        if (this.didViewUpdate) return;\n        this.didViewUpdate = true;\n\n        if (this.renderGroup)\n        {\n            this.renderGroup.onChildViewUpdate(this);\n        }\n    }\n\n    /**\n     * Destroys this graphics renderable and optionally its context.\n     * @param options - Options parameter. A boolean will act as if all options\n     *\n     * If the context was created by this graphics and `destroy(false)` or `destroy()` is called\n     * then the context will still be destroyed.\n     *\n     * If you want to explicitly not destroy this context that this graphics created,\n     * then you should pass destroy({ context: false })\n     *\n     * If the context was passed in as an argument to the constructor then it will not be destroyed\n     * @param {boolean} [options.texture=false] - Should destroy the texture of the graphics context\n     * @param {boolean} [options.textureSource=false] - Should destroy the texture source of the graphics context\n     * @param {boolean} [options.context=false] - Should destroy the context\n     */\n    public destroy(options?: DestroyOptions): void\n    {\n        if (this._ownedContext && !options)\n        {\n            this._ownedContext.destroy(options);\n        }\n        else if (options === true || (options as ContextDestroyOptions)?.context === true)\n        {\n            this._context.destroy(options);\n        }\n\n        (this._ownedContext as null) = null;\n        this._context = null;\n\n        super.destroy(options);\n    }\n\n    private _callContextMethod(method: keyof GraphicsContext, args: any[]): this\n    {\n        (this.context as any)[method](...args);\n\n        return this;\n    }\n\n    // --------------------------------------- GraphicsContext methods ---------------------------------------\n    /**\n     * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n     * pattern, or a more complex style defined by a FillStyle object.\n     * @param {FillStyleInputs} args - The fill style to apply. This can be a simple color, a gradient or\n     * pattern object, or a FillStyle or ConvertedFillStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setFillStyle(...args: Parameters<GraphicsContext['setFillStyle']>): this\n    {\n        return this._callContextMethod('setFillStyle', args);\n    }\n\n    /**\n     * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n     * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n     * @param {FillStyleInputs} args - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n     * or a StrokeStyle or ConvertedStrokeStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setStrokeStyle(...args: Parameters<GraphicsContext['setStrokeStyle']>): this\n    {\n        return this._callContextMethod('setStrokeStyle', args);\n    }\n\n    /**\n     * Fills the current or given path with the current fill style. This method can optionally take\n     * a color and alpha for a simple fill, or a more complex FillStyleInputs object for advanced fills.\n     * @param {FillStyleInputs} style - (Optional) The style to fill the path with. Can be a color, gradient, pattern, or a\n     * complex style object. If omitted, uses the current fill style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public fill(style?: FillStyleInputs): this;\n    /** @deprecated 8.0.0 */\n    public fill(color: ColorSource, alpha: number): this;\n    public fill(...args: [FillStyleInputs, ColorSource?]): this\n    {\n        return this._callContextMethod('fill', args);\n    }\n    /**\n     * Strokes the current path with the current stroke style. This method can take an optional\n     * FillStyleInputs parameter to define the stroke's appearance, including its color, width, and other properties.\n     * @param {FillStyleInputs} args - (Optional) The stroke style to apply. Can be defined as a simple color or a more\n     * complex style object. If omitted, uses the current stroke style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public stroke(...args: Parameters<GraphicsContext['stroke']>): this\n    {\n        return this._callContextMethod('stroke', args);\n    }\n    /**\n     * Adds a texture to the graphics context. This method supports multiple overloads for specifying the texture,\n     * tint, and dimensions. If only a texture is provided, it uses the texture's width and height for drawing.\n     * Additional parameters allow for specifying a tint color, and custom dimensions for the texture drawing area.\n     * @param texture - The Texture object to use.\n     * @param tint - (Optional) A ColorSource to tint the texture. If not provided, defaults to white (0xFFFFFF).\n     * @param dx - (Optional) The x-coordinate in the destination canvas at which to place the top-left corner of\n     * the source image.\n     * @param dy - (Optional) The y-coordinate in the destination canvas at which to place the top-left corner of\n     * the source image.\n     * @param dw - (Optional) The width of the rectangle within the source image to draw onto the destination canvas.\n     * If not provided, uses the texture's frame width.\n     * @param dh - (Optional) The height of the rectangle within the source image to draw onto the destination canvas.\n     * If not provided, uses the texture's frame height.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public texture(texture: Texture, tint?: ColorSource, dx?: number, dy?: number, dw?: number, dh?: number): this;\n    public texture(texture: Texture): this;\n    public texture(...args: [Texture, number?, number?, number?, number?, number?]): this\n    {\n        return this._callContextMethod('texture', args);\n    }\n    /**\n     * Resets the current path. Any previous path and its commands are discarded and a new path is\n     * started. This is typically called before beginning a new shape or series of drawing commands.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public beginPath(): this\n    {\n        return this._callContextMethod('beginPath', []);\n    }\n    /**\n     * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n     * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n     * fail to cut correctly!\n     */\n    public cut(): this\n    {\n        return this._callContextMethod('cut', []);\n    }\n    /**\n     * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n     * starting and ending angles, and direction.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The arc's radius.\n     * @param startAngle - The starting angle, in radians.\n     * @param endAngle - The ending angle, in radians.\n     * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise\n     * (false). Defaults to false.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;\n    public arc(...args: Parameters<GraphicsContext['arc']>): this\n    {\n        return this._callContextMethod('arc', args);\n    }\n    /**\n     * Adds an arc to the current path with the given control points and radius, connected to the previous point\n     * by a straight line if necessary.\n     * @param x1 - The x-coordinate of the first control point.\n     * @param y1 - The y-coordinate of the first control point.\n     * @param x2 - The x-coordinate of the second control point.\n     * @param y2 - The y-coordinate of the second control point.\n     * @param radius - The arc's radius.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;\n    public arcTo(...args: Parameters<GraphicsContext['arcTo']>): this\n    {\n        return this._callContextMethod('arcTo', args);\n    }\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcToSvg(\n        rx: number, ry: number, xAxisRotation: number, largeArcFlag: number, sweepFlag: number, x: number, y: number\n    ): this;\n    public arcToSvg(...args: Parameters<GraphicsContext['arcToSvg']>): this\n    {\n        return this._callContextMethod('arcToSvg', args);\n    }\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number, smoothness?: number\n    ): this;\n    public bezierCurveTo(...args: Parameters<GraphicsContext['bezierCurveTo']>): this\n    {\n        return this._callContextMethod('bezierCurveTo', args);\n    }\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        return this._callContextMethod('closePath', []);\n    }\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number): this;\n    public ellipse(...args: Parameters<GraphicsContext['ellipse']>): this\n    {\n        return this._callContextMethod('ellipse', args);\n    }\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number): this;\n    public circle(...args: Parameters<GraphicsContext['circle']>): this\n    {\n        return this._callContextMethod('circle', args);\n    }\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * @param path - The `GraphicsPath` to add.\n     * @returns The instance of the current object for chaining.\n     */\n    public path(path: GraphicsPath): this;\n    public path(...args: Parameters<GraphicsContext['path']>): this\n    {\n        return this._callContextMethod('path', args);\n    }\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this;\n    public lineTo(...args: Parameters<GraphicsContext['lineTo']>): this\n    {\n        return this._callContextMethod('lineTo', args);\n    }\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this;\n    public moveTo(...args: Parameters<GraphicsContext['moveTo']>): this\n    {\n        return this._callContextMethod('moveTo', args);\n    }\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cpx - The x-coordinate of the control point.\n     * @param cpy - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this;\n    public quadraticCurveTo(...args: Parameters<GraphicsContext['quadraticCurveTo']>): this\n    {\n        return this._callContextMethod('quadraticCurveTo', args);\n    }\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number): this;\n    public rect(...args: Parameters<GraphicsContext['rect']>): this\n    {\n        return this._callContextMethod('rect', args);\n    }\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number): this;\n    public roundRect(...args: Parameters<GraphicsContext['roundRect']>): this\n    {\n        return this._callContextMethod('roundRect', args);\n    }\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n     * representing the x and y coordinates, of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public poly(points: number[] | PointData[], close?: boolean): this;\n    public poly(...args: Parameters<GraphicsContext['poly']>): this\n    {\n        return this._callContextMethod('poly', args);\n    }\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation?: number, transform?: Matrix): this;\n    public regularPoly(...args: Parameters<GraphicsContext['regularPoly']>): this\n    {\n        return this._callContextMethod('regularPoly', args);\n    }\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this;\n    public roundPoly(...args: Parameters<GraphicsContext['roundPoly']>): this\n    {\n        return this._callContextMethod('roundPoly', args);\n    }\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this;\n    public roundShape(...args: Parameters<GraphicsContext['roundShape']>): this\n    {\n        return this._callContextMethod('roundShape', args);\n    }\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this;\n    public filletRect(...args: Parameters<GraphicsContext['filletRect']>): this\n    {\n        return this._callContextMethod('filletRect', args);\n    }\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this;\n    public chamferRect(...args: Parameters<GraphicsContext['chamferRect']>): this\n    {\n        return this._callContextMethod('chamferRect', args);\n    }\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @param x - The x-coordinate of the center of the star.\n     * @param y - The y-coordinate of the center of the star.\n     * @param points - The number of points of the star.\n     * @param radius - The outer radius of the star (distance from the center to the outer points).\n     * @param innerRadius - Optional. The inner radius of the star\n     * (distance from the center to the inner points between the outer points).\n     * If not provided, defaults to half of the `radius`.\n     * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n     * Defaults to 0, meaning one point is directly upward.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public star(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number): this;\n    public star(...args: Parameters<GraphicsContext['star']>): this\n    {\n        return this._callContextMethod('star', args);\n    }\n    /**\n     * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n     * defined in SVG format to be drawn within the graphics context.\n     * @param svg - The SVG string to be parsed and rendered.\n     */\n    public svg(svg: string): this;\n    public svg(...args: Parameters<GraphicsContext['svg']>): this\n    {\n        return this._callContextMethod('svg', args);\n    }\n    /**\n     * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n     * This includes transformations, fill styles, and stroke styles.\n     */\n    public restore(): this;\n    public restore(...args: Parameters<GraphicsContext['restore']>): this\n    {\n        return this._callContextMethod('restore', args);\n    }\n    /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n    public save(): this\n    {\n        return this._callContextMethod('save', []);\n    }\n    /**\n     * Returns the current transformation matrix of the graphics context.\n     * @returns The current transformation matrix.\n     */\n    public getTransform(): Matrix\n    {\n        return this.context.getTransform();\n    }\n    /**\n     * Resets the current transformation matrix to the identity matrix, effectively removing\n     * any transformations (rotation, scaling, translation) previously applied.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public resetTransform(): this\n    {\n        return this._callContextMethod('resetTransform', []);\n    }\n    /**\n     * Applies a rotation transformation to the graphics context around the current origin.\n     * @param angle - The angle of rotation in radians.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public rotateTransform(angle: number): this;\n    public rotateTransform(...args: Parameters<GraphicsContext['rotate']>): this\n    {\n        return this._callContextMethod('rotate', args);\n    }\n    /**\n     * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n     * @param x - The scale factor in the horizontal direction.\n     * @param y - (Optional) The scale factor in the vertical direction.\n     * If not specified, the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public scaleTransform(x: number, y?: number): this;\n    public scaleTransform(...args: Parameters<GraphicsContext['scale']>): this\n    {\n        return this._callContextMethod('scale', args);\n    }\n    /**\n     * Sets the current transformation matrix of the graphics context to the specified matrix or values.\n     * This replaces the current transformation matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setTransform(transform: Matrix): this;\n    public setTransform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public setTransform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this;\n    public setTransform(...args: [Matrix] | [number, number, number, number, number, number]): this\n    {\n        return this._callContextMethod('setTransform', args);\n    }\n    /**\n     * Applies the specified transformation matrix to the current graphics context by multiplying\n     * the current matrix with the specified matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public transform(transform: Matrix): this;\n    public transform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public transform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this;\n    public transform(...args: [Matrix] | [number, number, number, number, number, number]): this\n    {\n        return this._callContextMethod('transform', args);\n    }\n    /**\n     * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n     * @param x - The amount to translate in the horizontal direction.\n     * @param y - (Optional) The amount to translate in the vertical direction. If not specified,\n     * the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public translateTransform(x: number, y?: number): this;\n    public translateTransform(...args: Parameters<GraphicsContext['translate']>): this\n    {\n        return this._callContextMethod('translate', args);\n    }\n    /**\n     * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n     * and optionally resetting transformations to the identity matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public clear(): this\n    {\n        return this._callContextMethod('clear', []);\n    }\n    /**\n     * The fill style to use.\n     * @type {ConvertedFillStyle}\n     */\n    get fillStyle(): GraphicsContext['fillStyle']\n    {\n        return this._context.fillStyle;\n    }\n    set fillStyle(value: FillStyleInputs)\n    {\n        this._context.fillStyle = value;\n    }\n    /**\n     * The stroke style to use.\n     * @type {ConvertedStrokeStyle}\n     */\n    get strokeStyle(): GraphicsContext['strokeStyle']\n    {\n        return this._context.strokeStyle;\n    }\n    set strokeStyle(value: FillStyleInputs)\n    {\n        this._context.strokeStyle = value;\n    }\n\n    /**\n     * Creates a new Graphics object.\n     * Note that only the context of the object is cloned, not its transform (position,scale,etc)\n     * @param deep - Whether to create a deep clone of the graphics object. If false, the context\n     * will be shared between the two objects (default false). If true, the context will be\n     * cloned (recommended if you need to modify the context in any way).\n     * @returns - A clone of the graphics object\n     */\n    public clone(deep = false): Graphics\n    {\n        if (deep)\n        {\n            return new Graphics(this._context.clone());\n        }\n\n        (this._ownedContext as null) = null;\n        const clone = new Graphics(this._context);\n\n        return clone;\n    }\n\n    // -------- v7 deprecations ---------\n\n    /**\n     * @param width\n     * @param color\n     * @param alpha\n     * @deprecated since 8.0.0 Use {@link Graphics#setStrokeStyle} instead\n     */\n    public lineStyle(width?: number, color?: ColorSource, alpha?: number): this\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.');\n        // #endif\n\n        const strokeStyle: Partial<StrokeStyle> = {};\n\n        // avoid undefined assignment\n        width && (strokeStyle.width = width);\n        color && (strokeStyle.color = color);\n        alpha && (strokeStyle.alpha = alpha);\n\n        this.context.strokeStyle = strokeStyle;\n\n        return this;\n    }\n\n    /**\n     * @param color\n     * @param alpha\n     * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n     */\n    public beginFill(color: ColorSource, alpha?: number)\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.');\n        // #endif\n\n        const fillStyle: Partial<FillStyle> = {};\n\n        // avoid undefined assignment\n        color && (fillStyle.color = color);\n        alpha && (fillStyle.alpha = alpha);\n\n        this.context.fillStyle = fillStyle;\n\n        return this;\n    }\n\n    /**\n     * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n     */\n    public endFill()\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.');\n        // #endif\n\n        this.context.fill();\n        const strokeStyle = this.context.strokeStyle;\n\n        if (strokeStyle.width !== GraphicsContext.defaultStrokeStyle.width\n            || strokeStyle.color !== GraphicsContext.defaultStrokeStyle.color\n            || strokeStyle.alpha !== GraphicsContext.defaultStrokeStyle.alpha)\n        {\n            this.context.stroke();\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#circle} instead\n     */\n    public drawCircle(...args: Parameters<GraphicsContext['circle']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawCircle has been renamed to Graphics#circle');\n        // #endif\n\n        return this._callContextMethod('circle', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#ellipse} instead\n     */\n    public drawEllipse(...args: Parameters<GraphicsContext['ellipse']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawEllipse has been renamed to Graphics#ellipse');\n        // #endif\n\n        return this._callContextMethod('ellipse', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#poly} instead\n     */\n    public drawPolygon(...args: Parameters<GraphicsContext['poly']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawPolygon has been renamed to Graphics#poly');\n        // #endif\n\n        return this._callContextMethod('poly', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#rect} instead\n     */\n    public drawRect(...args: Parameters<GraphicsContext['rect']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawRect has been renamed to Graphics#rect');\n        // #endif\n\n        return this._callContextMethod('rect', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#roundRect} instead\n     */\n    public drawRoundedRect(...args: Parameters<GraphicsContext['roundRect']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawRoundedRect has been renamed to Graphics#roundRect');\n        // #endif\n\n        return this._callContextMethod('roundRect', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#star} instead\n     */\n    public drawStar(...args: Parameters<GraphicsContext['star']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawStar has been renamed to Graphics#star');\n        // #endif\n\n        return this._callContextMethod('star', args);\n    }\n}\n",null,"import { Matrix } from '../../../maths/matrix/Matrix';\nimport { MAX_TEXTURES } from '../../../rendering/batcher/shared/const';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { batchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/batchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nexport class SdfShader extends Shader\n{\n    constructor()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(MAX_TEXTURES),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        const glProgram = compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(MAX_TEXTURES),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: batchSamplersUniformGroup,\n            }\n        });\n    }\n}\n",null,"import { GlProgram } from '../renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../renderers/gpu/shader/GpuProgram';\nimport { compileHighShader, compileHighShaderGl } from './compiler/compileHighShader';\nimport { fragmentGlTemplate, fragmentGPUTemplate, vertexGlTemplate, vertexGPUTemplate } from './defaultProgramTemplate';\nimport { globalUniformsBit, globalUniformsBitGl } from './shader-bits/globalUniformsBit';\n\nimport type { HighShaderBit } from './compiler/types';\n\nexport function compileHighShaderGpuProgram({ bits, name }: {bits: HighShaderBit[], name: string}): GpuProgram\n{\n    const source = compileHighShader({\n        template: {\n            fragment: fragmentGPUTemplate,\n            vertex: vertexGPUTemplate,\n        },\n        bits: [\n            globalUniformsBit,\n            ...bits,\n        ]\n    });\n\n    return GpuProgram.from({\n        name,\n        vertex: {\n            source: source.vertex,\n            entryPoint: 'main',\n        },\n        fragment: {\n            source: source.fragment,\n            entryPoint: 'main',\n        },\n    });\n}\n\nexport function compileHighShaderGlProgram({ bits, name }: {bits: HighShaderBit[], name: string}): GlProgram\n{\n    return new GlProgram({\n        name,\n        ...compileHighShaderGl({\n            template: {\n                vertex: vertexGlTemplate,\n                fragment: fragmentGlTemplate,\n            },\n            bits: [\n                globalUniformsBitGl,\n                ...bits,\n            ]\n        })\n    });\n}\n",null,"import { createIdFromString } from '../../shared/utils/createIdFromString';\nimport { getMaxFragmentPrecision } from './program/getMaxFragmentPrecision';\nimport { addProgramDefines } from './program/preprocessors/addProgramDefines';\nimport { ensurePrecision } from './program/preprocessors/ensurePrecision';\nimport { insertVersion } from './program/preprocessors/insertVersion';\nimport { setProgramName } from './program/preprocessors/setProgramName';\nimport { stripVersion } from './program/preprocessors/stripVersion';\n\nimport type { TypedArray } from '../../shared/buffer/Buffer';\nimport type { ExtractedAttributeData } from './program/extractAttributesFromGlProgram';\n\nexport interface GlAttributeData\n{\n    type: string;\n    size: number;\n    location: number;\n    name: string;\n}\n\nexport interface GlUniformData\n{\n    name: string;\n    index: number;\n    type: string;\n    size: number;\n    isArray: boolean;\n    value: any;\n}\n\nexport interface GlUniformBlockData\n{\n    index: number;\n    name: string;\n    size: number;\n    value?: TypedArray;\n}\n\n/**\n * The options for the gl program\n * @memberof rendering\n */\nexport interface GlProgramOptions\n{\n    /** The fragment glsl shader source. */\n    fragment: string;\n    /** The vertex glsl shader source. */\n    vertex: string;\n    /** the name of the program, defaults to 'pixi-program' */\n    name?: string;\n    /** the preferred vertex precision for the shader, this may not be used if the device does not support it  */\n    preferredVertexPrecision?: string;\n    /** the preferred fragment precision for the shader, this may not be used if the device does not support it  */\n    preferredFragmentPrecision?: string;\n}\n\nconst processes: Record<string, ((source: string, options: any, isFragment?: boolean) => string)> = {\n    // strips any version headers..\n    stripVersion,\n    // adds precision string if not already present\n    ensurePrecision,\n    // add some defines if WebGL1 to make it more compatible with WebGL2 shaders\n    addProgramDefines,\n    // add the program name to the shader\n    setProgramName,\n    // add the version string to the shader header\n    insertVersion,\n};\n\nconst programCache: Record<string, GlProgram> = Object.create(null);\n\n/**\n * A wrapper for a WebGL Program. You can create one and then pass it to a shader.\n * This will manage the WebGL program that is compiled and uploaded to the GPU.\n *\n * To get the most out of this class, you should be familiar with glsl shaders and how they work.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram\n * @example\n *\n * // Create a new program\n * const program = new GlProgram({\n *   vertex: '...',\n *   fragment: '...',\n * });\n *\n *\n * There are a few key things that pixi shader will do for you automatically:\n * <br>\n * - If no precision is provided in the shader, it will be injected into the program source for you.\n * This precision will be taken form the options provided, if none is provided,\n * then the program will default to the defaultOptions.\n * <br>\n * - It will inject the program name into the shader source if none is provided.\n * <br>\n *  - It will set the program version to 300 es.\n *\n * For optimal usage and best performance, its best to reuse programs as much as possible.\n * You should use the {@link GlProgram.from} helper function to create programs.\n * @class\n * @memberof rendering\n */\nexport class GlProgram\n{\n    /** The default options used by the program. */\n    public static defaultOptions: Partial<GlProgramOptions> = {\n        preferredVertexPrecision: 'highp',\n        preferredFragmentPrecision: 'mediump',\n    };\n\n    /** the fragment glsl shader source. */\n    public readonly fragment?: string;\n    /** the vertex glsl shader source */\n    public readonly vertex?: string;\n    /**\n     * attribute data extracted from the program once created this happens when the program is used for the first time\n     * @internal\n     * @ignore\n     */\n    public _attributeData: Record<string, ExtractedAttributeData>;\n    /**\n     * uniform data extracted from the program once created this happens when the program is used for the first time\n     * @internal\n     * @ignore\n     */\n    public _uniformData: Record<string, GlUniformData>;\n    /**\n     * uniform data extracted from the program once created this happens when the program is used for the first time\n     * @internal\n     * @ignore\n     */\n    public _uniformBlockData: Record<string, GlUniformBlockData>;\n    /** details on how to use this program with transform feedback */\n    public transformFeedbackVaryings?: {names: string[], bufferMode: 'separate' | 'interleaved'};\n    /**\n     * the key that identifies the program via its source vertex + fragment\n     * @internal\n     * @ignore\n     */\n    public readonly _key: number;\n\n    /**\n     * Creates a shiny new GlProgram. Used by WebGL renderer.\n     * @param options - The options for the program.\n     */\n    constructor(options: GlProgramOptions)\n    {\n        options = { ...GlProgram.defaultOptions, ...options };\n\n        // only need to check one as they both need to be the same or\n        // errors ensue!\n        const isES300 = options.fragment.indexOf('#version 300 es') !== -1;\n\n        const preprocessorOptions = {\n            stripVersion: isES300,\n            ensurePrecision: {\n                requestedFragmentPrecision: options.preferredFragmentPrecision,\n                requestedVertexPrecision: options.preferredVertexPrecision,\n                maxSupportedVertexPrecision: 'highp',\n                maxSupportedFragmentPrecision: getMaxFragmentPrecision(),\n            },\n            setProgramName: {\n                name: options.name,\n            },\n            addProgramDefines: isES300,\n            insertVersion: isES300\n        };\n\n        let fragment = options.fragment;\n        let vertex = options.vertex;\n\n        Object.keys(processes).forEach((processKey) =>\n        {\n            const processOptions = preprocessorOptions[processKey as keyof typeof preprocessorOptions];\n\n            fragment = processes[processKey](fragment, processOptions, true);\n            vertex = processes[processKey](vertex, processOptions, false);\n        });\n\n        this.fragment = fragment;\n        this.vertex = vertex;\n\n        this._key = createIdFromString(`${this.vertex}:${this.fragment}`, 'gl-program');\n    }\n\n    /** destroys the program */\n    public destroy(): void\n    {\n        (this.fragment as null) = null;\n        (this.vertex as null) = null;\n\n        this._attributeData = null;\n        this._uniformData = null;\n        this._uniformBlockData = null;\n\n        this.transformFeedbackVaryings = null;\n    }\n\n    /**\n     * Helper function that creates a program for a given source.\n     * It will check the program cache if the program has already been created.\n     * If it has that one will be returned, if not a new one will be created and cached.\n     * @param options - The options for the program.\n     * @returns A program using the same source\n     */\n    public static from(options: GlProgramOptions): GlProgram\n    {\n        const key = `${options.vertex}:${options.fragment}`;\n\n        if (!programCache[key])\n        {\n            programCache[key] = new GlProgram(options);\n        }\n\n        return programCache[key];\n    }\n}\n",null,"import { getTestContext } from './getTestContext';\n\nimport type { PRECISION } from '../const';\n\nlet maxFragmentPrecision: PRECISION;\n\nexport function getMaxFragmentPrecision(): PRECISION\n{\n    if (!maxFragmentPrecision)\n    {\n        maxFragmentPrecision = 'mediump';\n        const gl = getTestContext();\n\n        if (gl)\n        {\n            if (gl.getShaderPrecisionFormat)\n            {\n                const shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n\n                maxFragmentPrecision = shaderFragment.precision ? 'highp' : 'mediump';\n            }\n        }\n    }\n\n    return maxFragmentPrecision;\n}\n",null,"import { DOMAdapter } from '../../../../../environment/adapter';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\n\nlet context: GlRenderingContext;\n\n/**\n * returns a little WebGL context to use for program inspection.\n * @static\n * @private\n * @returns {WebGLRenderingContext} a gl context to test with\n */\nexport function getTestContext(): GlRenderingContext\n{\n    if (!context || context?.isContextLost())\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        context = canvas.getContext('webgl', {}) as GlRenderingContext;\n    }\n\n    return context;\n}\n",null,"export function addProgramDefines(src: string, isES300: boolean, isFragment?: boolean)\n{\n    if (isES300) return src;\n\n    if (isFragment)\n    {\n        src = src.replace('out vec4 finalColor;', '');\n\n        return `\n        \n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in varying\n        #define finalColor gl_FragColor\n        #define texture texture2D\n        #endif\n        ${src}\n        `;\n    }\n\n    return `\n        \n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in attribute\n        #define out varying\n        #endif\n        ${src}\n        `;\n}\n",null,"import type { PRECISION } from '../../const';\n\ninterface EnsurePrecisionOptions\n{\n    requestedVertexPrecision: PRECISION;\n    requestedFragmentPrecision: PRECISION;\n    maxSupportedVertexPrecision: PRECISION;\n    maxSupportedFragmentPrecision: PRECISION;\n}\n\n/**\n * Sets the float precision on the shader, ensuring the device supports the request precision.\n * If the precision is already present, it just ensures that the device is able to handle it.\n * @param src\n * @param options\n * @param options.requestedVertexPrecision\n * @param options.requestedFragmentPrecision\n * @param options.maxSupportedVertexPrecision\n * @param options.maxSupportedFragmentPrecision\n * @param isFragment\n * @private\n */\nexport function ensurePrecision(\n    src: string,\n    options: EnsurePrecisionOptions,\n    isFragment: boolean,\n): string\n{\n    const maxSupportedPrecision = isFragment ? options.maxSupportedFragmentPrecision : options.maxSupportedVertexPrecision;\n\n    if (src.substring(0, 9) !== 'precision')\n    {\n        // no precision supplied, so PixiJS will add the requested level.\n        let precision = isFragment ? options.requestedFragmentPrecision : options.requestedVertexPrecision;\n\n        // If highp is requested but not supported, downgrade precision to a level all devices support.\n        if (precision === 'highp' && maxSupportedPrecision !== 'highp')\n        {\n            precision = 'mediump';\n        }\n\n        return `precision ${precision} float;\\n${src}`;\n    }\n    else if (maxSupportedPrecision !== 'highp' && src.substring(0, 15) === 'precision highp')\n    {\n        // precision was supplied, but at a level this device does not support, so downgrading to mediump.\n        return src.replace('precision highp', 'precision mediump');\n    }\n\n    return src;\n}\n",null,"export function insertVersion(src: string, isES300: boolean): string\n{\n    if (!isES300) return src;\n\n    return `#version 300 es\\n${src}`;\n}\n",null,"const fragmentNameCache: { [key: string]: number } = {};\nconst VertexNameCache: { [key: string]: number } = {};\n\nexport function setProgramName(src: string, { name = `pixi-program` }: { name: string; }, isFragment = true)\n{\n    name = name.replace(/\\s+/g, '-');\n\n    name += isFragment ? '-fragment' : '-vertex';\n\n    const nameCache = isFragment ? fragmentNameCache : VertexNameCache;\n\n    if (nameCache[name])\n    {\n        nameCache[name]++;\n        name += `-${nameCache[name]}`;\n    }\n    else\n    {\n        nameCache[name] = 1;\n    }\n\n    // if it already contains the define return\n    if (src.indexOf('#define SHADER_NAME') !== -1) return src;\n\n    const shaderName = `#define SHADER_NAME ${name}`;\n\n    return `${shaderName}\\n${src}`;\n}\n",null,"export function stripVersion(src: string, isES300: boolean): string\n{\n    if (!isES300) return src;\n\n    return src.replace('#version 300 es', '');\n}\n",null,"import { createIdFromString } from '../../shared/utils/createIdFromString';\nimport { extractAttributesFromGpuProgram } from './utils/extractAttributesFromGpuProgram';\nimport { extractStructAndGroups } from './utils/extractStructAndGroups';\nimport { generateGpuLayoutGroups } from './utils/generateGpuLayoutGroups';\nimport { generateLayoutHash } from './utils/generateLayoutHash';\nimport { removeStructAndGroupDuplicates } from './utils/removeStructAndGroupDuplicates';\n\nimport type { ExtractedAttributeData } from '../../gl/shader/program/extractAttributesFromGlProgram';\nimport type { StructsAndGroups } from './utils/extractStructAndGroups';\n\n/**\n * a WebGPU descriptions of how the program is layed out\n * @see https://gpuweb.github.io/gpuweb/#gpupipelinelayout\n * @memberof rendering\n */\nexport type ProgramPipelineLayoutDescription = GPUBindGroupLayoutEntry[][];\n/**\n * a map the maps names of uniforms to group indexes\n * @memberof rendering\n */\nexport type ProgramLayout = Record<string, number>[];\n\n/**\n * the program source\n * @memberof rendering\n */\nexport interface ProgramSource\n{\n    /** The wgsl source code of the shader. */\n    source: string;\n    /** The main function to run in this shader */\n    entryPoint?: string;\n}\n\n/**\n * The options for the gpu program\n * @memberof rendering\n */\nexport interface GpuProgramOptions\n{\n    /**\n     * the name of the program, this is added to the label of the GPU Program created\n     * under the hood. Makes it much easier to debug!\n     */\n    name?: string;\n    /** The fragment glsl shader source. */\n    fragment?: ProgramSource;\n    /** The vertex glsl shader source. */\n    vertex?: ProgramSource;\n    /** The layout of the program. If not provided, it will be generated from the shader sources. */\n    layout?: ProgramLayout;\n    /** The gpu layout of the program. If not provided, it will be generated from the shader sources. */\n    gpuLayout?: ProgramPipelineLayoutDescription;\n}\n\nconst programCache: Record<string, GpuProgram> = Object.create(null);\n\n/**\n * A wrapper for a WebGPU Program, specifically designed for the WebGPU renderer.\n * This class facilitates the creation and management of shader code that integrates with the WebGPU pipeline.\n *\n * To leverage the full capabilities of this class, familiarity with WGSL shaders is recommended.\n * @see https://gpuweb.github.io/gpuweb/#index\n * @example\n *\n * // Create a new program\n * const program = new GpuProgram({\n *   vertex: {\n *    source: '...',\n *    entryPoint: 'main',\n *   },\n *   fragment:{\n *    source: '...',\n *    entryPoint: 'main',\n *   },\n * });\n *\n *\n * Note: Both fragment and vertex shader sources can coexist within a single WGSL source file\n * this can make things a bit simpler.\n *\n * For optimal usage and best performance, it help to reuse programs whenever possible.\n * The {@link GpuProgram.from} helper function is designed for this purpose, utilizing an\n * internal cache to efficiently manage and retrieve program instances.\n * By leveraging this function, you can significantly reduce overhead and enhance the performance of your rendering pipeline.\n *\n * An important distinction between WebGL and WebGPU regarding program data retrieval:\n * While WebGL allows extraction of program information directly from its compiled state,\n * WebGPU does not offer such a capability. Therefore, in the context of WebGPU, we're required\n * to manually extract the program layout information from the source code itself.\n * @memberof rendering\n */\nexport class GpuProgram\n{\n    /** The fragment glsl shader source. */\n    public readonly fragment?: ProgramSource;\n    /** The vertex glsl shader source */\n    public readonly vertex?: ProgramSource;\n\n    /**\n     * Mapping of uniform names to group indexes for organizing shader program uniforms.\n     * Automatically generated from shader sources if not provided.\n     * @example\n     * // Assuming a shader with two uniforms, `u_time` and `u_resolution`, grouped respectively:\n     * [\n     *   { \"u_time\": 0 },\n     *   { \"u_resolution\": 1 }\n     * ]\n     */\n    public readonly layout: ProgramLayout;\n\n    /**\n     * Configuration for the WebGPU bind group layouts, detailing resource organization for the shader.\n     * Generated from shader sources if not explicitly provided.\n     * @example\n     * // Assuming a shader program that requires two bind groups:\n     * [\n     *   // First bind group layout entries\n     *   [{ binding: 0, visibility: GPUShaderStage.VERTEX, type: \"uniform-buffer\" }],\n     *   // Second bind group layout entries\n     *   [{ binding: 1, visibility: GPUShaderStage.FRAGMENT, type: \"sampler\" },\n     *    { binding: 2, visibility: GPUShaderStage.FRAGMENT, type: \"sampled-texture\" }]\n     * ]\n     */\n    public readonly gpuLayout: ProgramPipelineLayoutDescription;\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public _layoutKey = 0;\n\n    /** the structs and groups extracted from the shader sources */\n    public readonly structsAndGroups: StructsAndGroups;\n    /**\n     * the name of the program, this is added to the label of the GPU Program created under the hood.\n     * Makes it much easier to debug!\n     */\n    public readonly name: string;\n    private _attributeData: Record<string, ExtractedAttributeData>;\n\n    /** if true, the program will automatically assign global uniforms to group[0] */\n    public autoAssignGlobalUniforms: boolean;\n    /** if true, the program will automatically assign local uniforms to group[1] */\n    public autoAssignLocalUniforms: boolean;\n\n    /**\n     * Create a new GpuProgram\n     * @param options - The options for the gpu program\n     */\n    constructor(options: GpuProgramOptions)\n    {\n        const { fragment, vertex, layout, gpuLayout, name } = options;\n\n        this.name = name;\n\n        this.fragment = fragment;\n        this.vertex = vertex;\n\n        // TODO this should be cached - or dealt with at a system level.\n        if (fragment.source === vertex.source)\n        {\n            const structsAndGroups = extractStructAndGroups(fragment.source);\n\n            this.structsAndGroups = structsAndGroups;\n        }\n        else\n        {\n            const vertexStructsAndGroups = extractStructAndGroups(vertex.source);\n            const fragmentStructsAndGroups = extractStructAndGroups(fragment.source);\n\n            this.structsAndGroups = removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups);\n        }\n\n        // todo layout\n        this.layout = layout ?? generateLayoutHash(this.structsAndGroups);\n\n        // struct properties!\n\n        this.gpuLayout = gpuLayout ?? generateGpuLayoutGroups(this.structsAndGroups);\n\n        this.autoAssignGlobalUniforms = !!(this.layout[0]?.globalUniforms !== undefined);\n        this.autoAssignLocalUniforms = !!(this.layout[1]?.localUniforms !== undefined);\n\n        this._generateProgramKey();\n    }\n\n    // TODO maker this pure\n    private _generateProgramKey()\n    {\n        const { vertex, fragment } = this;\n\n        const bigKey = vertex.source + fragment.source + vertex.entryPoint + fragment.entryPoint;\n\n        this._layoutKey = createIdFromString(bigKey, 'program');\n    }\n\n    get attributeData()\n    {\n        this._attributeData ??= extractAttributesFromGpuProgram(this.vertex);\n\n        return this._attributeData;\n    }\n    /** destroys the program */\n    public destroy(): void\n    {\n        (this.gpuLayout as null) = null;\n        (this.layout as null) = null;\n        (this.structsAndGroups as null) = null;\n        (this.fragment as null) = null;\n        (this.vertex as null) = null;\n    }\n\n    /**\n     * Helper function that creates a program for a given source.\n     * It will check the program cache if the program has already been created.\n     * If it has that one will be returned, if not a new one will be created and cached.\n     * @param options - The options for the program.\n     * @returns A program using the same source\n     */\n    public static from(options: GpuProgramOptions): GpuProgram\n    {\n        // eslint-disable-next-line max-len\n        const key = `${options.vertex.source}:${options.fragment.source}:${options.fragment.entryPoint}:${options.vertex.entryPoint}`;\n\n        if (!programCache[key])\n        {\n            programCache[key] = new GpuProgram(options);\n        }\n\n        return programCache[key];\n    }\n}\n\n",null,"import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { ExtractedAttributeData } from '../../../gl/shader/program/extractAttributesFromGlProgram';\nimport type { VertexFormat } from '../../../shared/geometry/const';\nimport type { ProgramSource } from '../GpuProgram';\n\nconst WGSL_TO_VERTEX_TYPES: Record<string, VertexFormat> = {\n\n    f32:  'float32',\n    'vec2<f32>': 'float32x2',\n    'vec3<f32>': 'float32x3',\n    'vec4<f32>': 'float32x4',\n    vec2f: 'float32x2',\n    vec3f: 'float32x3',\n    vec4f: 'float32x4',\n\n    i32: 'sint32',\n    'vec2<i32>': 'sint32x2',\n    'vec3<i32>': 'sint32x3',\n    'vec4<i32>': 'sint32x4',\n\n    u32: 'uint32',\n    'vec2<u32>': 'uint32x2',\n    'vec3<u32>': 'uint32x3',\n    'vec4<u32>': 'uint32x4',\n\n    bool: 'uint32',\n    'vec2<bool>': 'uint32x2',\n    'vec3<bool>': 'uint32x3',\n    'vec4<bool>': 'uint32x4',\n};\n\nexport function extractAttributesFromGpuProgram(\n    { source, entryPoint }: ProgramSource\n): Record<string, ExtractedAttributeData>\n{\n    const results: Record<string, ExtractedAttributeData> = {};\n\n    // Step 1: Find the start of the mainVert function using string methods\n    const mainVertStart = source.indexOf(`fn ${entryPoint}`);\n\n    if (mainVertStart !== -1)\n    {\n        // Step 2: Find the index of the next '->' after the start of the mainVert function\n        const arrowFunctionStart = source.indexOf('->', mainVertStart);\n\n        if (arrowFunctionStart !== -1)\n        {\n            const functionArgsSubstring = source.substring(mainVertStart, arrowFunctionStart);\n\n            // Apply the inputs regex directly to the trimmed string\n            const inputsRegex = /@location\\((\\d+)\\)\\s+([a-zA-Z0-9_]+)\\s*:\\s*([a-zA-Z0-9_<>]+)(?:,|\\s|$)/g;\n            let match;\n\n            while ((match = inputsRegex.exec(functionArgsSubstring)) !== null)\n            {\n                const format = WGSL_TO_VERTEX_TYPES[match[3] as VertexFormat] ?? 'float32';\n\n                results[match[2]] = {\n                    location: parseInt(match[1], 10),\n                    format,\n                    stride: getAttributeInfoFromFormat(format).stride,\n                    offset: 0,\n                    instance: false,\n                    start: 0,\n                };\n            }\n        }\n    }\n\n    return results;\n}\n",null,"import type { VertexFormat } from '../const';\n\nconst attributeFormatData = {\n    uint8x2: { size: 2, stride: 2, normalised: false },\n    uint8x4: { size: 4, stride: 4, normalised: false },\n    sint8x2: { size: 2, stride: 2, normalised: false },\n    sint8x4: { size: 4, stride: 4, normalised: false },\n    unorm8x2: { size: 2, stride: 2, normalised: true },\n    unorm8x4: { size: 4, stride: 4, normalised: true },\n    snorm8x2: { size: 2, stride: 2, normalised: true },\n    snorm8x4: { size: 4, stride: 4, normalised: true },\n    uint16x2: { size: 2, stride: 4, normalised: false },\n    uint16x4: { size: 4, stride: 8, normalised: false },\n    sint16x2: { size: 2, stride: 4, normalised: false },\n    sint16x4: { size: 4, stride: 8, normalised: false },\n    unorm16x2: { size: 2, stride: 4, normalised: true },\n    unorm16x4: { size: 4, stride: 8, normalised: true },\n    snorm16x2: { size: 2, stride: 4, normalised: true },\n    snorm16x4: { size: 4, stride: 8, normalised: true },\n    float16x2: { size: 2, stride: 4, normalised: false },\n    float16x4: { size: 4, stride: 8, normalised: false },\n    float32: { size: 1, stride: 4, normalised: false },\n    float32x2: { size: 2, stride: 8, normalised: false },\n    float32x3: { size: 3, stride: 12, normalised: false },\n    float32x4: { size: 4, stride: 16, normalised: false },\n    uint32: { size: 1, stride: 4, normalised: false },\n    uint32x2: { size: 2, stride: 8, normalised: false },\n    uint32x3: { size: 3, stride: 12, normalised: false },\n    uint32x4: { size: 4, stride: 16, normalised: false },\n    sint32: { size: 1, stride: 4, normalised: false },\n    sint32x2: { size: 2, stride: 8, normalised: false },\n    sint32x3: { size: 3, stride: 12, normalised: false },\n    sint32x4: { size: 4, stride: 16, normalised: false },\n};\n\nexport function getAttributeInfoFromFormat(format: VertexFormat): { size: number; stride: number; normalised: boolean }\n{\n    return attributeFormatData[format] ?? attributeFormatData.float32;\n}\n",null,"export interface StructsAndGroups\n{\n    groups: {\n        group: number;\n        binding: number;\n        name: string;\n        isUniform: boolean;\n        type: string;\n    }[];\n    structs: {\n        name: string;\n        members: Record<string, string>;\n    }[];\n}\n\nexport function extractStructAndGroups(wgsl: string): StructsAndGroups\n{\n    // Patterns for parsing the WGSL file\n    const linePattern = /(^|[^/])@(group|binding)\\(\\d+\\)[^;]+;/g;\n    const groupPattern = /@group\\((\\d+)\\)/;\n    const bindingPattern = /@binding\\((\\d+)\\)/;\n    const namePattern = /var(<[^>]+>)? (\\w+)/;\n    const typePattern = /:\\s*(\\w+)/;\n    const structPattern = /struct\\s+(\\w+)\\s*{([^}]+)}/g;\n    const structMemberPattern = /(\\w+)\\s*:\\s*([\\w\\<\\>]+)/g;\n    const structName = /struct\\s+(\\w+)/;\n\n    // Find the @group and @binding annotations\n    const groups = wgsl.match(linePattern)?.map((item) => ({\n        group: parseInt(item.match(groupPattern)[1], 10),\n        binding: parseInt(item.match(bindingPattern)[1], 10),\n        name: item.match(namePattern)[2],\n        isUniform: item.match(namePattern)[1] === '<uniform>',\n        type: item.match(typePattern)[1],\n    }));\n\n    if (!groups)\n    {\n        return {\n            groups: [],\n            structs: [],\n        };\n    }\n\n    // Find the structs\n    const structs = wgsl\n        .match(structPattern)\n        ?.map((struct) =>\n        {\n            const name = struct.match(structName)[1];\n            const members = struct.match(structMemberPattern).reduce((acc: Record<string, string>, member) =>\n            {\n                const [name, type] = member.split(':');\n\n                acc[name.trim()] = type.trim();\n\n                return acc;\n            }, {});\n\n            if (!members)\n            {\n                return null;\n            }\n\n            return { name, members };\n            // Only include the structs mentioned in the @group/@binding annotations\n        })\n        .filter(({ name }) => groups.some((group) => group.type === name)) ?? [];\n\n    return {\n        groups,\n        structs,\n    };\n}\n",null,"import { ShaderStage } from '../../../shared/shader/const';\n\nimport type { ProgramPipelineLayoutDescription } from '../GpuProgram';\nimport type { StructsAndGroups } from './extractStructAndGroups';\n\nexport function generateGpuLayoutGroups({ groups }: StructsAndGroups): ProgramPipelineLayoutDescription\n{\n    const layout: ProgramPipelineLayoutDescription = [];\n\n    for (let i = 0; i < groups.length; i++)\n    {\n        const group = groups[i];\n\n        if (!layout[group.group])\n        {\n            layout[group.group] = [];\n        }\n\n        if (group.isUniform)\n        {\n            layout[group.group].push({\n                binding: group.binding,\n                visibility: ShaderStage.VERTEX | ShaderStage.FRAGMENT,\n                buffer: {\n                    type: 'uniform'\n                }\n            });\n        }\n        else if (group.type === 'sampler')\n        {\n            layout[group.group].push({\n                binding: group.binding,\n                visibility: ShaderStage.FRAGMENT,\n                sampler: {\n                    type: 'filtering'\n                }\n            });\n        }\n        else if (group.type === 'texture_2d')\n        {\n            layout[group.group].push({\n                binding: group.binding,\n                visibility: ShaderStage.FRAGMENT,\n                texture: {\n                    sampleType: 'float',\n                    viewDimension: '2d',\n                    multisampled: false,\n                }\n            });\n        }\n    }\n\n    return layout;\n}\n",null,"export enum ShaderStage\n    {\n    VERTEX = 1,\n    FRAGMENT = 2,\n    COMPUTE = 4\n}\n",null,"import type { ProgramLayout } from '../GpuProgram';\nimport type { StructsAndGroups } from './extractStructAndGroups';\n\nexport function generateLayoutHash({ groups }: StructsAndGroups): ProgramLayout\n{\n    const layout: ProgramLayout = [];\n\n    for (let i = 0; i < groups.length; i++)\n    {\n        const group = groups[i];\n\n        if (!layout[group.group])\n        {\n            layout[group.group] = {};\n        }\n\n        layout[group.group][group.name] = group.binding;\n    }\n\n    return layout;\n}\n",null,"import type { StructsAndGroups } from './extractStructAndGroups';\n\nexport function removeStructAndGroupDuplicates(\n    vertexStructsAndGroups: StructsAndGroups,\n    fragmentStructsAndGroups: StructsAndGroups\n)\n{\n    const structNameSet = new Set();\n    const dupeGroupKeySet = new Set();\n\n    const structs = [...vertexStructsAndGroups.structs, ...fragmentStructsAndGroups.structs]\n        .filter((struct) =>\n        {\n            if (structNameSet.has(struct.name))\n            {\n                return false;\n            }\n            structNameSet.add(struct.name);\n\n            return true;\n        });\n\n    const groups = [...vertexStructsAndGroups.groups, ...fragmentStructsAndGroups.groups]\n        .filter((group) =>\n        {\n            const key = `${group.name}-${group.binding}`;\n\n            if (dupeGroupKeySet.has(key))\n            {\n                return false;\n            }\n            dupeGroupKeySet.add(key);\n\n            return true;\n        });\n\n    return { structs, groups };\n}\n",null,"import { addBits } from './utils/addBits';\nimport { compileHooks } from './utils/compileHooks';\nimport { compileInputs } from './utils/compileInputs';\nimport { compileOutputs } from './utils/compileOutputs';\nimport { injectBits } from './utils/injectBits';\n\nimport type { HighShaderBit, HighShaderSource } from './types';\n\n/** A high template consists of vertex and fragment source */\nexport interface HighShaderTemplate\n{\n    name?: string;\n    fragment: string;\n    vertex: string;\n}\n\nexport interface CompileHighShaderOptions\n{\n    template: HighShaderTemplate;\n    bits: HighShaderBit[];\n}\n\nconst cacheMap: {[key: string]: HighShaderSource} = Object.create(null);\nconst bitCacheMap: Map<HighShaderBit, number> = new Map();\n\nlet CACHE_UID = 0;\n\n/**\n * This function will take a HighShader template, some High fragments and then merge them in to a shader source.\n * @param options\n * @param options.template\n * @param options.bits\n */\nexport function compileHighShader({\n    template,\n    bits\n}: CompileHighShaderOptions): HighShaderSource\n{\n    const cacheId = generateCacheId(template, bits);\n\n    if (cacheMap[cacheId]) return cacheMap[cacheId];\n\n    const { vertex, fragment } = compileInputsAndOutputs(template, bits);\n\n    cacheMap[cacheId] = compileBits(vertex, fragment, bits);\n\n    return cacheMap[cacheId];\n}\n\nexport function compileHighShaderGl({\n    template,\n    bits\n}: CompileHighShaderOptions): HighShaderSource\n{\n    const cacheId = generateCacheId(template, bits);\n\n    if (cacheMap[cacheId]) return cacheMap[cacheId];\n\n    cacheMap[cacheId] = compileBits(template.vertex, template.fragment, bits);\n\n    return cacheMap[cacheId];\n}\n\nfunction compileInputsAndOutputs(template: HighShaderTemplate, bits: HighShaderBit[])\n{\n    const vertexFragments = bits.map((shaderBit) => shaderBit.vertex).filter((v) => !!v);\n    const fragmentFragments = bits.map((shaderBit) => shaderBit.fragment).filter((v) => !!v);\n\n    // WebGPU compile inputs and outputs..\n    let compiledVertex = compileInputs(vertexFragments, template.vertex, true);\n\n    compiledVertex = compileOutputs(vertexFragments, compiledVertex);\n\n    const compiledFragment = compileInputs(fragmentFragments, template.fragment, true);\n\n    return {\n        vertex: compiledVertex,\n        fragment: compiledFragment,\n    };\n}\n\nfunction generateCacheId(template: HighShaderTemplate, bits: HighShaderBit[]): string\n{\n    return bits\n        .map((highFragment) =>\n        {\n            if (!bitCacheMap.has(highFragment))\n            {\n                bitCacheMap.set(highFragment, CACHE_UID++);\n            }\n\n            return bitCacheMap.get(highFragment);\n        })\n        .sort((a, b) => a - b)\n        .join('-') + template.vertex + template.fragment;\n}\n\nfunction compileBits(vertex: string, fragment: string, bits: HighShaderBit[])\n{\n    const vertexParts = compileHooks(vertex);\n    const fragmentParts = compileHooks(fragment);\n\n    bits.forEach((shaderBit) =>\n    {\n        addBits(shaderBit.vertex, vertexParts, shaderBit.name);\n        addBits(shaderBit.fragment, fragmentParts, shaderBit.name);\n    });\n\n    return {\n        vertex: injectBits(vertex, vertexParts),\n        fragment: injectBits(fragment, fragmentParts),\n    };\n}\n",null,"import { warn } from '../../../../utils/logging/warn';\n\n/**\n * takes the HighFragment source parts and adds them to the hook hash\n * @param srcParts - the hash of hook arrays\n * @param parts - the code to inject into the hooks\n * @param name - optional the name of the part to add\n */\nexport function addBits(srcParts: Record<string, string>, parts: Record<string, string[]>, name?: string)\n{\n    if (srcParts)\n    {\n        for (const i in srcParts)\n        {\n            const id = i.toLocaleLowerCase();\n\n            const part = parts[id];\n\n            if (part)\n            {\n                let sanitisedPart = srcParts[i];\n\n                if (i === 'header')\n                {\n                    sanitisedPart = sanitisedPart\n                        .replace(/@in\\s+[^;]+;\\s*/g, '')\n                        .replace(/@out\\s+[^;]+;\\s*/g, '');\n                }\n\n                if (name)\n                {\n                    part.push(`//----${name}----//`);\n                }\n                part.push(sanitisedPart);\n            }\n\n            else\n            {\n                // #if _DEBUG\n                warn(`${i} placement hook does not exist in shader`);\n                // #endif\n            }\n        }\n    }\n}\n",null,"export const findHooksRx = /\\{\\{(.*?)\\}\\}/g;\n\n/**\n * takes a program string and returns an hash mapping the hooks to empty arrays\n * @param programSrc - the program containing hooks\n */\nexport function compileHooks(programSrc: string): Record<string, string[]>\n{\n    const parts: Record<string, string[]> = {};\n\n    const partMatches = programSrc\n        .match(findHooksRx)\n        ?.map((hook) => hook.replace(/[{()}]/g, '')) ?? [];\n\n    partMatches.forEach((hook) =>\n    {\n        parts[hook] = [];\n    });\n\n    return parts;\n}\n",null,"function extractInputs(fragmentSource: string, out: string[])\n{\n    let match;\n    const regex = /@in\\s+([^;]+);/g;\n\n    while ((match = regex.exec(fragmentSource)) !== null)\n    {\n        out.push(match[1]);\n    }\n}\n\nexport function compileInputs(fragments: any[], template: string, sort = false)\n{\n    // get all the inputs from the fragments..\n    const results: string[] = [];\n\n    extractInputs(template, results);\n\n    fragments.forEach((fragment) =>\n    {\n        if (fragment.header)\n        {\n            extractInputs(fragment.header, results);\n        }\n    });\n\n    // build the input:\n    const mainInput = results;\n\n    if (sort)\n    {\n        mainInput.sort();\n    }\n\n    const finalString = mainInput\n        .map((inValue, i) => `       @location(${i}) ${inValue},`)\n        .join('\\n');\n\n    // Remove lines from original string\n    let cleanedString = template.replace(/@in\\s+[^;]+;\\s*/g, '');\n\n    cleanedString = cleanedString.replace('{{in}}', `\\n${finalString}\\n`);\n\n    return cleanedString;\n}\n",null,"function extractOutputs(fragmentSource: string, out: string[])\n{\n    let match;\n    const regex = /@out\\s+([^;]+);/g;\n\n    while ((match = regex.exec(fragmentSource)) !== null)\n    {\n        out.push(match[1]);\n    }\n}\n\nfunction extractVariableName(value: string)\n{\n    const regex = /\\b(\\w+)\\s*:/g;\n\n    const match = regex.exec(value);\n\n    return match ? match[1] : '';\n}\n\nfunction stripVariable(value: string)\n{\n    const regex = /@.*?\\s+/g;\n\n    return value.replace(regex, '');\n}\n\nexport function compileOutputs(fragments: any[], template: string)\n{\n    // get all the inputs from the fragments..\n    const results: string[] = [];\n\n    extractOutputs(template, results);\n\n    fragments.forEach((fragment) =>\n    {\n        if (fragment.header)\n        {\n            extractOutputs(fragment.header, results);\n        }\n    });\n\n    let index = 0;\n\n    // generate the output struct\n    const mainStruct = results\n        .sort()\n        .map((inValue) =>\n        {\n            if (inValue.indexOf('builtin') > -1)\n            {\n                return inValue;\n            }\n\n            return `@location(${index++}) ${inValue}`;\n        })\n        .join(',\\n');\n\n    // generate the variables we will set:\n    const mainStart = results\n        .sort()\n        .map((inValue) => `       var ${stripVariable(inValue)};`)\n        .join('\\n');\n\n    // generate the return object\n    const mainEnd = `return VSOutput(\n                ${results\n        .sort()\n        .map((inValue) => ` ${extractVariableName(inValue)}`)\n        .join(',\\n')});`;\n\n    // Remove lines from original string\n    let compiledCode = template.replace(/@out\\s+[^;]+;\\s*/g, '');\n\n    compiledCode = compiledCode.replace('{{struct}}', `\\n${mainStruct}\\n`);\n    compiledCode = compiledCode.replace('{{start}}', `\\n${mainStart}\\n`);\n    compiledCode = compiledCode.replace('{{return}}', `\\n${mainEnd}\\n`);\n\n    return compiledCode;\n}\n",null,"/**\n * takes a shader src and replaces any hooks with the HighFragment code.\n * @param templateSrc - the program src template\n * @param fragmentParts - the fragments to inject\n */\nexport function injectBits(templateSrc: string, fragmentParts: Record<string, string[]>): string\n{\n    let out = templateSrc;\n\n    for (const i in fragmentParts)\n    {\n        const parts = fragmentParts[i];\n\n        const toInject = parts.join('\\n');\n\n        if (toInject.length)\n        {\n            out = out.replace(`{{${i}}}`, `//-----${i} START-----//\\n${parts.join('\\n')}\\n//----${i} FINISH----//`);\n        }\n\n        else\n        {\n            out = out.replace(`{{${i}}}`, '');\n        }\n    }\n\n    return out;\n}\n",null,"const vertexGPUTemplate = /* wgsl */`\n    @in aPosition: vec2<f32>;\n    @in aUV: vec2<f32>;\n\n    @out @builtin(position) vPosition: vec4<f32>;\n    @out vUV : vec2<f32>;\n    @out vColor : vec4<f32>;\n\n    {{header}}\n\n    struct VSOutput {\n        {{struct}}\n    };\n\n    @vertex\n    fn main( {{in}} ) -> VSOutput {\n\n        var worldTransformMatrix = globalUniforms.uWorldTransformMatrix;\n        var modelMatrix = mat3x3<f32>(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        var position = aPosition;\n        var uv = aUV;\n\n        {{start}}\n        \n        vColor = vec4<f32>(1., 1., 1., 1.);\n\n        {{main}}\n\n        vUV = uv;\n\n        var modelViewProjectionMatrix = globalUniforms.uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        vPosition =  vec4<f32>((modelViewProjectionMatrix *  vec3<f32>(position, 1.0)).xy, 0.0, 1.0);\n       \n        vColor *= globalUniforms.uWorldColorAlpha;\n\n        {{end}}\n\n        {{return}}\n    };\n`;\n\nconst fragmentGPUTemplate = /* wgsl */`\n    @in vUV : vec2<f32>;\n    @in vColor : vec4<f32>;\n   \n    {{header}}\n\n    @fragment\n    fn main(\n        {{in}}\n      ) -> @location(0) vec4<f32> {\n        \n        {{start}}\n\n        var outColor:vec4<f32>;\n      \n        {{main}}\n        \n        return outColor * vColor;\n      };\n`;\n\nconst vertexGlTemplate = /* glsl */`\n    in vec2 aPosition;\n    in vec2 aUV;\n\n    out vec4 vColor;\n    out vec2 vUV;\n\n    {{header}}\n\n    void main(void){\n\n        mat3 worldTransformMatrix = uWorldTransformMatrix;\n        mat3 modelMatrix = mat3(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        vec2 position = aPosition;\n        vec2 uv = aUV;\n        \n        {{start}}\n        \n        vColor = vec4(1.);\n        \n        {{main}}\n        \n        vUV = uv;\n        \n        mat3 modelViewProjectionMatrix = uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        gl_Position = vec4((modelViewProjectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n\n        vColor *= uWorldColorAlpha;\n\n        {{end}}\n    }\n`;\n\nconst fragmentGlTemplate = /* glsl */`\n   \n    in vec4 vColor;\n    in vec2 vUV;\n\n    out vec4 finalColor;\n\n    {{header}}\n\n    void main(void) {\n        \n        {{start}}\n\n        vec4 outColor;\n      \n        {{main}}\n        \n        finalColor = outColor * vColor;\n    }\n`;\n\nexport {\n    fragmentGlTemplate,\n    fragmentGPUTemplate,\n    vertexGlTemplate,\n    vertexGPUTemplate\n};\n",null,"export const globalUniformsBit = {\n    name: 'global-uniforms-bit',\n    vertex: {\n        header: /* wgsl */`\n        struct GlobalUniforms {\n            uProjectionMatrix:mat3x3<f32>,\n            uWorldTransformMatrix:mat3x3<f32>,\n            uWorldColorAlpha: vec4<f32>,\n            uResolution: vec2<f32>,\n        }\n\n        @group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n        `\n    }\n};\n\nexport const globalUniformsUBOBitGl = {\n    name: 'global-uniforms-ubo-bit',\n    vertex: {\n        header: /* glsl */`\n          uniform globalUniforms {\n            mat3 uProjectionMatrix;\n            mat3 uWorldTransformMatrix;\n            vec4 uWorldColorAlpha;\n            vec2 uResolution;\n          };\n        `\n    }\n};\n\nexport const globalUniformsBitGl = {\n    name: 'global-uniforms-bit',\n    vertex: {\n        header: /* glsl */`\n          uniform mat3 uProjectionMatrix;\n          uniform mat3 uWorldTransformMatrix;\n          uniform vec4 uWorldColorAlpha;\n          uniform vec2 uResolution;\n        `\n    }\n\n};\n",null,"export const colorBit = {\n    name: 'color-bit',\n    vertex: {\n        header: /* wgsl */`\n            @in aColor: vec4<f32>;\n        `,\n        main: /* wgsl */`\n            vColor *= vec4<f32>(aColor.rgb * aColor.a, aColor.a);\n        `\n    }\n};\n\nexport const colorBitGl = {\n    name: 'color-bit',\n    vertex: {\n        header: /* glsl */`\n            in vec4 aColor;\n        `,\n        main: /* glsl */`\n            vColor *= vec4(aColor.rgb * aColor.a, aColor.a);\n        `\n    }\n};\n",null,"import type { HighShaderBit } from '../compiler/types';\n\nconst textureBatchBitGpuCache: Record<number, HighShaderBit> = {};\n\n/**\n *\n * @param maxTextures - the max textures the shader can use.\n * @returns a shader bit that will allow the shader to sample multiple textures AND round pixels.\n */\nfunction generateBindingSrc(maxTextures: number): string\n{\n    const src = [];\n\n    if (maxTextures === 1)\n    {\n        src.push('@group(1) @binding(0) var textureSource1: texture_2d<f32>;');\n        src.push('@group(1) @binding(1) var textureSampler1: sampler;');\n    }\n    else\n    {\n        let bindingIndex = 0;\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            src.push(`@group(1) @binding(${bindingIndex++}) var textureSource${i + 1}: texture_2d<f32>;`);\n            src.push(`@group(1) @binding(${bindingIndex++}) var textureSampler${i + 1}: sampler;`);\n        }\n    }\n\n    return src.join('\\n');\n}\n\nfunction generateSampleSrc(maxTextures: number): string\n{\n    const src = [];\n\n    if (maxTextures === 1)\n    {\n        src.push('outColor = textureSampleGrad(textureSource1, textureSampler1, vUV, uvDx, uvDy);');\n    }\n    else\n    {\n        src.push('switch vTextureId {');\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            if (i === maxTextures - 1)\n            {\n                src.push(`  default:{`);\n            }\n            else\n            {\n                src.push(`  case ${i}:{`);\n            }\n            src.push(`      outColor = textureSampleGrad(textureSource${i + 1}, textureSampler${i + 1}, vUV, uvDx, uvDy);`);\n            src.push(`      break;}`);\n        }\n\n        src.push(`}`);\n    }\n\n    return src.join('\\n');\n}\n\nexport function generateTextureBatchBit(maxTextures: number): HighShaderBit\n{\n    if (!textureBatchBitGpuCache[maxTextures])\n    {\n        textureBatchBitGpuCache[maxTextures] = {\n            name: 'texture-batch-bit',\n            vertex: {\n                header: `\n                @in aTextureIdAndRound: vec2<u32>;\n                @out @interpolate(flat) vTextureId : u32;\n            `,\n                main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n                end: `\n                if(aTextureIdAndRound.x == 1)\n                {\n                    vPosition = vec4<f32>(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n                }\n            `\n            },\n            fragment: {\n                header: `\n                @in @interpolate(flat) vTextureId: u32;\n    \n                ${generateBindingSrc(16)}\n            `,\n                main: `\n                var uvDx = dpdx(vUV);\n                var uvDy = dpdy(vUV);\n    \n                ${generateSampleSrc(16)}\n            `\n            }\n        };\n    }\n\n    return textureBatchBitGpuCache[maxTextures];\n}\n\nconst textureBatchBitGlCache: Record<number, HighShaderBit> = {};\n\n/**\n *\n * @param maxTextures - the max textures the shader can use.\n * @returns a shader bit that will allow the shader to sample multiple textures AND round pixels.\n */\nfunction generateSampleGlSrc(maxTextures: number): string\n{\n    const src = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        if (i > 0)\n        {\n            src.push('else');\n        }\n\n        if (i < maxTextures - 1)\n        {\n            src.push(`if(vTextureId < ${i}.5)`);\n        }\n\n        src.push('{');\n        src.push(`\\toutColor = texture(uTextures[${i}], vUV);`);\n        src.push('}');\n    }\n\n    return src.join('\\n');\n}\n\nexport function generateTextureBatchBitGl(maxTextures: number): HighShaderBit\n{\n    if (!textureBatchBitGlCache[maxTextures])\n    {\n        textureBatchBitGlCache[maxTextures] = {\n            name: 'texture-batch-bit',\n            vertex: {\n                header: `\n                in vec2 aTextureIdAndRound;\n                out float vTextureId;\n              \n            `,\n                main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n                end: `\n                if(aTextureIdAndRound.x == 1.)\n                {\n                    gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n                }\n            `\n            },\n            fragment: {\n                header: `\n                in float vTextureId;\n    \n                uniform sampler2D uTextures[${maxTextures}];\n              \n            `,\n                main: `\n    \n                ${generateSampleGlSrc(16)}\n            `\n            }\n        };\n    }\n\n    return textureBatchBitGlCache[maxTextures];\n}\n",null,"export const roundPixelsBit = {\n    name: 'round-pixels-bit',\n    vertex: {\n        header: /* wgsl */`\n            fn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32> \n            {\n                return (floor((position * 0.5 + 0.5) * targetSize) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    }\n};\n\nexport const roundPixelsBitGl = {\n    name: 'round-pixels-bit',\n    vertex: {\n        header: /* glsl */`   \n            vec2 roundPixels(vec2 position, vec2 targetSize)\n            {       \n                return (floor((position * 0.5 + 0.5) * targetSize) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    }\n};\n\n",null,"import { MAX_TEXTURES } from '../../../batcher/shared/const';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\n\nconst sampleValues = new Int32Array(MAX_TEXTURES);\n\nfor (let i = 0; i < MAX_TEXTURES; i++)\n{\n    sampleValues[i] = i;\n}\n\nexport const batchSamplersUniformGroup = new UniformGroup({\n    uTextures: { value: sampleValues, type: `i32`, size: MAX_TEXTURES }\n}, { isStatic: true });\n",null,"/* eslint-disable no-new */\nimport EventEmitter from 'eventemitter3';\nimport { GlProgram } from '../../gl/shader/GlProgram';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { GpuProgram } from '../../gpu/shader/GpuProgram';\nimport { RendererType } from '../../types';\nimport { UniformGroup } from './UniformGroup';\n\nimport type { GlProgramOptions } from '../../gl/shader/GlProgram';\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { GpuProgramOptions } from '../../gpu/shader/GpuProgram';\n\n/**\n * A record of {@link BindGroup}'s used by the shader.\n *\n * `Record<number, BindGroup>`\n * @memberof rendering\n */\nexport type ShaderGroups = Record<number, BindGroup>;\n\ninterface ShaderBase\n{\n    /** The WebGL program used by the WebGL renderer. */\n    glProgram?: GlProgram\n    /** The WebGPU program used by the WebGPU renderer. */\n    gpuProgram?: GpuProgram\n    /**\n     * A number that uses two bits on whether the shader is compatible with the WebGL renderer and/or the WebGPU renderer.\n     * 0b00 - not compatible with either\n     * 0b01 - compatible with WebGL\n     * 0b10 - compatible with WebGPU\n     * This is automatically set based on if a {@link GlProgram} or {@link GpuProgram} is provided.\n     */\n    compatibleRenderers?: number\n}\n\ninterface GlShaderWith extends ShaderBase\n{\n    /** The WebGL program used by the WebGL renderer. */\n    glProgram: GlProgram\n}\n\ninterface GpuShaderWith extends ShaderBase\n{\n    /** The WebGPU program used by the WebGPU renderer. */\n    gpuProgram: GpuProgram\n}\n\ninterface ShaderWithGroupsDescriptor\n{\n    /** A record of {@link BindGroup}'s used by the shader. */\n    groups: ShaderGroups;\n    /** an optional map of how to bind the groups. This is automatically generated by reading the WebGPU program */\n    groupMap?: Record<string, Record<string, any>>;\n}\n\ninterface ShaderWithResourcesDescriptor\n{\n    /**\n     * A key value of uniform resources used by the shader.\n     * Under the hood pixi will look at the provided shaders and figure out where\n     * the resources are mapped. Its up to you to make sure the resource key\n     * matches the uniform name in the webGPU program. WebGL is a little more forgiving!\n     */\n    resources?: Record<string, any>;\n}\n\ninterface GroupsData\n{\n    group: number\n    binding: number\n    name: string\n}\n\n/**\n * A descriptor for a shader\n * @memberof rendering\n */\nexport type ShaderWith = GlShaderWith | GpuShaderWith;\n\n/**\n * A descriptor for a shader with groups.\n * @memberof rendering\n */\nexport type ShaderWithGroups = ShaderWithGroupsDescriptor & ShaderWith;\nexport interface IShaderWithGroups extends ShaderWithGroupsDescriptor, ShaderBase {}\n\n/**\n * A descriptor for a shader with resources. This is an easier way to work with uniforms.\n * especially when you are not working with bind groups\n * @memberof rendering\n */\nexport type ShaderWithResources = ShaderWithResourcesDescriptor & ShaderWith;\nexport interface IShaderWithResources extends ShaderWithResourcesDescriptor, ShaderBase {}\n\nexport type ShaderDescriptor = ShaderWithGroups & ShaderWithResources;\n\ntype GlShaderFromWith = {\n    gpu?: GpuProgramOptions,\n    gl: GlProgramOptions\n};\ntype GpuShaderFromWith = {\n    gpu: GpuProgramOptions,\n    gl?: GlProgramOptions\n};\nexport type ShaderFromGroups = (GlShaderFromWith | GpuShaderFromWith) & Omit<ShaderWithGroups, 'glProgram' | 'gpuProgram'>;\nexport type ShaderFromResources = (GlShaderFromWith | GpuShaderFromWith)\n& Omit<ShaderWithResources, 'glProgram' | 'gpuProgram'>;\n\n/**\n * The Shader class is an integral part of the PixiJS graphics pipeline.\n * Central to rendering in PixiJS are two key elements: A [shader] and a [geometry].\n * The shader incorporates a {@link GlProgram} for WebGL or a {@link GpuProgram} for WebGPU,\n * instructing the respective technology on how to render the geometry.\n *\n * The primary goal of the Shader class is to offer a unified interface compatible with both WebGL and WebGPU.\n * When constructing a shader, you need to provide both a WebGL program and a WebGPU program due to the distinctions\n * between the two rendering engines. If only one is provided, the shader won't function with the omitted renderer.\n *\n * Both WebGL and WebGPU utilize the same resource object when passed into the shader.\n * Post-creation, the shader's interface remains consistent across both WebGL and WebGPU.\n * The sole distinction lies in whether a glProgram or a gpuProgram is employed.\n *\n * Modifying shader uniforms, which can encompass:\n *  - TextureSampler {@link TextureStyle}\n *  - TextureSource {@link TextureSource}\n *  - UniformsGroups {@link UniformGroup}\n * @example\n *\n * const shader = new Shader({\n *     glProgram: glProgram,\n *     gpuProgram: gpuProgram,\n *     resources: {\n *         uTexture: texture.source,\n *         uSampler: texture.sampler,\n *         uColor: [1, 0, 0, 1],\n *     },\n * });\n *\n * // update the uniforms\n * shader.resources.uColor[1] = 1;\n * shader.resources.uTexture = texture2.source;\n * @class\n * @memberof rendering\n */\nexport class Shader extends EventEmitter<{'destroy': Shader}>\n{\n    /** An instance of the GPU program used by the WebGPU renderer */\n    public gpuProgram: GpuProgram;\n    /** An instance of the GL program used by the WebGL renderer */\n    public glProgram: GlProgram;\n    /**\n     * A number that uses two bits on whether the shader is compatible with the WebGL renderer and/or the WebGPU renderer.\n     * 0b00 - not compatible with either\n     * 0b01 - compatible with WebGL\n     * 0b10 - compatible with WebGPU\n     * This is automatically set based on if a {@link GlProgram} or {@link GpuProgram} is provided.\n     */\n    public readonly compatibleRenderers: number;\n    /** */\n    public groups: Record<number, BindGroup>;\n    /** A record of the resources used by the shader. */\n    public resources: Record<string, any>;\n    /**\n     * A record of the uniform groups and resources used by the shader.\n     * This is used by WebGL renderer to sync uniform data.\n     * @internal\n     * @ignore\n     */\n    public _uniformBindMap: Record<number, Record<number, string>> = Object.create(null);\n    private readonly _ownedBindGroups: BindGroup[] = [];\n\n    /**\n     * Fired after rendering finishes.\n     * @event rendering.Shader#destroy\n     */\n\n    /**\n     * There are two ways to create a shader.\n     * one is to pass in resources which is a record of uniform groups and resources.\n     * another is to pass in groups which is a record of {@link BindGroup}s.\n     * this second method is really to make use of shared {@link BindGroup}s.\n     * For most cases you will want to use resources as they are easier to work with.\n     * USe Groups if you want to share {@link BindGroup}s between shaders.\n     * you cannot mix and match - either use resources or groups.\n     * @param {ShaderWithResourcesDescriptor} options - The options for the shader using ShaderWithResourcesDescriptor.\n     */\n    constructor(options: ShaderWithResources);\n    constructor(options: ShaderWithGroups);\n    constructor(options: ShaderDescriptor)\n    {\n        super();\n\n        /* eslint-disable prefer-const */\n        let {\n            gpuProgram,\n            glProgram,\n            groups,\n            resources,\n            compatibleRenderers,\n            groupMap\n        } = options;\n        /* eslint-enable prefer-const */\n\n        this.gpuProgram = gpuProgram;\n        this.glProgram = glProgram;\n\n        if (compatibleRenderers === undefined)\n        {\n            compatibleRenderers = 0;\n\n            if (gpuProgram)compatibleRenderers |= RendererType.WEBGPU;\n            if (glProgram)compatibleRenderers |= RendererType.WEBGL;\n        }\n\n        this.compatibleRenderers = compatibleRenderers;\n\n        const nameHash: Record<string, GroupsData> = {};\n\n        if (!resources && !groups)\n        {\n            resources = {};\n        }\n\n        if (resources && groups)\n        {\n            throw new Error('[Shader] Cannot have both resources and groups');\n        }\n        else if (!gpuProgram && groups && !groupMap)\n        {\n            throw new Error('[Shader] No group map or WebGPU shader provided - consider using resources instead.');\n        }\n        else if (!gpuProgram && groups && groupMap)\n        {\n            for (const i in groupMap)\n            {\n                for (const j in groupMap[i])\n                {\n                    const uniformName = groupMap[i][j];\n\n                    nameHash[uniformName] = {\n                        group: i as unknown as number,\n                        binding: j as unknown as number,\n                        name: uniformName\n                    };\n                }\n            }\n        }\n        else if (gpuProgram && groups && !groupMap)\n        {\n            const groupData = gpuProgram.structsAndGroups.groups;\n\n            groupMap = {};\n\n            groupData.forEach((data) =>\n            {\n                groupMap[data.group] = groupMap[data.group] || {};\n                groupMap[data.group][data.binding] = data.name;\n\n                nameHash[data.name] = data;\n            });\n        }\n        else if (resources)\n        {\n            if (!gpuProgram)\n            {\n                // build out a dummy bind group..\n                groupMap = {};\n                groups = {\n                    99: new BindGroup(),\n                };\n\n                this._ownedBindGroups.push(groups[99]);\n\n                let bindTick = 0;\n\n                for (const i in resources)\n                {\n                    // Yes i know this is a little strange, but wil line up the shaders neatly\n                    // basically we want to be driven by how webGPU does things.\n                    // so making a fake group will work and not affect gpu as it means no gpu shader was provided..\n                    nameHash[i] = { group: 99, binding: bindTick, name: i };\n\n                    groupMap[99] = groupMap[99] || {};\n                    groupMap[99][bindTick] = i;\n\n                    bindTick++;\n                }\n            }\n            else\n            {\n                const groupData = gpuProgram.structsAndGroups.groups;\n\n                groupMap = {};\n\n                groupData.forEach((data) =>\n                {\n                    groupMap[data.group] = groupMap[data.group] || {};\n                    groupMap[data.group][data.binding] = data.name;\n\n                    nameHash[data.name] = data;\n                });\n            }\n\n            groups = {};\n\n            for (const i in resources)\n            {\n                const name = i;\n                let value = resources[i];\n\n                if (!(value.source) && !(value as BindResource)._resourceType)\n                {\n                    value = new UniformGroup(value);\n                }\n\n                const data = nameHash[name];\n\n                if (data)\n                {\n                    if (!groups[data.group])\n                    {\n                        groups[data.group] = new BindGroup();\n\n                        this._ownedBindGroups.push(groups[data.group]);\n                    }\n\n                    groups[data.group].setResource(value, data.binding);\n                }\n            }\n        }\n\n        this.groups = groups;\n        this._uniformBindMap = groupMap;\n\n        this.resources = this._buildResourceAccessor(groups, nameHash);\n    }\n\n    /**\n     * Sometimes a resource group will be provided later (for example global uniforms)\n     * In such cases, this method can be used to let the shader know about the group.\n     * @param name - the name of the resource group\n     * @param groupIndex - the index of the group (should match the webGPU shader group location)\n     * @param bindIndex - the index of the bind point (should match the webGPU shader bind point)\n     */\n    public addResource(name: string, groupIndex: number, bindIndex: number): void\n    {\n        this._uniformBindMap[groupIndex] ||= {};\n\n        this._uniformBindMap[groupIndex][bindIndex] ||= name;\n\n        if (!this.groups[groupIndex])\n        {\n            this.groups[groupIndex] = new BindGroup();\n            this._ownedBindGroups.push(this.groups[groupIndex]);\n        }\n    }\n\n    private _buildResourceAccessor(groups: ShaderGroups, nameHash: Record<string, GroupsData>)\n    {\n        const uniformsOut = {};\n\n        for (const i in nameHash)\n        {\n            const data = nameHash[i];\n\n            // add getter setter for uniforms\n            Object.defineProperty(uniformsOut, data.name, {\n                get()\n                {\n                    return groups[data.group].getResource(data.binding);\n                },\n                set(value)\n                {\n                    groups[data.group].setResource(value, data.binding);\n                }\n            });\n        }\n\n        return uniformsOut;\n    }\n\n    /**\n     * Use to destroy the shader when its not longer needed.\n     * It will destroy the resources and remove listeners.\n     * @param destroyPrograms - if the programs should be destroyed as well.\n     * Make sure its not being used by other shaders!\n     */\n    public destroy(destroyPrograms = false): void\n    {\n        this.emit('destroy', this);\n\n        if (destroyPrograms)\n        {\n            this.gpuProgram?.destroy();\n            this.glProgram?.destroy();\n        }\n\n        this.gpuProgram = null;\n        this.glProgram = null;\n\n        this.removeAllListeners();\n\n        this._uniformBindMap = null;\n\n        this._ownedBindGroups.forEach((bindGroup) =>\n        {\n            bindGroup.destroy();\n        });\n\n        (this._ownedBindGroups as null) = null;\n\n        this.resources = null;\n        this.groups = null;\n    }\n\n    /**\n     * A short hand function to create a shader based of a vertex and fragment shader.\n     * @param options\n     * @returns A shiny new PixiJS shader!\n     */\n    public static from(options: ShaderFromGroups): Shader;\n    public static from(options: ShaderFromResources): Shader;\n    public static from(options: ShaderFromGroups & ShaderFromResources): Shader\n    {\n        const { gpu, gl, ...rest } = options;\n\n        let gpuProgram: GpuProgram;\n        let glProgram: GlProgram;\n\n        if (gpu)\n        {\n            gpuProgram = GpuProgram.from(gpu);\n        }\n\n        if (gl)\n        {\n            glProgram = GlProgram.from(gl);\n        }\n\n        return new Shader({\n            gpuProgram,\n            glProgram,\n            ...rest\n        });\n    }\n}\n",null,"import type { ICanvas } from '../../environment/canvas/ICanvas';\nimport type { WebGLOptions, WebGLPipes, WebGLRenderer } from './gl/WebGLRenderer';\nimport type { WebGPUOptions, WebGPUPipes, WebGPURenderer } from './gpu/WebGPURenderer';\n\n/** A generic renderer. */\nexport type Renderer<T extends ICanvas = HTMLCanvasElement> = WebGLRenderer<T> | WebGPURenderer<T>;\nexport type RenderPipes = WebGLPipes | WebGPUPipes;\nexport interface RendererOptions extends WebGLOptions, WebGPUOptions {}\n\n/* eslint-disable @typescript-eslint/indent */\n/**\n * Ids for the different render types.\n * The idea is that you can use bitwise operations to filter weather or not you want to do somthing in a certain render type.\n * Filters for example can be compatible for both webGL or WebGPU but not compatible with canvas.\n * So internally if it works with both we set filter.compatibleRenderers = RendererType.WEBGL | RendererType.WEBGPU\n * if it only works with webgl we set filter.compatibleRenderers = RendererType.WEBGL\n *\n */\nexport enum RendererType\n{\n    WEBGL = 0b01,\n    WEBGPU = 0b10,\n    BOTH = 0b11\n}\n\nexport type GpuPowerPreference = 'low-power' | 'high-performance';\n",null,"// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */` \n            outColor = vColor * calculateMSDFAlpha(outColor, localUniforms.uDistance);\n        `\n\n    }\n};\n\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */` \n            outColor = vColor * calculateMSDFAlpha(outColor, uDistance);\n        `\n\n    }\n};\n",null,"export const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                return alpha;\n            }\n        `,\n    }\n\n};\n\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                return alpha;\n            }\n        `,\n    }\n\n};\n",null,"import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n",null,"import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HtmlTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite.batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        this._gpuText[htmlText.uid] = gpuTextData;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', () =>\n        {\n            this.destroyRenderable(htmlText);\n        });\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n",null,"import { ExtensionType } from '../../extensions/Extensions';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { HTMLTextStyle } from './HtmlTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLTextOptions } from './HTMLText';\nimport type { FontCSSStyleOptions } from './utils/loadFontCSS';\n\ninterface HTMLTextTexture\n{\n    texture: Texture,\n    usageCount: number,\n    promise: Promise<Texture>,\n}\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @memberof rendering\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    public static defaultFontOptions: FontCSSStyleOptions = {\n        fontFamily: 'Arial',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n    };\n\n    private _activeTextures: Record<string, HTMLTextTexture> = {};\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(\n            options.text as string,\n            options.resolution,\n            options.style as HTMLTextStyle\n        );\n    }\n\n    public getManagedTexture(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n        textKey: string\n    ): Promise<Texture>\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].promise;\n        }\n\n        const promise = this._buildTexturePromise(text, resolution, style)\n            .then((texture) =>\n            {\n                this._activeTextures[textKey].texture = texture;\n\n                return texture;\n            });\n\n        this._activeTextures[textKey] = {\n            texture: null,\n            promise,\n            usageCount: 1,\n        };\n\n        return promise;\n    }\n\n    private async _buildTexturePromise(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n    )\n    {\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(\n            fontFamilies,\n            style,\n            HTMLTextStyle.defaultTextStyle as {fontWeight: string, fontStyle: string}\n        );\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        image.width = width | 0;\n        image.height = height | 0;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        let resource: HTMLImageElement | HTMLCanvasElement = image;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            resource = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(resource, image.width, image.height, resolution);\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        // TODO SHOULD NOT BE NEEDED\n        if (!activeTexture) return;\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            if (activeTexture.texture)\n            {\n                this._cleanUp(activeTexture);\n            }\n            else\n            {\n                // we did not resolve...\n                activeTexture.promise.then((texture) =>\n                {\n                    activeTexture.texture = texture;\n\n                    this._cleanUp(activeTexture);\n                }).catch(() =>\n                {\n                    // #if _DEBUG\n                    warn('HTMLTextSystem: Failed to clean texture');\n                    // #endif\n                });\n            }\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    private _cleanUp(activeTexture: HTMLTextTexture)\n    {\n        TexturePool.returnTexture(activeTexture.texture);\n        activeTexture.texture.source.resource = null;\n        activeTexture.texture.source.uploadMethodId = 'unknown';\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n",null,"import { DOMAdapter } from '../../environment/adapter';\n\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n",null,"import type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\nexport const nssvg = 'http://www.w3.org/2000/svg';\nexport const nsxhtml = 'http://www.w3.org/1999/xhtml';\n\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image = new Image();\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n    }\n}\n",null,"/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillStyleInputs } from '../graphics/shared/GraphicsContext';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends {@link TextStyle}.\n * @memberof text\n * @extends text.TextStyleOptions\n * @property {string[]} [cssOverrides] - CSS style(s) to add.\n * @property {Record<string, text.HTMLTextStyleOptions>} [tagStyles] - Tag styles.\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' >\n{\n    cssOverrides?: string[];\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @memberof text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * List of styles per tag.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides ??= options.cssOverrides;\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /** List of style overrides that will be applied to the HTML text. */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    protected override _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join('-');\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * @returns New cloned HTMLTextStyle object\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n        });\n    }\n\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    override set fill(value: FillStyleInputs)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    override set stroke(value: FillStyleInputs)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n",null,"import { Color } from '../../../color/Color';\n\nimport type { StrokeStyle } from '../../graphics/shared/GraphicsContext';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HtmlTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: StrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n",null,"import type { HTMLTextStyle } from '../HtmlTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n",null,"import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS(style, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n",null,"import { loadFontAsBase64 } from './loadFontAsBase64';\n\nexport interface FontCSSStyleOptions\n{\n    fontFamily: string | string[]\n    fontWeight: string\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n",null,"import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n",null,"import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HtmlTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n",null,"import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * This canvas is immediately returned to the CanvasPool for reuse, so use the result straight away!\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): HTMLCanvasElement\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas and context to the CanvasPool.\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n    // Return the canvas.\n    return canvasAndContext.canvas as HTMLCanvasElement;\n}\n\n",null,"/**\n * This function loads an SVG image into an HTMLImageElement.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n */\nexport function loadSVGImage(image: HTMLImageElement, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n",null,"import { CanvasTextMetrics } from '../../text/canvas/CanvasTextMetrics';\nimport { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HtmlTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData = htmlTextRenderData || tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    const descenderPadding = CanvasTextMetrics.measureFont(style.fontStyle).descent;\n\n    return {\n        width: contentBounds.width,\n        height: contentBounds.height + descenderPadding,\n    };\n}\n",null,"import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n",null,"/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            // we are batching.. check a texture change!\n            if (batchableMesh.texture._source !== renderable.texture._source)\n\n            { return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, renderable.texture); }\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite._didTilingSpriteUpdate)\n            {\n                tilingSprite._didTilingSpriteUpdate = false;\n\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.mesh = tilingSprite;\n                batchableMesh.texture = tilingSprite._texture;\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: State.default2d,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite._didTilingSpriteUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh.batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite._didTilingSpriteUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n\n        tilingSprite._didTilingSpriteUpdate = false;\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', () =>\n        {\n            this.destroyRenderable(tilingSprite);\n        });\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n",null,"import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @memberof scene\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @memberof scene\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {scene.MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n",null,"import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n",null,"export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n",null,"export const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    }\n\n};\n",null,"import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n",null,"import type { TilingSprite } from '../TilingSprite';\n\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n",null,"import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite._applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n",null,"import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n",null,"import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n",null,"import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private readonly _gpuSpriteHash: Record<number, BatchableMesh> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(sprite: NineSliceSprite, _instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite.batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (gpuSprite.texture._source !== texture._source)\n        {\n            return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n        }\n\n        return false;\n    }\n\n    public destroyRenderable(sprite: NineSliceSprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        sprite._didSpriteUpdate = false;\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        const batchableMesh = new BatchableMesh();\n\n        batchableMesh.geometry = new NineSliceGeometry();\n\n        batchableMesh.mesh = sprite;\n\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableMesh;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', () =>\n        {\n            this.destroyRenderable(sprite);\n        });\n\n        return batchableMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            const batchableMesh = this._gpuSpriteHash[i];\n\n            batchableMesh.geometry.destroy();\n        }\n\n        (this._gpuSpriteHash as null) = null;\n        (this._renderer as null) = null;\n    }\n}\n",null,"import { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\n\n/**\n * Options for the NineSliceGeometry.\n * @memberof scene\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @memberof scene\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    public _leftWidth: number;\n    public _rightWidth: number;\n    public _topHeight: number;\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const positions = this.positions;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this.width > w ? 1.0 : this.width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this.height > h ? 1.0 : this.height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n        positions[17] = positions[19] = positions[21] = positions[23] = this.height - (this._bottomHeight * scale);\n        positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n\n        positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n        positions[4] = positions[12] = positions[20] = positions[28] = this.width - (this._rightWidth * scale);\n        positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n",null,"import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link scene.PlaneGeometry}\n * @memberof scene\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @memberof scene\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n",null,"import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n",null,"import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\n// eslint-disable-next-line max-len\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n",null,"import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            location: 0,\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            getFastGlobalBounds(instruction.container, bounds);\n        }\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.rootRenderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = colorTextureSource._resolution;\n\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for any filter, it should be true\n        let antialias = colorTextureSource.antialias;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias !== 'inherit')\n            {\n                if (filter.antialias === 'on')\n                {\n                    antialias = true;\n                }\n                else\n                {\n                    antialias = false;\n                }\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired = blendRequired || filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const viewPort = renderer.renderTarget.rootViewPort;\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        // need to factor in resolutions also..\n        bounds.scale(resolution)\n            .fitBounds(0, viewPort.width, 0, viewPort.height)\n            .scale(1 / resolution)\n            .pad(padding)\n            .ceil();\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n        // eslint-disable-next-line max-len\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n",null,"import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\n// TODO could we cache local bounds on the render groups?\n\nconst tempMatrix = new Matrix();\n\n/**\n * Does exactly the same as getGlobalBounds, but does instead makes use of transforming AABBs\n * of the various children within the scene graph. This is much faster, but less accurate.\n *\n * the result will never be smaller - only ever slightly larger (in most cases, it will be the same).\n * @param target - The target container to get the bounds from\n * @param bounds - The output bounds object.\n * @returns The bounds.\n */\nexport function getFastGlobalBounds(target: Container, bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    _getGlobalBoundsRecursive(target, bounds);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    if (!target.isRenderGroupRoot)\n    {\n        bounds.applyMatrix(target.renderGroup.worldTransform);\n    }\n    else\n    {\n        bounds.applyMatrix(target.renderGroup.localTransform);\n    }\n\n    return bounds;\n}\n\nexport function _getGlobalBoundsRecursive(\n    target: Container,\n    bounds: Bounds,\n)\n{\n    if (target.localDisplayStatus !== 0b111 || !target.measurable)\n    {\n        return;\n    }\n\n    const manageEffects = !!target.effects.length;\n\n    let localBounds = bounds;\n\n    if (target.isRenderGroupRoot || manageEffects)\n    {\n        localBounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, target.worldTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            const viewBounds = (target as Renderable).bounds;\n\n            localBounds.addFrame(\n                viewBounds.minX,\n                viewBounds.minY,\n                viewBounds.maxX,\n                viewBounds.maxY,\n                target.groupTransform\n            );\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getGlobalBoundsRecursive(children[i], localBounds);\n        }\n    }\n\n    if (manageEffects)\n    {\n        let advanced = false;\n\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            if (target.effects[i].addBounds)\n            {\n                if (!advanced)\n                {\n                    advanced = true;\n                    localBounds.applyMatrix(target.renderGroup.worldTransform);\n                }\n\n                target.effects[i].addBounds(localBounds, true);\n            }\n        }\n\n        if (advanced)\n        {\n            localBounds.applyMatrix(target.renderGroup.worldTransform.copyTo(tempMatrix).invert());\n            bounds.addBounds(localBounds, target.relativeGroupTransform);\n        }\n\n        bounds.addBounds(localBounds);\n        boundsPool.return(localBounds);\n    }\n    else if (target.isRenderGroupRoot)\n    {\n        bounds.addBounds(localBounds, target.relativeGroupTransform);\n        boundsPool.return(localBounds);\n    }\n}\n",null,"import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        renderable.addBounds(bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n"],"names":["ExtensionType","extensions","x0","x1","y0","y1","UPDATE_PRIORITY","LoaderParserPriority","src","path","video","key","BufferUsage","STENCIL_MODES","y2","x2","i","out","pageData","j","name","ShaderStage","RendererType","fontFamily","resolve","filterData"],"version":3,"file":"browserAll.90bfdf54.js.map","sourceRoot":"/__parcel_source_root/"}